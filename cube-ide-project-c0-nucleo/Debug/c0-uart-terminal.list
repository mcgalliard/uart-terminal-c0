
c0-uart-terminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08004a74  08004a74  00005a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca0  08004ca0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004ca0  08004ca0  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004ca0  08004ca0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00005ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ca8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08004d04  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004d04  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5ce  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001996  00000000  00000000  00010652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  00011fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f4  00000000  00000000  00012790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000138a8  00000000  00000000  00012d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a756  00000000  00000000  0002662c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000796a6  00000000  00000000  00030d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002288  00000000  00000000  000aa46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ac6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a5c 	.word	0x08004a5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004a5c 	.word	0x08004a5c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <process_command>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void process_command(const char *cmd)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b099      	sub	sp, #100	@ 0x64
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  if (strncmp(cmd, "read ", 5) == 0)
 8000420:	4926      	ldr	r1, [pc, #152]	@ (80004bc <process_command+0xa4>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2205      	movs	r2, #5
 8000426:	0018      	movs	r0, r3
 8000428:	f003 f9e8 	bl	80037fc <strncmp>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d132      	bne.n	8000496 <process_command+0x7e>
  {
    uint32_t addr = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (sscanf(cmd + 5, "%lx", &addr) == 1)  // FIXED: use %lx
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3305      	adds	r3, #5
 8000438:	2248      	movs	r2, #72	@ 0x48
 800043a:	18ba      	adds	r2, r7, r2
 800043c:	4920      	ldr	r1, [pc, #128]	@ (80004c0 <process_command+0xa8>)
 800043e:	0018      	movs	r0, r3
 8000440:	f003 f9a8 	bl	8003794 <siscanf>
 8000444:	0003      	movs	r3, r0
 8000446:	2b01      	cmp	r3, #1
 8000448:	d116      	bne.n	8000478 <process_command+0x60>
    {
      volatile uint32_t *reg_ptr = (volatile uint32_t *)addr;
 800044a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800044c:	657b      	str	r3, [r7, #84]	@ 0x54
      uint32_t val = *reg_ptr;
 800044e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	653b      	str	r3, [r7, #80]	@ 0x50

      char response[64];
      int len = snprintf(response, sizeof(response), "0x%08lX\r\n", val);
 8000454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000456:	4a1b      	ldr	r2, [pc, #108]	@ (80004c4 <process_command+0xac>)
 8000458:	2408      	movs	r4, #8
 800045a:	1938      	adds	r0, r7, r4
 800045c:	2140      	movs	r1, #64	@ 0x40
 800045e:	f003 f963 	bl	8003728 <sniprintf>
 8000462:	0003      	movs	r3, r0
 8000464:	64fb      	str	r3, [r7, #76]	@ 0x4c
      HAL_UART_Transmit(&huart2, (uint8_t *)response, len, HAL_MAX_DELAY);
 8000466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000468:	b29a      	uxth	r2, r3
 800046a:	2301      	movs	r3, #1
 800046c:	425b      	negs	r3, r3
 800046e:	1939      	adds	r1, r7, r4
 8000470:	4815      	ldr	r0, [pc, #84]	@ (80004c8 <process_command+0xb0>)
 8000472:	f001 f9bb 	bl	80017ec <HAL_UART_Transmit>
  else
  {
    const char *err = "Unknown command\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t *)err, strlen(err), HAL_MAX_DELAY);
  }
}
 8000476:	e01c      	b.n	80004b2 <process_command+0x9a>
      const char *err = "Invalid address format\r\n";
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <process_command+0xb4>)
 800047a:	65bb      	str	r3, [r7, #88]	@ 0x58
      HAL_UART_Transmit(&huart2, (uint8_t *)err, strlen(err), HAL_MAX_DELAY);
 800047c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800047e:	0018      	movs	r0, r3
 8000480:	f7ff fe42 	bl	8000108 <strlen>
 8000484:	0003      	movs	r3, r0
 8000486:	b29a      	uxth	r2, r3
 8000488:	2301      	movs	r3, #1
 800048a:	425b      	negs	r3, r3
 800048c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800048e:	480e      	ldr	r0, [pc, #56]	@ (80004c8 <process_command+0xb0>)
 8000490:	f001 f9ac 	bl	80017ec <HAL_UART_Transmit>
}
 8000494:	e00d      	b.n	80004b2 <process_command+0x9a>
    const char *err = "Unknown command\r\n";
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <process_command+0xb8>)
 8000498:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_UART_Transmit(&huart2, (uint8_t *)err, strlen(err), HAL_MAX_DELAY);
 800049a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff fe33 	bl	8000108 <strlen>
 80004a2:	0003      	movs	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2301      	movs	r3, #1
 80004a8:	425b      	negs	r3, r3
 80004aa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80004ac:	4806      	ldr	r0, [pc, #24]	@ (80004c8 <process_command+0xb0>)
 80004ae:	f001 f99d 	bl	80017ec <HAL_UART_Transmit>
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b019      	add	sp, #100	@ 0x64
 80004b8:	bd90      	pop	{r4, r7, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	08004a74 	.word	0x08004a74
 80004c0:	08004a7c 	.word	0x08004a7c
 80004c4:	08004a80 	.word	0x08004a80
 80004c8:	20000078 	.word	0x20000078
 80004cc:	08004a8c 	.word	0x08004a8c
 80004d0:	08004aa8 	.word	0x08004aa8

080004d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a1a      	ldr	r2, [pc, #104]	@ (800054c <HAL_UART_RxCpltCallback+0x78>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d12e      	bne.n	8000544 <HAL_UART_RxCpltCallback+0x70>
  {
    // Handle incoming character
    if (rx_char == '\r' || rx_char == '\n')
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <HAL_UART_RxCpltCallback+0x7c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0d      	cmp	r3, #13
 80004ec:	d003      	beq.n	80004f6 <HAL_UART_RxCpltCallback+0x22>
 80004ee:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <HAL_UART_RxCpltCallback+0x7c>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b0a      	cmp	r3, #10
 80004f4:	d111      	bne.n	800051a <HAL_UART_RxCpltCallback+0x46>
    {
      cmd_buffer[cmd_index] = '\0'; // Null-terminate string
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <HAL_UART_RxCpltCallback+0x80>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	001a      	movs	r2, r3
 80004fc:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <HAL_UART_RxCpltCallback+0x84>)
 80004fe:	2100      	movs	r1, #0
 8000500:	5499      	strb	r1, [r3, r2]
      if (cmd_index > 0)
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <HAL_UART_RxCpltCallback+0x80>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d003      	beq.n	8000512 <HAL_UART_RxCpltCallback+0x3e>
      {
        process_command(cmd_buffer);
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <HAL_UART_RxCpltCallback+0x84>)
 800050c:	0018      	movs	r0, r3
 800050e:	f7ff ff83 	bl	8000418 <process_command>
      }
      cmd_index = 0; // Reset buffer
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <HAL_UART_RxCpltCallback+0x80>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	e00e      	b.n	8000538 <HAL_UART_RxCpltCallback+0x64>
    }
    else
    {
      if (cmd_index < CMD_BUFFER_SIZE - 1)
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <HAL_UART_RxCpltCallback+0x80>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000520:	d80a      	bhi.n	8000538 <HAL_UART_RxCpltCallback+0x64>
      {
        cmd_buffer[cmd_index++] = rx_char;
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <HAL_UART_RxCpltCallback+0x80>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	b2d1      	uxtb	r1, r2
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <HAL_UART_RxCpltCallback+0x80>)
 800052c:	7011      	strb	r1, [r2, #0]
 800052e:	001a      	movs	r2, r3
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <HAL_UART_RxCpltCallback+0x7c>)
 8000532:	7819      	ldrb	r1, [r3, #0]
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <HAL_UART_RxCpltCallback+0x84>)
 8000536:	5499      	strb	r1, [r3, r2]
      }
      // Ignore overflow for now
    }

    // Restart UART receive interrupt for next char
    HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 8000538:	4905      	ldr	r1, [pc, #20]	@ (8000550 <HAL_UART_RxCpltCallback+0x7c>)
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <HAL_UART_RxCpltCallback+0x88>)
 800053c:	2201      	movs	r2, #1
 800053e:	0018      	movs	r0, r3
 8000540:	f001 f9f8 	bl	8001934 <HAL_UART_Receive_IT>
  }
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40004400 	.word	0x40004400
 8000550:	2000010c 	.word	0x2000010c
 8000554:	20000150 	.word	0x20000150
 8000558:	20000110 	.word	0x20000110
 800055c:	20000078 	.word	0x20000078

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 f9cf 	bl	8000906 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f810 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f8a8 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f858 	bl	8000624 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 8000574:	4903      	ldr	r1, [pc, #12]	@ (8000584 <main+0x24>)
 8000576:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <main+0x28>)
 8000578:	2201      	movs	r2, #1
 800057a:	0018      	movs	r0, r3
 800057c:	f001 f9da 	bl	8001934 <HAL_UART_Receive_IT>
  while (1)
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	e7fd      	b.n	8000580 <main+0x20>
 8000584:	2000010c 	.word	0x2000010c
 8000588:	20000078 	.word	0x20000078

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08d      	sub	sp, #52	@ 0x34
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	2414      	movs	r4, #20
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	231c      	movs	r3, #28
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f003 f925 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	2314      	movs	r3, #20
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f003 f91e 	bl	80037ec <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80005b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <SystemClock_Config+0x94>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <SystemClock_Config+0x94>)
 80005b6:	2107      	movs	r1, #7
 80005b8:	438a      	bics	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2202      	movs	r2, #2
 80005c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2280      	movs	r2, #128	@ 0x80
 80005c6:	0052      	lsls	r2, r2, #1
 80005c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	0152      	lsls	r2, r2, #5
 80005d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2240      	movs	r2, #64	@ 0x40
 80005d6:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fd3c 	bl	8001058 <HAL_RCC_OscConfig>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005e4:	f000 f882 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	003b      	movs	r3, r7
 80005ea:	2207      	movs	r2, #7
 80005ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ee:	003b      	movs	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	003b      	movs	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005fa:	003b      	movs	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000600:	003b      	movs	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000606:	003b      	movs	r3, r7
 8000608:	2100      	movs	r1, #0
 800060a:	0018      	movs	r0, r3
 800060c:	f000 ff08 	bl	8001420 <HAL_RCC_ClockConfig>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000614:	f000 f86a 	bl	80006ec <Error_Handler>
  }
}
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b00d      	add	sp, #52	@ 0x34
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	40022000 	.word	0x40022000

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 800062a:	4a24      	ldr	r2, [pc, #144]	@ (80006bc <MX_USART2_UART_Init+0x98>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 8000630:	22e1      	movs	r2, #225	@ 0xe1
 8000632:	0252      	lsls	r2, r2, #9
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065a:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000660:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000666:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 800066e:	0018      	movs	r0, r3
 8000670:	f001 f866 	bl	8001740 <HAL_UART_Init>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000678:	f000 f838 	bl	80006ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 800067e:	2100      	movs	r1, #0
 8000680:	0018      	movs	r0, r3
 8000682:	f002 ff71 	bl	8003568 <HAL_UARTEx_SetTxFifoThreshold>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800068a:	f000 f82f 	bl	80006ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 8000690:	2100      	movs	r1, #0
 8000692:	0018      	movs	r0, r3
 8000694:	f002 ffa8 	bl	80035e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800069c:	f000 f826 	bl	80006ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <MX_USART2_UART_Init+0x94>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 ff26 	bl	80034f4 <HAL_UARTEx_DisableFifoMode>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006ac:	f000 f81e 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	20000078 	.word	0x20000078
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_GPIO_Init+0x28>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_GPIO_Init+0x28>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <MX_GPIO_Init+0x28>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	40021000 	.word	0x40021000

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	46c0      	nop			@ (mov r8, r8)
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <HAL_MspInit+0x44>)
 8000700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <HAL_MspInit+0x44>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	641a      	str	r2, [r3, #64]	@ 0x40
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <HAL_MspInit+0x44>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_MspInit+0x44>)
 8000718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_MspInit+0x44>)
 800071c:	2180      	movs	r1, #128	@ 0x80
 800071e:	0549      	lsls	r1, r1, #21
 8000720:	430a      	orrs	r2, r1
 8000722:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_MspInit+0x44>)
 8000726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000728:	2380      	movs	r3, #128	@ 0x80
 800072a:	055b      	lsls	r3, r3, #21
 800072c:	4013      	ands	r3, r2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	2414      	movs	r4, #20
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f003 f84a 	bl	80037ec <memset>
  if(huart->Instance==USART2)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <HAL_UART_MspInit+0x9c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d138      	bne.n	80007d4 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_UART_MspInit+0xa0>)
 8000764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <HAL_UART_MspInit+0xa0>)
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	0289      	lsls	r1, r1, #10
 800076c:	430a      	orrs	r2, r1
 800076e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <HAL_UART_MspInit+0xa0>)
 8000772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	029b      	lsls	r3, r3, #10
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_UART_MspInit+0xa0>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_UART_MspInit+0xa0>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	635a      	str	r2, [r3, #52]	@ 0x34
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_UART_MspInit+0xa0>)
 800078c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000796:	0021      	movs	r1, r4
 8000798:	187b      	adds	r3, r7, r1
 800079a:	220c      	movs	r2, #12
 800079c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2202      	movs	r2, #2
 80007a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	187a      	adds	r2, r7, r1
 80007b8:	23a0      	movs	r3, #160	@ 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fad8 	bl	8000d74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	201c      	movs	r0, #28
 80007ca:	f000 f9c5 	bl	8000b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007ce:	201c      	movs	r0, #28
 80007d0:	f000 f9d7 	bl	8000b82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b00b      	add	sp, #44	@ 0x2c
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	40004400 	.word	0x40004400
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f8dc 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800081c:	4b03      	ldr	r3, [pc, #12]	@ (800082c <USART2_IRQHandler+0x14>)
 800081e:	0018      	movs	r0, r3
 8000820:	f001 f8e0 	bl	80019e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	20000078 	.word	0x20000078

08000830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000838:	4a14      	ldr	r2, [pc, #80]	@ (800088c <_sbrk+0x5c>)
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <_sbrk+0x60>)
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <_sbrk+0x64>)
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <_sbrk+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d207      	bcs.n	8000870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000860:	f002 ffde 	bl	8003820 <__errno>
 8000864:	0003      	movs	r3, r0
 8000866:	220c      	movs	r2, #12
 8000868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086a:	2301      	movs	r3, #1
 800086c:	425b      	negs	r3, r3
 800086e:	e009      	b.n	8000884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	18d2      	adds	r2, r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <_sbrk+0x64>)
 8000880:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b006      	add	sp, #24
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20003000 	.word	0x20003000
 8000890:	00000400 	.word	0x00000400
 8000894:	20000154 	.word	0x20000154
 8000898:	200002a8 	.word	0x200002a8

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <SystemInit+0x14>)
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	0512      	lsls	r2, r2, #20
 80008a6:	609a      	str	r2, [r3, #8]
#endif
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b8:	f7ff fff0 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008be:	e003      	b.n	80008c8 <LoopCopyDataInit>

080008c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80008c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008c6:	3104      	adds	r1, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008c8:	480a      	ldr	r0, [pc, #40]	@ (80008f4 <LoopForever+0xa>)
  ldr r3, =_edata
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <LoopForever+0xe>)
  adds r2, r0, r1
 80008cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008d0:	d3f6      	bcc.n	80008c0 <CopyDataInit>
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <LoopForever+0x12>)
  b LoopFillZerobss
 80008d4:	e002      	b.n	80008dc <LoopFillZerobss>

080008d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  str  r3, [r2]
 80008d8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008da:	3204      	adds	r2, #4

080008dc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <LoopForever+0x16>)
  cmp r2, r3
 80008de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008e0:	d3f9      	bcc.n	80008d6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80008e2:	f002 ffa3 	bl	800382c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fe3b 	bl	8000560 <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   r0, =_estack
 80008ec:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80008f0:	08004ca8 	.word	0x08004ca8
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 80008fc:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000900:	200002a4 	.word	0x200002a4

08000904 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_IRQHandler>

08000906 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000912:	2003      	movs	r0, #3
 8000914:	f000 f80e 	bl	8000934 <HAL_InitTick>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d003      	beq.n	8000924 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e001      	b.n	8000928 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000924:	f7ff fee8 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	b002      	add	sp, #8
 8000932:	bd80      	pop	{r7, pc}

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800093c:	230f      	movs	r3, #15
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <HAL_InitTick+0x88>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d02b      	beq.n	80009a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <HAL_InitTick+0x8c>)
 800094e:	681c      	ldr	r4, [r3, #0]
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <HAL_InitTick+0x88>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0019      	movs	r1, r3
 8000956:	23fa      	movs	r3, #250	@ 0xfa
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	f7ff fbe7 	bl	800012c <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0019      	movs	r1, r3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff fbe2 	bl	800012c <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f919 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d112      	bne.n	800099a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d80a      	bhi.n	8000990 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	2301      	movs	r3, #1
 800097e:	425b      	negs	r3, r3
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f000 f8e8 	bl	8000b58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HAL_InitTick+0x90>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	e00d      	b.n	80009ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000990:	230f      	movs	r3, #15
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e008      	b.n	80009ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	230f      	movs	r3, #15
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e003      	b.n	80009ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a4:	230f      	movs	r3, #15
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009ac:	230f      	movs	r3, #15
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	781b      	ldrb	r3, [r3, #0]
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b005      	add	sp, #20
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	001a      	movs	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	18d2      	adds	r2, r2, r3
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <HAL_IncTick+0x20>)
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000158 	.word	0x20000158

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	@ (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	20000158 	.word	0x20000158

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a12:	d809      	bhi.n	8000a28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	231f      	movs	r3, #31
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <__NVIC_EnableIRQ+0x30>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	4091      	lsls	r1, r2
 8000a24:	000a      	movs	r2, r1
 8000a26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a48:	d828      	bhi.n	8000a9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <__NVIC_SetPriority+0xd4>)
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	33c0      	adds	r3, #192	@ 0xc0
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	589b      	ldr	r3, [r3, r2]
 8000a5a:	1dfa      	adds	r2, r7, #7
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	0011      	movs	r1, r2
 8000a60:	2203      	movs	r2, #3
 8000a62:	400a      	ands	r2, r1
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	21ff      	movs	r1, #255	@ 0xff
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	401a      	ands	r2, r3
 8000a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	019b      	lsls	r3, r3, #6
 8000a76:	22ff      	movs	r2, #255	@ 0xff
 8000a78:	401a      	ands	r2, r3
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2303      	movs	r3, #3
 8000a82:	4003      	ands	r3, r0
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	481f      	ldr	r0, [pc, #124]	@ (8000b08 <__NVIC_SetPriority+0xd4>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	430a      	orrs	r2, r1
 8000a94:	33c0      	adds	r3, #192	@ 0xc0
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a9a:	e031      	b.n	8000b00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b0c <__NVIC_SetPriority+0xd8>)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	3b08      	subs	r3, #8
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	3306      	adds	r3, #6
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	18d3      	adds	r3, r2, r3
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1dfa      	adds	r2, r7, #7
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	0011      	movs	r1, r2
 8000abc:	2203      	movs	r2, #3
 8000abe:	400a      	ands	r2, r1
 8000ac0:	00d2      	lsls	r2, r2, #3
 8000ac2:	21ff      	movs	r1, #255	@ 0xff
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	43d2      	mvns	r2, r2
 8000aca:	401a      	ands	r2, r3
 8000acc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	22ff      	movs	r2, #255	@ 0xff
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0018      	movs	r0, r3
 8000adc:	2303      	movs	r3, #3
 8000ade:	4003      	ands	r3, r0
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	001c      	movs	r4, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	4023      	ands	r3, r4
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	430a      	orrs	r2, r1
 8000af6:	3306      	adds	r3, #6
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	18c3      	adds	r3, r0, r3
 8000afc:	3304      	adds	r3, #4
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b003      	add	sp, #12
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	2380      	movs	r3, #128	@ 0x80
 8000b1e:	045b      	lsls	r3, r3, #17
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d301      	bcc.n	8000b28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b24:	2301      	movs	r3, #1
 8000b26:	e010      	b.n	8000b4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <SysTick_Config+0x44>)
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b30:	2301      	movs	r3, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	2103      	movs	r1, #3
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff ff7c 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <SysTick_Config+0x44>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <SysTick_Config+0x44>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	210f      	movs	r1, #15
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	1c02      	adds	r2, r0, #0
 8000b68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	0002      	movs	r2, r0
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff33 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ffaf 	bl	8000b10 <SysTick_Config>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e050      	b.n	8000c70 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2225      	movs	r2, #37	@ 0x25
 8000bd2:	5c9b      	ldrb	r3, [r3, r2]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d008      	beq.n	8000bec <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2204      	movs	r2, #4
 8000bde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2224      	movs	r2, #36	@ 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e041      	b.n	8000c70 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	210e      	movs	r1, #14
 8000bf8:	438a      	bics	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	491c      	ldr	r1, [pc, #112]	@ (8000c78 <HAL_DMA_Abort+0xbc>)
 8000c08:	400a      	ands	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2101      	movs	r1, #1
 8000c18:	438a      	bics	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_DMA_Abort+0xc0>)
 8000c1e:	6859      	ldr	r1, [r3, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	221c      	movs	r2, #28
 8000c26:	4013      	ands	r3, r2
 8000c28:	2201      	movs	r2, #1
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_DMA_Abort+0xc0>)
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000c3a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00c      	beq.n	8000c5e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c4e:	490a      	ldr	r1, [pc, #40]	@ (8000c78 <HAL_DMA_Abort+0xbc>)
 8000c50:	400a      	ands	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000c5c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2225      	movs	r2, #37	@ 0x25
 8000c62:	2101      	movs	r1, #1
 8000c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2224      	movs	r2, #36	@ 0x24
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	fffffeff 	.word	0xfffffeff
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c88:	230f      	movs	r3, #15
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2224      	movs	r2, #36	@ 0x24
 8000c94:	2100      	movs	r1, #0
 8000c96:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2224      	movs	r2, #36	@ 0x24
 8000c9c:	5c9b      	ldrb	r3, [r3, r2]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <HAL_DMA_Abort_IT+0x26>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e05e      	b.n	8000d64 <HAL_DMA_Abort_IT+0xe4>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2224      	movs	r2, #36	@ 0x24
 8000caa:	2101      	movs	r1, #1
 8000cac:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2225      	movs	r2, #37	@ 0x25
 8000cb2:	5c9b      	ldrb	r3, [r3, r2]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d007      	beq.n	8000cca <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e049      	b.n	8000d5e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	210e      	movs	r1, #14
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf4:	491d      	ldr	r1, [pc, #116]	@ (8000d6c <HAL_DMA_Abort_IT+0xec>)
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <HAL_DMA_Abort_IT+0xf0>)
 8000cfc:	6859      	ldr	r1, [r3, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	221c      	movs	r2, #28
 8000d04:	4013      	ands	r3, r2
 8000d06:	2201      	movs	r2, #1
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <HAL_DMA_Abort_IT+0xf0>)
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000d18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00c      	beq.n	8000d3c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d2c:	490f      	ldr	r1, [pc, #60]	@ (8000d6c <HAL_DMA_Abort_IT+0xec>)
 8000d2e:	400a      	ands	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000d3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2225      	movs	r2, #37	@ 0x25
 8000d40:	2101      	movs	r1, #1
 8000d42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2224      	movs	r2, #36	@ 0x24
 8000d48:	2100      	movs	r1, #0
 8000d4a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	0010      	movs	r0, r2
 8000d5c:	4798      	blx	r3
    }
  }
  return status;
 8000d5e:	230f      	movs	r3, #15
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	781b      	ldrb	r3, [r3, #0]
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b004      	add	sp, #16
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	fffffeff 	.word	0xfffffeff
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d82:	e153      	b.n	800102c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d100      	bne.n	8000d9c <HAL_GPIO_Init+0x28>
 8000d9a:	e144      	b.n	8001026 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x38>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b12      	cmp	r3, #18
 8000daa:	d125      	bne.n	8000df8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	58d3      	ldr	r3, [r2, r3]
 8000db8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	2107      	movs	r1, #7
 8000ddc:	400b      	ands	r3, r1
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	409a      	lsls	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3208      	adds	r2, #8
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	6979      	ldr	r1, [r7, #20]
 8000df6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	409a      	lsls	r2, r3
 8000e06:	0013      	movs	r3, r2
 8000e08:	43da      	mvns	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	401a      	ands	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d00b      	beq.n	8000e4c <HAL_GPIO_Init+0xd8>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d007      	beq.n	8000e4c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e40:	2b11      	cmp	r3, #17
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b12      	cmp	r3, #18
 8000e4a:	d130      	bne.n	8000eae <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	409a      	lsls	r2, r3
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	43da      	mvns	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	0013      	movs	r3, r2
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e82:	2201      	movs	r2, #1
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d017      	beq.n	8000ee6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2380      	movs	r3, #128	@ 0x80
 8000eec:	055b      	lsls	r3, r3, #21
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d100      	bne.n	8000ef4 <HAL_GPIO_Init+0x180>
 8000ef2:	e098      	b.n	8001026 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000ef4:	4a53      	ldr	r2, [pc, #332]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3318      	adds	r3, #24
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	589b      	ldr	r3, [r3, r2]
 8000f00:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2203      	movs	r2, #3
 8000f06:	4013      	ands	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	43da      	mvns	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	23a0      	movs	r3, #160	@ 0xa0
 8000f1c:	05db      	lsls	r3, r3, #23
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a48      	ldr	r2, [pc, #288]	@ (8001048 <HAL_GPIO_Init+0x2d4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x1de>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a47      	ldr	r2, [pc, #284]	@ (800104c <HAL_GPIO_Init+0x2d8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x1da>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a46      	ldr	r2, [pc, #280]	@ (8001050 <HAL_GPIO_Init+0x2dc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x1d6>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a45      	ldr	r2, [pc, #276]	@ (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x1d2>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x1e4>
 8000f46:	2306      	movs	r3, #6
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x1e4>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x1e4>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x1e4>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x1e4>
 8000f56:	2300      	movs	r3, #0
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	00d2      	lsls	r2, r2, #3
 8000f60:	4093      	lsls	r3, r2
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f68:	4936      	ldr	r1, [pc, #216]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3318      	adds	r3, #24
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000f76:	4a33      	ldr	r2, [pc, #204]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	58d3      	ldr	r3, [r2, r3]
 8000f7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43da      	mvns	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	2380      	movs	r3, #128	@ 0x80
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	4013      	ands	r3, r2
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000f9c:	4929      	ldr	r1, [pc, #164]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000fa4:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	2384      	movs	r3, #132	@ 0x84
 8000fa8:	58d3      	ldr	r3, [r2, r3]
 8000faa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	2380      	movs	r3, #128	@ 0x80
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000fca:	491e      	ldr	r1, [pc, #120]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fcc:	2284      	movs	r2, #132	@ 0x84
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	035b      	lsls	r3, r3, #13
 8000fea:	4013      	ands	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	039b      	lsls	r3, r3, #14
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	3301      	adds	r3, #1
 800102a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	40da      	lsrs	r2, r3
 8001034:	1e13      	subs	r3, r2, #0
 8001036:	d000      	beq.n	800103a <HAL_GPIO_Init+0x2c6>
 8001038:	e6a4      	b.n	8000d84 <HAL_GPIO_Init+0x10>
  }
}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b006      	add	sp, #24
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021800 	.word	0x40021800
 8001048:	50000400 	.word	0x50000400
 800104c:	50000800 	.word	0x50000800
 8001050:	50000c00 	.word	0x50000c00
 8001054:	50001400 	.word	0x50001400

08001058 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e1d0      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	d100      	bne.n	8001076 <HAL_RCC_OscConfig+0x1e>
 8001074:	e069      	b.n	800114a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001076:	4bc8      	ldr	r3, [pc, #800]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2238      	movs	r2, #56	@ 0x38
 800107c:	4013      	ands	r3, r2
 800107e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b08      	cmp	r3, #8
 8001084:	d105      	bne.n	8001092 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d15d      	bne.n	800114a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e1bc      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	025b      	lsls	r3, r3, #9
 800109a:	429a      	cmp	r2, r3
 800109c:	d107      	bne.n	80010ae <HAL_RCC_OscConfig+0x56>
 800109e:	4bbe      	ldr	r3, [pc, #760]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4bbd      	ldr	r3, [pc, #756]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010a4:	2180      	movs	r1, #128	@ 0x80
 80010a6:	0249      	lsls	r1, r1, #9
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e020      	b.n	80010f0 <HAL_RCC_OscConfig+0x98>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	23a0      	movs	r3, #160	@ 0xa0
 80010b4:	02db      	lsls	r3, r3, #11
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d10e      	bne.n	80010d8 <HAL_RCC_OscConfig+0x80>
 80010ba:	4bb7      	ldr	r3, [pc, #732]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4bb6      	ldr	r3, [pc, #728]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	02c9      	lsls	r1, r1, #11
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	4bb3      	ldr	r3, [pc, #716]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4bb2      	ldr	r3, [pc, #712]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	0249      	lsls	r1, r1, #9
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e00b      	b.n	80010f0 <HAL_RCC_OscConfig+0x98>
 80010d8:	4baf      	ldr	r3, [pc, #700]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4bae      	ldr	r3, [pc, #696]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010de:	49af      	ldr	r1, [pc, #700]	@ (800139c <HAL_RCC_OscConfig+0x344>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	4bac      	ldr	r3, [pc, #688]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4bab      	ldr	r3, [pc, #684]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80010ea:	49ad      	ldr	r1, [pc, #692]	@ (80013a0 <HAL_RCC_OscConfig+0x348>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d014      	beq.n	8001122 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc78 	bl	80009ec <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001102:	f7ff fc73 	bl	80009ec <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	@ 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e17b      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001114:	4ba0      	ldr	r3, [pc, #640]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0xaa>
 8001120:	e013      	b.n	800114a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001122:	f7ff fc63 	bl	80009ec <HAL_GetTick>
 8001126:	0003      	movs	r3, r0
 8001128:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800112c:	f7ff fc5e 	bl	80009ec <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e166      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113e:	4b96      	ldr	r3, [pc, #600]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	2380      	movs	r3, #128	@ 0x80
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	4013      	ands	r3, r2
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_RCC_OscConfig+0xfe>
 8001154:	e086      	b.n	8001264 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001156:	4b90      	ldr	r3, [pc, #576]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2238      	movs	r2, #56	@ 0x38
 800115c:	4013      	ands	r3, r2
 800115e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d12f      	bne.n	80011c6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e14c      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4b89      	ldr	r3, [pc, #548]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a8b      	ldr	r2, [pc, #556]	@ (80013a4 <HAL_RCC_OscConfig+0x34c>)
 8001178:	4013      	ands	r3, r2
 800117a:	0019      	movs	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	021a      	lsls	r2, r3, #8
 8001182:	4b85      	ldr	r3, [pc, #532]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d112      	bne.n	80011b4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800118e:	4b82      	ldr	r3, [pc, #520]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a85      	ldr	r2, [pc, #532]	@ (80013a8 <HAL_RCC_OscConfig+0x350>)
 8001194:	4013      	ands	r3, r2
 8001196:	0019      	movs	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	4b7e      	ldr	r3, [pc, #504]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	0adb      	lsrs	r3, r3, #11
 80011a8:	2207      	movs	r2, #7
 80011aa:	4013      	ands	r3, r2
 80011ac:	4a7f      	ldr	r2, [pc, #508]	@ (80013ac <HAL_RCC_OscConfig+0x354>)
 80011ae:	40da      	lsrs	r2, r3
 80011b0:	4b7f      	ldr	r3, [pc, #508]	@ (80013b0 <HAL_RCC_OscConfig+0x358>)
 80011b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011b4:	4b7f      	ldr	r3, [pc, #508]	@ (80013b4 <HAL_RCC_OscConfig+0x35c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff fbbb 	bl	8000934 <HAL_InitTick>
 80011be:	1e03      	subs	r3, r0, #0
 80011c0:	d050      	beq.n	8001264 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e122      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d030      	beq.n	8001230 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011ce:	4b72      	ldr	r3, [pc, #456]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a75      	ldr	r2, [pc, #468]	@ (80013a8 <HAL_RCC_OscConfig+0x350>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	0019      	movs	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80011e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80011e8:	2180      	movs	r1, #128	@ 0x80
 80011ea:	0049      	lsls	r1, r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fbfc 	bl	80009ec <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fbf7 	bl	80009ec <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0ff      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800120c:	4b62      	ldr	r3, [pc, #392]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4013      	ands	r3, r2
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b5f      	ldr	r3, [pc, #380]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a61      	ldr	r2, [pc, #388]	@ (80013a4 <HAL_RCC_OscConfig+0x34c>)
 800121e:	4013      	ands	r3, r2
 8001220:	0019      	movs	r1, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	021a      	lsls	r2, r3, #8
 8001228:	4b5b      	ldr	r3, [pc, #364]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800122a:	430a      	orrs	r2, r1
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	e019      	b.n	8001264 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001230:	4b59      	ldr	r3, [pc, #356]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b58      	ldr	r3, [pc, #352]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001236:	4960      	ldr	r1, [pc, #384]	@ (80013b8 <HAL_RCC_OscConfig+0x360>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fbd6 	bl	80009ec <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001246:	f7ff fbd1 	bl	80009ec <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0d9      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001258:	4b4f      	ldr	r3, [pc, #316]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4013      	ands	r3, r2
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	4013      	ands	r3, r2
 800126c:	d042      	beq.n	80012f4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800126e:	4b4a      	ldr	r3, [pc, #296]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2238      	movs	r2, #56	@ 0x38
 8001274:	4013      	ands	r3, r2
 8001276:	2b18      	cmp	r3, #24
 8001278:	d105      	bne.n	8001286 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d138      	bne.n	80012f4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e0c2      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d019      	beq.n	80012c2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800128e:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001290:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001292:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001294:	2101      	movs	r1, #1
 8001296:	430a      	orrs	r2, r1
 8001298:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fba7 	bl	80009ec <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fba2 	bl	80009ec <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e0aa      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d0f1      	beq.n	80012a4 <HAL_RCC_OscConfig+0x24c>
 80012c0:	e018      	b.n	80012f4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012c2:	4b35      	ldr	r3, [pc, #212]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80012c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012c6:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fb8d 	bl	80009ec <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fb88 	bl	80009ec <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e090      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ee:	2202      	movs	r2, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	d1f1      	bne.n	80012d8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2204      	movs	r2, #4
 80012fa:	4013      	ands	r3, r2
 80012fc:	d100      	bne.n	8001300 <HAL_RCC_OscConfig+0x2a8>
 80012fe:	e084      	b.n	800140a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001308:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2238      	movs	r2, #56	@ 0x38
 800130e:	4013      	ands	r3, r2
 8001310:	2b20      	cmp	r3, #32
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <HAL_RCC_OscConfig+0x2c6>
 800131c:	e075      	b.n	800140a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e074      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x2e0>
 800132a:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800132c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001330:	2101      	movs	r1, #1
 8001332:	430a      	orrs	r2, r1
 8001334:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001336:	e01c      	b.n	8001372 <HAL_RCC_OscConfig+0x31a>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d10c      	bne.n	800135a <HAL_RCC_OscConfig+0x302>
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001342:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001346:	2104      	movs	r1, #4
 8001348:	430a      	orrs	r2, r1
 800134a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800134e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001352:	2101      	movs	r1, #1
 8001354:	430a      	orrs	r2, r1
 8001356:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001358:	e00b      	b.n	8001372 <HAL_RCC_OscConfig+0x31a>
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800135c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001360:	2101      	movs	r1, #1
 8001362:	438a      	bics	r2, r1
 8001364:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 8001368:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_RCC_OscConfig+0x340>)
 800136c:	2104      	movs	r1, #4
 800136e:	438a      	bics	r2, r1
 8001370:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d028      	beq.n	80013cc <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fb37 	bl	80009ec <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001382:	e01d      	b.n	80013c0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f7ff fb32 	bl	80009ec <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	4a0b      	ldr	r2, [pc, #44]	@ (80013bc <HAL_RCC_OscConfig+0x364>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d915      	bls.n	80013c0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e039      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
 8001398:	40021000 	.word	0x40021000
 800139c:	fffeffff 	.word	0xfffeffff
 80013a0:	fffbffff 	.word	0xfffbffff
 80013a4:	ffff80ff 	.word	0xffff80ff
 80013a8:	ffffc7ff 	.word	0xffffc7ff
 80013ac:	02dc6c00 	.word	0x02dc6c00
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004
 80013b8:	fffffeff 	.word	0xfffffeff
 80013bc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_RCC_OscConfig+0x3bc>)
 80013c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c4:	2202      	movs	r2, #2
 80013c6:	4013      	ands	r3, r2
 80013c8:	d0dc      	beq.n	8001384 <HAL_RCC_OscConfig+0x32c>
 80013ca:	e013      	b.n	80013f4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb0e 	bl	80009ec <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80013d4:	e009      	b.n	80013ea <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff fb09 	bl	80009ec <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <HAL_RCC_OscConfig+0x3c0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e010      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_RCC_OscConfig+0x3bc>)
 80013ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013f4:	230f      	movs	r3, #15
 80013f6:	18fb      	adds	r3, r7, r3
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_RCC_OscConfig+0x3bc>)
 8001400:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <HAL_RCC_OscConfig+0x3bc>)
 8001404:	4905      	ldr	r1, [pc, #20]	@ (800141c <HAL_RCC_OscConfig+0x3c4>)
 8001406:	400a      	ands	r2, r1
 8001408:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b006      	add	sp, #24
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	00001388 	.word	0x00001388
 800141c:	efffffff 	.word	0xefffffff

08001420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0e9      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001434:	4b76      	ldr	r3, [pc, #472]	@ (8001610 <HAL_RCC_ClockConfig+0x1f0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2207      	movs	r2, #7
 800143a:	4013      	ands	r3, r2
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d91e      	bls.n	8001480 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b73      	ldr	r3, [pc, #460]	@ (8001610 <HAL_RCC_ClockConfig+0x1f0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2207      	movs	r2, #7
 8001448:	4393      	bics	r3, r2
 800144a:	0019      	movs	r1, r3
 800144c:	4b70      	ldr	r3, [pc, #448]	@ (8001610 <HAL_RCC_ClockConfig+0x1f0>)
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001454:	f7ff faca 	bl	80009ec <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800145c:	e009      	b.n	8001472 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800145e:	f7ff fac5 	bl	80009ec <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	4a6a      	ldr	r2, [pc, #424]	@ (8001614 <HAL_RCC_ClockConfig+0x1f4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0ca      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001472:	4b67      	ldr	r3, [pc, #412]	@ (8001610 <HAL_RCC_ClockConfig+0x1f0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2207      	movs	r2, #7
 8001478:	4013      	ands	r3, r2
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d1ee      	bne.n	800145e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d017      	beq.n	80014ba <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2204      	movs	r2, #4
 8001490:	4013      	ands	r3, r2
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001494:	4b60      	ldr	r3, [pc, #384]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a60      	ldr	r2, [pc, #384]	@ (800161c <HAL_RCC_ClockConfig+0x1fc>)
 800149a:	401a      	ands	r2, r3
 800149c:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 800149e:	21b0      	movs	r1, #176	@ 0xb0
 80014a0:	0109      	lsls	r1, r1, #4
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4a5d      	ldr	r2, [pc, #372]	@ (8001620 <HAL_RCC_ClockConfig+0x200>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	0019      	movs	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	4b58      	ldr	r3, [pc, #352]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2201      	movs	r2, #1
 80014c0:	4013      	ands	r3, r2
 80014c2:	d055      	beq.n	8001570 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80014c4:	4b54      	ldr	r3, [pc, #336]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	221c      	movs	r2, #28
 80014ca:	4393      	bics	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	4b51      	ldr	r3, [pc, #324]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	029b      	lsls	r3, r3, #10
 80014e8:	4013      	ands	r3, r2
 80014ea:	d11f      	bne.n	800152c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e08b      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	4b47      	ldr	r3, [pc, #284]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4013      	ands	r3, r2
 8001502:	d113      	bne.n	800152c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e07f      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d106      	bne.n	800151e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001510:	4b41      	ldr	r3, [pc, #260]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d108      	bne.n	800152c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e074      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800151e:	4b3e      	ldr	r3, [pc, #248]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 8001520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e06d      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800152c:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2207      	movs	r2, #7
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 800153c:	430a      	orrs	r2, r1
 800153e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001540:	f7ff fa54 	bl	80009ec <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001548:	e009      	b.n	800155e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800154a:	f7ff fa4f 	bl	80009ec <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	4a2f      	ldr	r2, [pc, #188]	@ (8001614 <HAL_RCC_ClockConfig+0x1f4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e054      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b2e      	ldr	r3, [pc, #184]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2238      	movs	r2, #56	@ 0x38
 8001564:	401a      	ands	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	429a      	cmp	r2, r3
 800156e:	d1ec      	bne.n	800154a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b27      	ldr	r3, [pc, #156]	@ (8001610 <HAL_RCC_ClockConfig+0x1f0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2207      	movs	r2, #7
 8001576:	4013      	ands	r3, r2
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d21e      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <HAL_RCC_ClockConfig+0x1f0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2207      	movs	r2, #7
 8001584:	4393      	bics	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <HAL_RCC_ClockConfig+0x1f0>)
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001590:	f7ff fa2c 	bl	80009ec <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001598:	e009      	b.n	80015ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800159a:	f7ff fa27 	bl	80009ec <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001614 <HAL_RCC_ClockConfig+0x1f4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e02c      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_RCC_ClockConfig+0x1f0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2207      	movs	r2, #7
 80015b4:	4013      	ands	r3, r2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2204      	movs	r2, #4
 80015c2:	4013      	ands	r3, r2
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	4a16      	ldr	r2, [pc, #88]	@ (8001624 <HAL_RCC_ClockConfig+0x204>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80015d6:	430a      	orrs	r2, r1
 80015d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80015da:	f000 f82b 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80015de:	0001      	movs	r1, r0
 80015e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <HAL_RCC_ClockConfig+0x1f8>)
 80015e2:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	220f      	movs	r2, #15
 80015e8:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_RCC_ClockConfig+0x208>)
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015f0:	221f      	movs	r2, #31
 80015f2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80015f4:	000a      	movs	r2, r1
 80015f6:	40da      	lsrs	r2, r3
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <HAL_RCC_ClockConfig+0x20c>)
 80015fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <HAL_RCC_ClockConfig+0x210>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff f997 	bl	8000934 <HAL_InitTick>
 8001606:	0003      	movs	r3, r0
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40022000 	.word	0x40022000
 8001614:	00001388 	.word	0x00001388
 8001618:	40021000 	.word	0x40021000
 800161c:	ffff84ff 	.word	0xffff84ff
 8001620:	fffff0ff 	.word	0xfffff0ff
 8001624:	ffff8fff 	.word	0xffff8fff
 8001628:	08004ac8 	.word	0x08004ac8
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800163a:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	2207      	movs	r2, #7
 8001642:	4013      	ands	r3, r2
 8001644:	3301      	adds	r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2238      	movs	r2, #56	@ 0x38
 800164e:	4013      	ands	r3, r2
 8001650:	d10f      	bne.n	8001672 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	0adb      	lsrs	r3, r3, #11
 8001658:	2207      	movs	r2, #7
 800165a:	4013      	ands	r3, r2
 800165c:	2201      	movs	r2, #1
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4819      	ldr	r0, [pc, #100]	@ (80016cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001668:	f7fe fd60 	bl	800012c <__udivsi3>
 800166c:	0003      	movs	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e01e      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2238      	movs	r2, #56	@ 0x38
 8001678:	4013      	ands	r3, r2
 800167a:	2b08      	cmp	r3, #8
 800167c:	d102      	bne.n	8001684 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e015      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2238      	movs	r2, #56	@ 0x38
 800168a:	4013      	ands	r3, r2
 800168c:	2b20      	cmp	r3, #32
 800168e:	d103      	bne.n	8001698 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2238      	movs	r2, #56	@ 0x38
 800169e:	4013      	ands	r3, r2
 80016a0:	2b18      	cmp	r3, #24
 80016a2:	d103      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80016a4:	23fa      	movs	r3, #250	@ 0xfa
 80016a6:	01db      	lsls	r3, r3, #7
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e001      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7fe fd3a 	bl	800012c <__udivsi3>
 80016b8:	0003      	movs	r3, r0
 80016ba:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80016bc:	68fb      	ldr	r3, [r7, #12]
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	02dc6c00 	.word	0x02dc6c00
 80016d0:	007a1200 	.word	0x007a1200

080016d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016d8:	f7ff ffac 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80016dc:	0001      	movs	r1, r0
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_RCC_GetHCLKFreq+0x30>)
 80016e0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	220f      	movs	r2, #15
 80016e6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <HAL_RCC_GetHCLKFreq+0x34>)
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016ee:	221f      	movs	r2, #31
 80016f0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016f2:	000a      	movs	r2, r1
 80016f4:	40da      	lsrs	r2, r3
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_RCC_GetHCLKFreq+0x38>)
 80016f8:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80016fa:	4b04      	ldr	r3, [pc, #16]	@ (800170c <HAL_RCC_GetHCLKFreq+0x38>)
 80016fc:	681b      	ldr	r3, [r3, #0]
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	08004ac8 	.word	0x08004ac8
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001714:	f7ff ffde 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 8001718:	0001      	movs	r1, r0
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <HAL_RCC_GetPCLK1Freq+0x28>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	0b1b      	lsrs	r3, r3, #12
 8001720:	2207      	movs	r2, #7
 8001722:	401a      	ands	r2, r3
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	58d3      	ldr	r3, [r2, r3]
 800172a:	221f      	movs	r2, #31
 800172c:	4013      	ands	r3, r2
 800172e:	40d9      	lsrs	r1, r3
 8001730:	000b      	movs	r3, r1
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	08004b08 	.word	0x08004b08

08001740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e046      	b.n	80017e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2288      	movs	r2, #136	@ 0x88
 8001756:	589b      	ldr	r3, [r3, r2]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2284      	movs	r2, #132	@ 0x84
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	0018      	movs	r0, r3
 8001768:	f7fe ffea 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2288      	movs	r2, #136	@ 0x88
 8001770:	2124      	movs	r1, #36	@ 0x24
 8001772:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	438a      	bics	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	0018      	movs	r0, r3
 8001790:	f000 fe08 	bl	80023a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	0018      	movs	r0, r3
 8001798:	f000 fc86 	bl	80020a8 <UART_SetConfig>
 800179c:	0003      	movs	r3, r0
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e01c      	b.n	80017e0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	490d      	ldr	r1, [pc, #52]	@ (80017e8 <HAL_UART_Init+0xa8>)
 80017b2:	400a      	ands	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	212a      	movs	r1, #42	@ 0x2a
 80017c2:	438a      	bics	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fe97 	bl	800250c <UART_CheckIdleState>
 80017de:	0003      	movs	r3, r0
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	ffffb7ff 	.word	0xffffb7ff

080017ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	1dbb      	adds	r3, r7, #6
 80017fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2288      	movs	r2, #136	@ 0x88
 8001800:	589b      	ldr	r3, [r3, r2]
 8001802:	2b20      	cmp	r3, #32
 8001804:	d000      	beq.n	8001808 <HAL_UART_Transmit+0x1c>
 8001806:	e090      	b.n	800192a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_UART_Transmit+0x2a>
 800180e:	1dbb      	adds	r3, r7, #6
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e088      	b.n	800192c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	015b      	lsls	r3, r3, #5
 8001822:	429a      	cmp	r2, r3
 8001824:	d109      	bne.n	800183a <HAL_UART_Transmit+0x4e>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	d001      	beq.n	800183a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e078      	b.n	800192c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2290      	movs	r2, #144	@ 0x90
 800183e:	2100      	movs	r1, #0
 8001840:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2288      	movs	r2, #136	@ 0x88
 8001846:	2121      	movs	r1, #33	@ 0x21
 8001848:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800184a:	f7ff f8cf 	bl	80009ec <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1dba      	adds	r2, r7, #6
 8001856:	2154      	movs	r1, #84	@ 0x54
 8001858:	8812      	ldrh	r2, [r2, #0]
 800185a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1dba      	adds	r2, r7, #6
 8001860:	2156      	movs	r1, #86	@ 0x56
 8001862:	8812      	ldrh	r2, [r2, #0]
 8001864:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	429a      	cmp	r2, r3
 8001870:	d108      	bne.n	8001884 <HAL_UART_Transmit+0x98>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d104      	bne.n	8001884 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	e003      	b.n	800188c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800188c:	e030      	b.n	80018f0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	0013      	movs	r3, r2
 8001898:	2200      	movs	r2, #0
 800189a:	2180      	movs	r1, #128	@ 0x80
 800189c:	f000 fee0 	bl	8002660 <UART_WaitOnFlagUntilTimeout>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2288      	movs	r2, #136	@ 0x88
 80018a8:	2120      	movs	r1, #32
 80018aa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e03d      	b.n	800192c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10b      	bne.n	80018ce <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	001a      	movs	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	05d2      	lsls	r2, r2, #23
 80018c2:	0dd2      	lsrs	r2, r2, #23
 80018c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	3302      	adds	r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	e007      	b.n	80018de <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3301      	adds	r3, #1
 80018dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2256      	movs	r2, #86	@ 0x56
 80018e2:	5a9b      	ldrh	r3, [r3, r2]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b299      	uxth	r1, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2256      	movs	r2, #86	@ 0x56
 80018ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2256      	movs	r2, #86	@ 0x56
 80018f4:	5a9b      	ldrh	r3, [r3, r2]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1c8      	bne.n	800188e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	0013      	movs	r3, r2
 8001906:	2200      	movs	r2, #0
 8001908:	2140      	movs	r1, #64	@ 0x40
 800190a:	f000 fea9 	bl	8002660 <UART_WaitOnFlagUntilTimeout>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d005      	beq.n	800191e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2288      	movs	r2, #136	@ 0x88
 8001916:	2120      	movs	r1, #32
 8001918:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e006      	b.n	800192c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2288      	movs	r2, #136	@ 0x88
 8001922:	2120      	movs	r1, #32
 8001924:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800192a:	2302      	movs	r3, #2
  }
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b008      	add	sp, #32
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	1dbb      	adds	r3, r7, #6
 8001940:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	228c      	movs	r2, #140	@ 0x8c
 8001946:	589b      	ldr	r3, [r3, r2]
 8001948:	2b20      	cmp	r3, #32
 800194a:	d145      	bne.n	80019d8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_UART_Receive_IT+0x26>
 8001952:	1dbb      	adds	r3, r7, #6
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e03d      	b.n	80019da <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	015b      	lsls	r3, r3, #5
 8001966:	429a      	cmp	r2, r3
 8001968:	d109      	bne.n	800197e <HAL_UART_Receive_IT+0x4a>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	d001      	beq.n	800197e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e02d      	b.n	80019da <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	4013      	ands	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001992:	f3ef 8310 	mrs	r3, PRIMASK
 8001996:	613b      	str	r3, [r7, #16]
  return(result);
 8001998:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f383 8810 	msr	PRIMASK, r3
}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2180      	movs	r1, #128	@ 0x80
 80019b4:	04c9      	lsls	r1, r1, #19
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f383 8810 	msr	PRIMASK, r3
}
 80019c4:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80019c6:	1dbb      	adds	r3, r7, #6
 80019c8:	881a      	ldrh	r2, [r3, #0]
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 feb6 	bl	8002740 <UART_Start_Receive_IT>
 80019d4:	0003      	movs	r3, r0
 80019d6:	e000      	b.n	80019da <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b008      	add	sp, #32
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b0aa      	sub	sp, #168	@ 0xa8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	22a4      	movs	r2, #164	@ 0xa4
 80019f4:	18b9      	adds	r1, r7, r2
 80019f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	20a0      	movs	r0, #160	@ 0xa0
 8001a00:	1839      	adds	r1, r7, r0
 8001a02:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	249c      	movs	r4, #156	@ 0x9c
 8001a0c:	1939      	adds	r1, r7, r4
 8001a0e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001a10:	0011      	movs	r1, r2
 8001a12:	18bb      	adds	r3, r7, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4aa2      	ldr	r2, [pc, #648]	@ (8001ca0 <HAL_UART_IRQHandler+0x2bc>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2298      	movs	r2, #152	@ 0x98
 8001a1c:	18bd      	adds	r5, r7, r2
 8001a1e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001a20:	18bb      	adds	r3, r7, r2
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11a      	bne.n	8001a5e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d015      	beq.n	8001a5e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001a32:	183b      	adds	r3, r7, r0
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2220      	movs	r2, #32
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d105      	bne.n	8001a48 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	055b      	lsls	r3, r3, #21
 8001a44:	4013      	ands	r3, r2
 8001a46:	d00a      	beq.n	8001a5e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <HAL_UART_IRQHandler+0x6e>
 8001a50:	e2fb      	b.n	800204a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	0010      	movs	r0, r2
 8001a5a:	4798      	blx	r3
      }
      return;
 8001a5c:	e2f5      	b.n	800204a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001a5e:	2398      	movs	r3, #152	@ 0x98
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d100      	bne.n	8001a6a <HAL_UART_IRQHandler+0x86>
 8001a68:	e122      	b.n	8001cb0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001a6a:	239c      	movs	r3, #156	@ 0x9c
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a8c      	ldr	r2, [pc, #560]	@ (8001ca4 <HAL_UART_IRQHandler+0x2c0>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	d106      	bne.n	8001a84 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001a76:	23a0      	movs	r3, #160	@ 0xa0
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a8a      	ldr	r2, [pc, #552]	@ (8001ca8 <HAL_UART_IRQHandler+0x2c4>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d100      	bne.n	8001a84 <HAL_UART_IRQHandler+0xa0>
 8001a82:	e115      	b.n	8001cb0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001a84:	23a4      	movs	r3, #164	@ 0xa4
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d012      	beq.n	8001ab6 <HAL_UART_IRQHandler+0xd2>
 8001a90:	23a0      	movs	r3, #160	@ 0xa0
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2290      	movs	r2, #144	@ 0x90
 8001aaa:	589b      	ldr	r3, [r3, r2]
 8001aac:	2201      	movs	r2, #1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2190      	movs	r1, #144	@ 0x90
 8001ab4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ab6:	23a4      	movs	r3, #164	@ 0xa4
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2202      	movs	r2, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d011      	beq.n	8001ae6 <HAL_UART_IRQHandler+0x102>
 8001ac2:	239c      	movs	r3, #156	@ 0x9c
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	d00b      	beq.n	8001ae6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2290      	movs	r2, #144	@ 0x90
 8001ada:	589b      	ldr	r3, [r3, r2]
 8001adc:	2204      	movs	r2, #4
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2190      	movs	r1, #144	@ 0x90
 8001ae4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ae6:	23a4      	movs	r3, #164	@ 0xa4
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2204      	movs	r2, #4
 8001aee:	4013      	ands	r3, r2
 8001af0:	d011      	beq.n	8001b16 <HAL_UART_IRQHandler+0x132>
 8001af2:	239c      	movs	r3, #156	@ 0x9c
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d00b      	beq.n	8001b16 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2204      	movs	r2, #4
 8001b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2290      	movs	r2, #144	@ 0x90
 8001b0a:	589b      	ldr	r3, [r3, r2]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2190      	movs	r1, #144	@ 0x90
 8001b14:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001b16:	23a4      	movs	r3, #164	@ 0xa4
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d017      	beq.n	8001b52 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001b22:	23a0      	movs	r3, #160	@ 0xa0
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d105      	bne.n	8001b3a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001b2e:	239c      	movs	r3, #156	@ 0x9c
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5b      	ldr	r2, [pc, #364]	@ (8001ca4 <HAL_UART_IRQHandler+0x2c0>)
 8001b36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001b38:	d00b      	beq.n	8001b52 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2208      	movs	r2, #8
 8001b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2290      	movs	r2, #144	@ 0x90
 8001b46:	589b      	ldr	r3, [r3, r2]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2190      	movs	r1, #144	@ 0x90
 8001b50:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b52:	23a4      	movs	r3, #164	@ 0xa4
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d013      	beq.n	8001b88 <HAL_UART_IRQHandler+0x1a4>
 8001b60:	23a0      	movs	r3, #160	@ 0xa0
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	04db      	lsls	r3, r3, #19
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d00c      	beq.n	8001b88 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2290      	movs	r2, #144	@ 0x90
 8001b7c:	589b      	ldr	r3, [r3, r2]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2190      	movs	r1, #144	@ 0x90
 8001b86:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2290      	movs	r2, #144	@ 0x90
 8001b8c:	589b      	ldr	r3, [r3, r2]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d100      	bne.n	8001b94 <HAL_UART_IRQHandler+0x1b0>
 8001b92:	e25c      	b.n	800204e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001b94:	23a4      	movs	r3, #164	@ 0xa4
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d015      	beq.n	8001bcc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001ba0:	23a0      	movs	r3, #160	@ 0xa0
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d106      	bne.n	8001bba <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001bac:	239c      	movs	r3, #156	@ 0x9c
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	055b      	lsls	r3, r3, #21
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d008      	beq.n	8001bcc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	0010      	movs	r0, r2
 8001bca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2290      	movs	r2, #144	@ 0x90
 8001bd0:	589b      	ldr	r3, [r3, r2]
 8001bd2:	2194      	movs	r1, #148	@ 0x94
 8001bd4:	187a      	adds	r2, r7, r1
 8001bd6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2240      	movs	r2, #64	@ 0x40
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b40      	cmp	r3, #64	@ 0x40
 8001be4:	d004      	beq.n	8001bf0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2228      	movs	r2, #40	@ 0x28
 8001bec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bee:	d04c      	beq.n	8001c8a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 fec8 	bl	8002988 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2240      	movs	r2, #64	@ 0x40
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b40      	cmp	r3, #64	@ 0x40
 8001c04:	d13c      	bne.n	8001c80 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c06:	f3ef 8310 	mrs	r3, PRIMASK
 8001c0a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001c0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c0e:	2090      	movs	r0, #144	@ 0x90
 8001c10:	183a      	adds	r2, r7, r0
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c1a:	f383 8810 	msr	PRIMASK, r3
}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2140      	movs	r1, #64	@ 0x40
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	183b      	adds	r3, r7, r0
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c38:	f383 8810 	msr	PRIMASK, r3
}
 8001c3c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2280      	movs	r2, #128	@ 0x80
 8001c42:	589b      	ldr	r3, [r3, r2]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d016      	beq.n	8001c76 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2280      	movs	r2, #128	@ 0x80
 8001c4c:	589b      	ldr	r3, [r3, r2]
 8001c4e:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <HAL_UART_IRQHandler+0x2c8>)
 8001c50:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	589b      	ldr	r3, [r3, r2]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff f811 	bl	8000c80 <HAL_DMA_Abort_IT>
 8001c5e:	1e03      	subs	r3, r0, #0
 8001c60:	d01c      	beq.n	8001c9c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2280      	movs	r2, #128	@ 0x80
 8001c66:	589b      	ldr	r3, [r3, r2]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	5852      	ldr	r2, [r2, r1]
 8001c70:	0010      	movs	r0, r2
 8001c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c74:	e012      	b.n	8001c9c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 fa01 	bl	8002080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c7e:	e00d      	b.n	8001c9c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f9fc 	bl	8002080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c88:	e008      	b.n	8001c9c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f9f7 	bl	8002080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2290      	movs	r2, #144	@ 0x90
 8001c96:	2100      	movs	r1, #0
 8001c98:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001c9a:	e1d8      	b.n	800204e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c9c:	46c0      	nop			@ (mov r8, r8)
    return;
 8001c9e:	e1d6      	b.n	800204e <HAL_UART_IRQHandler+0x66a>
 8001ca0:	0000080f 	.word	0x0000080f
 8001ca4:	10000001 	.word	0x10000001
 8001ca8:	04000120 	.word	0x04000120
 8001cac:	08002a55 	.word	0x08002a55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d000      	beq.n	8001cba <HAL_UART_IRQHandler+0x2d6>
 8001cb8:	e15d      	b.n	8001f76 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001cba:	23a4      	movs	r3, #164	@ 0xa4
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d100      	bne.n	8001cc8 <HAL_UART_IRQHandler+0x2e4>
 8001cc6:	e156      	b.n	8001f76 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001cc8:	23a0      	movs	r3, #160	@ 0xa0
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2210      	movs	r2, #16
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d100      	bne.n	8001cd6 <HAL_UART_IRQHandler+0x2f2>
 8001cd4:	e14f      	b.n	8001f76 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2210      	movs	r2, #16
 8001cdc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2240      	movs	r2, #64	@ 0x40
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b40      	cmp	r3, #64	@ 0x40
 8001cea:	d000      	beq.n	8001cee <HAL_UART_IRQHandler+0x30a>
 8001cec:	e0c3      	b.n	8001e76 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2280      	movs	r2, #128	@ 0x80
 8001cf2:	589b      	ldr	r3, [r3, r2]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	217e      	movs	r1, #126	@ 0x7e
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d100      	bne.n	8001d08 <HAL_UART_IRQHandler+0x324>
 8001d06:	e097      	b.n	8001e38 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	225c      	movs	r2, #92	@ 0x5c
 8001d0c:	5a9b      	ldrh	r3, [r3, r2]
 8001d0e:	187a      	adds	r2, r7, r1
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d300      	bcc.n	8001d18 <HAL_UART_IRQHandler+0x334>
 8001d16:	e08f      	b.n	8001e38 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	187a      	adds	r2, r7, r1
 8001d1c:	215e      	movs	r1, #94	@ 0x5e
 8001d1e:	8812      	ldrh	r2, [r2, #0]
 8001d20:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2280      	movs	r2, #128	@ 0x80
 8001d26:	589b      	ldr	r3, [r3, r2]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d170      	bne.n	8001e14 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d32:	f3ef 8310 	mrs	r3, PRIMASK
 8001d36:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d42:	f383 8810 	msr	PRIMASK, r3
}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	49c4      	ldr	r1, [pc, #784]	@ (8002064 <HAL_UART_IRQHandler+0x680>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d5e:	f383 8810 	msr	PRIMASK, r3
}
 8001d62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d64:	f3ef 8310 	mrs	r3, PRIMASK
 8001d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8001d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d6e:	2301      	movs	r3, #1
 8001d70:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d74:	f383 8810 	msr	PRIMASK, r3
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	438a      	bics	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d90:	f383 8810 	msr	PRIMASK, r3
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d96:	f3ef 8310 	mrs	r3, PRIMASK
 8001d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8001d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001da0:	2301      	movs	r3, #1
 8001da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001da6:	f383 8810 	msr	PRIMASK, r3
}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2140      	movs	r1, #64	@ 0x40
 8001db8:	438a      	bics	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dbe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dc2:	f383 8810 	msr	PRIMASK, r3
}
 8001dc6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	228c      	movs	r2, #140	@ 0x8c
 8001dcc:	2120      	movs	r1, #32
 8001dce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dda:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001de0:	2301      	movs	r3, #1
 8001de2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001de6:	f383 8810 	msr	PRIMASK, r3
}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2110      	movs	r1, #16
 8001df8:	438a      	bics	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e02:	f383 8810 	msr	PRIMASK, r3
}
 8001e06:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2280      	movs	r2, #128	@ 0x80
 8001e0c:	589b      	ldr	r3, [r3, r2]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7fe fed4 	bl	8000bbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	225c      	movs	r2, #92	@ 0x5c
 8001e1e:	5a9a      	ldrh	r2, [r3, r2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	215e      	movs	r1, #94	@ 0x5e
 8001e24:	5a5b      	ldrh	r3, [r3, r1]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0011      	movs	r1, r2
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 f92d 	bl	8002090 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8001e36:	e10c      	b.n	8002052 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	225c      	movs	r2, #92	@ 0x5c
 8001e3c:	5a9b      	ldrh	r3, [r3, r2]
 8001e3e:	227e      	movs	r2, #126	@ 0x7e
 8001e40:	18ba      	adds	r2, r7, r2
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d000      	beq.n	8001e4a <HAL_UART_IRQHandler+0x466>
 8001e48:	e103      	b.n	8002052 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2280      	movs	r2, #128	@ 0x80
 8001e4e:	589b      	ldr	r3, [r3, r2]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2220      	movs	r2, #32
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d000      	beq.n	8001e5e <HAL_UART_IRQHandler+0x47a>
 8001e5c:	e0f9      	b.n	8002052 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	225c      	movs	r2, #92	@ 0x5c
 8001e68:	5a9a      	ldrh	r2, [r3, r2]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 f90e 	bl	8002090 <HAL_UARTEx_RxEventCallback>
      return;
 8001e74:	e0ed      	b.n	8002052 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	225c      	movs	r2, #92	@ 0x5c
 8001e7a:	5a99      	ldrh	r1, [r3, r2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	225e      	movs	r2, #94	@ 0x5e
 8001e80:	5a9b      	ldrh	r3, [r3, r2]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	208e      	movs	r0, #142	@ 0x8e
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	1a8a      	subs	r2, r1, r2
 8001e8a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	225e      	movs	r2, #94	@ 0x5e
 8001e90:	5a9b      	ldrh	r3, [r3, r2]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d100      	bne.n	8001e9a <HAL_UART_IRQHandler+0x4b6>
 8001e98:	e0dd      	b.n	8002056 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8001e9a:	183b      	adds	r3, r7, r0
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d100      	bne.n	8001ea4 <HAL_UART_IRQHandler+0x4c0>
 8001ea2:	e0d8      	b.n	8002056 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001eac:	2488      	movs	r4, #136	@ 0x88
 8001eae:	193a      	adds	r2, r7, r4
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f383 8810 	msr	PRIMASK, r3
}
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4967      	ldr	r1, [pc, #412]	@ (8002068 <HAL_UART_IRQHandler+0x684>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	193b      	adds	r3, r7, r4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f383 8810 	msr	PRIMASK, r3
}
 8001eda:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001edc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ee0:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ee2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001ee4:	2484      	movs	r4, #132	@ 0x84
 8001ee6:	193a      	adds	r2, r7, r4
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f383 8810 	msr	PRIMASK, r3
}
 8001ef4:	46c0      	nop			@ (mov r8, r8)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	495a      	ldr	r1, [pc, #360]	@ (800206c <HAL_UART_IRQHandler+0x688>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	f383 8810 	msr	PRIMASK, r3
}
 8001f12:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	228c      	movs	r2, #140	@ 0x8c
 8001f18:	2120      	movs	r1, #32
 8001f1a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f28:	f3ef 8310 	mrs	r3, PRIMASK
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f30:	2480      	movs	r4, #128	@ 0x80
 8001f32:	193a      	adds	r2, r7, r4
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	2301      	movs	r3, #1
 8001f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3c:	f383 8810 	msr	PRIMASK, r3
}
 8001f40:	46c0      	nop			@ (mov r8, r8)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	438a      	bics	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5a:	f383 8810 	msr	PRIMASK, r3
}
 8001f5e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f66:	183b      	adds	r3, r7, r0
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0011      	movs	r1, r2
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f88e 	bl	8002090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f74:	e06f      	b.n	8002056 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001f76:	23a4      	movs	r3, #164	@ 0xa4
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	035b      	lsls	r3, r3, #13
 8001f80:	4013      	ands	r3, r2
 8001f82:	d010      	beq.n	8001fa6 <HAL_UART_IRQHandler+0x5c2>
 8001f84:	239c      	movs	r3, #156	@ 0x9c
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	03db      	lsls	r3, r3, #15
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d009      	beq.n	8001fa6 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2280      	movs	r2, #128	@ 0x80
 8001f98:	0352      	lsls	r2, r2, #13
 8001f9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f001 fa90 	bl	80034c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001fa4:	e05a      	b.n	800205c <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8001fa6:	23a4      	movs	r3, #164	@ 0xa4
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2280      	movs	r2, #128	@ 0x80
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d016      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8001fb2:	23a0      	movs	r3, #160	@ 0xa0
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2280      	movs	r2, #128	@ 0x80
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d106      	bne.n	8001fcc <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8001fbe:	239c      	movs	r3, #156	@ 0x9c
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d042      	beq.n	800205a <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	0010      	movs	r0, r2
 8001fdc:	4798      	blx	r3
    }
    return;
 8001fde:	e03c      	b.n	800205a <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001fe0:	23a4      	movs	r3, #164	@ 0xa4
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2240      	movs	r2, #64	@ 0x40
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d00a      	beq.n	8002002 <HAL_UART_IRQHandler+0x61e>
 8001fec:	23a0      	movs	r3, #160	@ 0xa0
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2240      	movs	r2, #64	@ 0x40
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d004      	beq.n	8002002 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fd3d 	bl	8002a7a <UART_EndTransmit_IT>
    return;
 8002000:	e02c      	b.n	800205c <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002002:	23a4      	movs	r3, #164	@ 0xa4
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	041b      	lsls	r3, r3, #16
 800200c:	4013      	ands	r3, r2
 800200e:	d00b      	beq.n	8002028 <HAL_UART_IRQHandler+0x644>
 8002010:	23a0      	movs	r3, #160	@ 0xa0
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	2380      	movs	r3, #128	@ 0x80
 8002018:	05db      	lsls	r3, r3, #23
 800201a:	4013      	ands	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f001 fa5f 	bl	80034e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002026:	e019      	b.n	800205c <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002028:	23a4      	movs	r3, #164	@ 0xa4
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	045b      	lsls	r3, r3, #17
 8002032:	4013      	ands	r3, r2
 8002034:	d012      	beq.n	800205c <HAL_UART_IRQHandler+0x678>
 8002036:	23a0      	movs	r3, #160	@ 0xa0
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da0d      	bge.n	800205c <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	0018      	movs	r0, r3
 8002044:	f001 fa46 	bl	80034d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002048:	e008      	b.n	800205c <HAL_UART_IRQHandler+0x678>
      return;
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	e006      	b.n	800205c <HAL_UART_IRQHandler+0x678>
    return;
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	e004      	b.n	800205c <HAL_UART_IRQHandler+0x678>
      return;
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	e002      	b.n	800205c <HAL_UART_IRQHandler+0x678>
      return;
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	e000      	b.n	800205c <HAL_UART_IRQHandler+0x678>
    return;
 800205a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800205c:	46bd      	mov	sp, r7
 800205e:	b02a      	add	sp, #168	@ 0xa8
 8002060:	bdb0      	pop	{r4, r5, r7, pc}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	fffffeff 	.word	0xfffffeff
 8002068:	fffffedf 	.word	0xfffffedf
 800206c:	effffffe 	.word	0xeffffffe

08002070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002088:	46c0      	nop			@ (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	000a      	movs	r2, r1
 800209a:	1cbb      	adds	r3, r7, #2
 800209c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020b0:	231e      	movs	r3, #30
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4aab      	ldr	r2, [pc, #684]	@ (8002384 <UART_SetConfig+0x2dc>)
 80020d8:	4013      	ands	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4aa6      	ldr	r2, [pc, #664]	@ (8002388 <UART_SetConfig+0x2e0>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a9d      	ldr	r2, [pc, #628]	@ (800238c <UART_SetConfig+0x2e4>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	220f      	movs	r2, #15
 800212c:	4393      	bics	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a93      	ldr	r2, [pc, #588]	@ (8002390 <UART_SetConfig+0x2e8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d127      	bne.n	8002196 <UART_SetConfig+0xee>
 8002146:	4b93      	ldr	r3, [pc, #588]	@ (8002394 <UART_SetConfig+0x2ec>)
 8002148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214a:	2203      	movs	r2, #3
 800214c:	4013      	ands	r3, r2
 800214e:	2b03      	cmp	r3, #3
 8002150:	d017      	beq.n	8002182 <UART_SetConfig+0xda>
 8002152:	d81b      	bhi.n	800218c <UART_SetConfig+0xe4>
 8002154:	2b02      	cmp	r3, #2
 8002156:	d00a      	beq.n	800216e <UART_SetConfig+0xc6>
 8002158:	d818      	bhi.n	800218c <UART_SetConfig+0xe4>
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <UART_SetConfig+0xbc>
 800215e:	2b01      	cmp	r3, #1
 8002160:	d00a      	beq.n	8002178 <UART_SetConfig+0xd0>
 8002162:	e013      	b.n	800218c <UART_SetConfig+0xe4>
 8002164:	231f      	movs	r3, #31
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e021      	b.n	80021b2 <UART_SetConfig+0x10a>
 800216e:	231f      	movs	r3, #31
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e01c      	b.n	80021b2 <UART_SetConfig+0x10a>
 8002178:	231f      	movs	r3, #31
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2204      	movs	r2, #4
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e017      	b.n	80021b2 <UART_SetConfig+0x10a>
 8002182:	231f      	movs	r3, #31
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2208      	movs	r2, #8
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e012      	b.n	80021b2 <UART_SetConfig+0x10a>
 800218c:	231f      	movs	r3, #31
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2210      	movs	r2, #16
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e00d      	b.n	80021b2 <UART_SetConfig+0x10a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7f      	ldr	r2, [pc, #508]	@ (8002398 <UART_SetConfig+0x2f0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d104      	bne.n	80021aa <UART_SetConfig+0x102>
 80021a0:	231f      	movs	r3, #31
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e003      	b.n	80021b2 <UART_SetConfig+0x10a>
 80021aa:	231f      	movs	r3, #31
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2210      	movs	r2, #16
 80021b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	2380      	movs	r3, #128	@ 0x80
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d000      	beq.n	80021c0 <UART_SetConfig+0x118>
 80021be:	e06f      	b.n	80022a0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80021c0:	231f      	movs	r3, #31
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d01f      	beq.n	800220a <UART_SetConfig+0x162>
 80021ca:	dc22      	bgt.n	8002212 <UART_SetConfig+0x16a>
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d017      	beq.n	8002200 <UART_SetConfig+0x158>
 80021d0:	dc1f      	bgt.n	8002212 <UART_SetConfig+0x16a>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <UART_SetConfig+0x134>
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d005      	beq.n	80021e6 <UART_SetConfig+0x13e>
 80021da:	e01a      	b.n	8002212 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021dc:	f7ff fa98 	bl	8001710 <HAL_RCC_GetPCLK1Freq>
 80021e0:	0003      	movs	r3, r0
 80021e2:	61bb      	str	r3, [r7, #24]
        break;
 80021e4:	e01c      	b.n	8002220 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80021e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002394 <UART_SetConfig+0x2ec>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2207      	movs	r2, #7
 80021ee:	4013      	ands	r3, r2
 80021f0:	3301      	adds	r3, #1
 80021f2:	0019      	movs	r1, r3
 80021f4:	4869      	ldr	r0, [pc, #420]	@ (800239c <UART_SetConfig+0x2f4>)
 80021f6:	f7fd ff99 	bl	800012c <__udivsi3>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61bb      	str	r3, [r7, #24]
        break;
 80021fe:	e00f      	b.n	8002220 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002200:	f7ff fa18 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 8002204:	0003      	movs	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]
        break;
 8002208:	e00a      	b.n	8002220 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	61bb      	str	r3, [r7, #24]
        break;
 8002210:	e006      	b.n	8002220 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002216:	231e      	movs	r3, #30
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
        break;
 800221e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d100      	bne.n	8002228 <UART_SetConfig+0x180>
 8002226:	e097      	b.n	8002358 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800222c:	4b5c      	ldr	r3, [pc, #368]	@ (80023a0 <UART_SetConfig+0x2f8>)
 800222e:	0052      	lsls	r2, r2, #1
 8002230:	5ad3      	ldrh	r3, [r2, r3]
 8002232:	0019      	movs	r1, r3
 8002234:	69b8      	ldr	r0, [r7, #24]
 8002236:	f7fd ff79 	bl	800012c <__udivsi3>
 800223a:	0003      	movs	r3, r0
 800223c:	005a      	lsls	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	18d2      	adds	r2, r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	0019      	movs	r1, r3
 800224c:	0010      	movs	r0, r2
 800224e:	f7fd ff6d 	bl	800012c <__udivsi3>
 8002252:	0003      	movs	r3, r0
 8002254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d91c      	bls.n	8002296 <UART_SetConfig+0x1ee>
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	025b      	lsls	r3, r3, #9
 8002262:	429a      	cmp	r2, r3
 8002264:	d217      	bcs.n	8002296 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	b29a      	uxth	r2, r3
 800226a:	200e      	movs	r0, #14
 800226c:	183b      	adds	r3, r7, r0
 800226e:	210f      	movs	r1, #15
 8002270:	438a      	bics	r2, r1
 8002272:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	b29b      	uxth	r3, r3
 800227a:	2207      	movs	r2, #7
 800227c:	4013      	ands	r3, r2
 800227e:	b299      	uxth	r1, r3
 8002280:	183b      	adds	r3, r7, r0
 8002282:	183a      	adds	r2, r7, r0
 8002284:	8812      	ldrh	r2, [r2, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	183a      	adds	r2, r7, r0
 8002290:	8812      	ldrh	r2, [r2, #0]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	e060      	b.n	8002358 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002296:	231e      	movs	r3, #30
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	e05b      	b.n	8002358 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022a0:	231f      	movs	r3, #31
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d01f      	beq.n	80022ea <UART_SetConfig+0x242>
 80022aa:	dc22      	bgt.n	80022f2 <UART_SetConfig+0x24a>
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d017      	beq.n	80022e0 <UART_SetConfig+0x238>
 80022b0:	dc1f      	bgt.n	80022f2 <UART_SetConfig+0x24a>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <UART_SetConfig+0x214>
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d005      	beq.n	80022c6 <UART_SetConfig+0x21e>
 80022ba:	e01a      	b.n	80022f2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022bc:	f7ff fa28 	bl	8001710 <HAL_RCC_GetPCLK1Freq>
 80022c0:	0003      	movs	r3, r0
 80022c2:	61bb      	str	r3, [r7, #24]
        break;
 80022c4:	e01c      	b.n	8002300 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80022c6:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <UART_SetConfig+0x2ec>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2207      	movs	r2, #7
 80022ce:	4013      	ands	r3, r2
 80022d0:	3301      	adds	r3, #1
 80022d2:	0019      	movs	r1, r3
 80022d4:	4831      	ldr	r0, [pc, #196]	@ (800239c <UART_SetConfig+0x2f4>)
 80022d6:	f7fd ff29 	bl	800012c <__udivsi3>
 80022da:	0003      	movs	r3, r0
 80022dc:	61bb      	str	r3, [r7, #24]
        break;
 80022de:	e00f      	b.n	8002300 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022e0:	f7ff f9a8 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80022e4:	0003      	movs	r3, r0
 80022e6:	61bb      	str	r3, [r7, #24]
        break;
 80022e8:	e00a      	b.n	8002300 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ea:	2380      	movs	r3, #128	@ 0x80
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	61bb      	str	r3, [r7, #24]
        break;
 80022f0:	e006      	b.n	8002300 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022f6:	231e      	movs	r3, #30
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
        break;
 80022fe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d028      	beq.n	8002358 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800230a:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <UART_SetConfig+0x2f8>)
 800230c:	0052      	lsls	r2, r2, #1
 800230e:	5ad3      	ldrh	r3, [r2, r3]
 8002310:	0019      	movs	r1, r3
 8002312:	69b8      	ldr	r0, [r7, #24]
 8002314:	f7fd ff0a 	bl	800012c <__udivsi3>
 8002318:	0003      	movs	r3, r0
 800231a:	001a      	movs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	18d2      	adds	r2, r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	0019      	movs	r1, r3
 800232a:	0010      	movs	r0, r2
 800232c:	f7fd fefe 	bl	800012c <__udivsi3>
 8002330:	0003      	movs	r3, r0
 8002332:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	d90a      	bls.n	8002350 <UART_SetConfig+0x2a8>
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	025b      	lsls	r3, r3, #9
 8002340:	429a      	cmp	r2, r3
 8002342:	d205      	bcs.n	8002350 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	b29a      	uxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	e003      	b.n	8002358 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002350:	231e      	movs	r3, #30
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	226a      	movs	r2, #106	@ 0x6a
 800235c:	2101      	movs	r1, #1
 800235e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2268      	movs	r2, #104	@ 0x68
 8002364:	2101      	movs	r1, #1
 8002366:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002374:	231e      	movs	r3, #30
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b008      	add	sp, #32
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			@ (mov r8, r8)
 8002384:	cfff69f3 	.word	0xcfff69f3
 8002388:	ffffcfff 	.word	0xffffcfff
 800238c:	11fff4ff 	.word	0x11fff4ff
 8002390:	40013800 	.word	0x40013800
 8002394:	40021000 	.word	0x40021000
 8002398:	40004400 	.word	0x40004400
 800239c:	02dc6c00 	.word	0x02dc6c00
 80023a0:	08004b28 	.word	0x08004b28

080023a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	2208      	movs	r2, #8
 80023b2:	4013      	ands	r3, r2
 80023b4:	d00b      	beq.n	80023ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a4a      	ldr	r2, [pc, #296]	@ (80024e8 <UART_AdvFeatureConfig+0x144>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	2201      	movs	r2, #1
 80023d4:	4013      	ands	r3, r2
 80023d6:	d00b      	beq.n	80023f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a43      	ldr	r2, [pc, #268]	@ (80024ec <UART_AdvFeatureConfig+0x148>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d00b      	beq.n	8002412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a3b      	ldr	r2, [pc, #236]	@ (80024f0 <UART_AdvFeatureConfig+0x14c>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	2204      	movs	r2, #4
 8002418:	4013      	ands	r3, r2
 800241a:	d00b      	beq.n	8002434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4a34      	ldr	r2, [pc, #208]	@ (80024f4 <UART_AdvFeatureConfig+0x150>)
 8002424:	4013      	ands	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	2210      	movs	r2, #16
 800243a:	4013      	ands	r3, r2
 800243c:	d00b      	beq.n	8002456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a2c      	ldr	r2, [pc, #176]	@ (80024f8 <UART_AdvFeatureConfig+0x154>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	2220      	movs	r2, #32
 800245c:	4013      	ands	r3, r2
 800245e:	d00b      	beq.n	8002478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4a25      	ldr	r2, [pc, #148]	@ (80024fc <UART_AdvFeatureConfig+0x158>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	2240      	movs	r2, #64	@ 0x40
 800247e:	4013      	ands	r3, r2
 8002480:	d01d      	beq.n	80024be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a1d      	ldr	r2, [pc, #116]	@ (8002500 <UART_AdvFeatureConfig+0x15c>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800249e:	2380      	movs	r3, #128	@ 0x80
 80024a0:	035b      	lsls	r3, r3, #13
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d10b      	bne.n	80024be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <UART_AdvFeatureConfig+0x160>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	2280      	movs	r2, #128	@ 0x80
 80024c4:	4013      	ands	r3, r2
 80024c6:	d00b      	beq.n	80024e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002508 <UART_AdvFeatureConfig+0x164>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]
  }
}
 80024e0:	46c0      	nop			@ (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	ffff7fff 	.word	0xffff7fff
 80024ec:	fffdffff 	.word	0xfffdffff
 80024f0:	fffeffff 	.word	0xfffeffff
 80024f4:	fffbffff 	.word	0xfffbffff
 80024f8:	ffffefff 	.word	0xffffefff
 80024fc:	ffffdfff 	.word	0xffffdfff
 8002500:	ffefffff 	.word	0xffefffff
 8002504:	ff9fffff 	.word	0xff9fffff
 8002508:	fff7ffff 	.word	0xfff7ffff

0800250c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b092      	sub	sp, #72	@ 0x48
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2290      	movs	r2, #144	@ 0x90
 8002518:	2100      	movs	r1, #0
 800251a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800251c:	f7fe fa66 	bl	80009ec <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2208      	movs	r2, #8
 800252c:	4013      	ands	r3, r2
 800252e:	2b08      	cmp	r3, #8
 8002530:	d12d      	bne.n	800258e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002534:	2280      	movs	r2, #128	@ 0x80
 8002536:	0391      	lsls	r1, r2, #14
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4a47      	ldr	r2, [pc, #284]	@ (8002658 <UART_CheckIdleState+0x14c>)
 800253c:	9200      	str	r2, [sp, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	f000 f88e 	bl	8002660 <UART_WaitOnFlagUntilTimeout>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d022      	beq.n	800258e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002548:	f3ef 8310 	mrs	r3, PRIMASK
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002550:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002552:	2301      	movs	r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002558:	f383 8810 	msr	PRIMASK, r3
}
 800255c:	46c0      	nop			@ (mov r8, r8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2180      	movs	r1, #128	@ 0x80
 800256a:	438a      	bics	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002574:	f383 8810 	msr	PRIMASK, r3
}
 8002578:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2288      	movs	r2, #136	@ 0x88
 800257e:	2120      	movs	r1, #32
 8002580:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2284      	movs	r2, #132	@ 0x84
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e060      	b.n	8002650 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2204      	movs	r2, #4
 8002596:	4013      	ands	r3, r2
 8002598:	2b04      	cmp	r3, #4
 800259a:	d146      	bne.n	800262a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800259c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259e:	2280      	movs	r2, #128	@ 0x80
 80025a0:	03d1      	lsls	r1, r2, #15
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002658 <UART_CheckIdleState+0x14c>)
 80025a6:	9200      	str	r2, [sp, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f000 f859 	bl	8002660 <UART_WaitOnFlagUntilTimeout>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d03b      	beq.n	800262a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025b2:	f3ef 8310 	mrs	r3, PRIMASK
 80025b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80025b8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80025ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80025bc:	2301      	movs	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f383 8810 	msr	PRIMASK, r3
}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4922      	ldr	r1, [pc, #136]	@ (800265c <UART_CheckIdleState+0x150>)
 80025d4:	400a      	ands	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f383 8810 	msr	PRIMASK, r3
}
 80025e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025e4:	f3ef 8310 	mrs	r3, PRIMASK
 80025e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80025ea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ee:	2301      	movs	r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f383 8810 	msr	PRIMASK, r3
}
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	438a      	bics	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f383 8810 	msr	PRIMASK, r3
}
 8002614:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	228c      	movs	r2, #140	@ 0x8c
 800261a:	2120      	movs	r1, #32
 800261c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2284      	movs	r2, #132	@ 0x84
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e012      	b.n	8002650 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2288      	movs	r2, #136	@ 0x88
 800262e:	2120      	movs	r1, #32
 8002630:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	228c      	movs	r2, #140	@ 0x8c
 8002636:	2120      	movs	r1, #32
 8002638:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2284      	movs	r2, #132	@ 0x84
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b010      	add	sp, #64	@ 0x40
 8002656:	bd80      	pop	{r7, pc}
 8002658:	01ffffff 	.word	0x01ffffff
 800265c:	fffffedf 	.word	0xfffffedf

08002660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	1dfb      	adds	r3, r7, #7
 800266e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002670:	e051      	b.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	3301      	adds	r3, #1
 8002676:	d04e      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002678:	f7fe f9b8 	bl	80009ec <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	429a      	cmp	r2, r3
 8002686:	d302      	bcc.n	800268e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e051      	b.n	8002736 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2204      	movs	r2, #4
 800269a:	4013      	ands	r3, r2
 800269c:	d03b      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb6>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b80      	cmp	r3, #128	@ 0x80
 80026a2:	d038      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb6>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b40      	cmp	r3, #64	@ 0x40
 80026a8:	d035      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	2208      	movs	r2, #8
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d111      	bne.n	80026dc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2208      	movs	r2, #8
 80026be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f960 	bl	8002988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2290      	movs	r2, #144	@ 0x90
 80026cc:	2108      	movs	r1, #8
 80026ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2284      	movs	r2, #132	@ 0x84
 80026d4:	2100      	movs	r1, #0
 80026d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e02c      	b.n	8002736 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	401a      	ands	r2, r3
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d112      	bne.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2280      	movs	r2, #128	@ 0x80
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f943 	bl	8002988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2290      	movs	r2, #144	@ 0x90
 8002706:	2120      	movs	r1, #32
 8002708:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2284      	movs	r2, #132	@ 0x84
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e00f      	b.n	8002736 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	4013      	ands	r3, r2
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	425a      	negs	r2, r3
 8002726:	4153      	adcs	r3, r2
 8002728:	b2db      	uxtb	r3, r3
 800272a:	001a      	movs	r2, r3
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d09e      	beq.n	8002672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b098      	sub	sp, #96	@ 0x60
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	1dbb      	adds	r3, r7, #6
 800274c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1dba      	adds	r2, r7, #6
 8002758:	215c      	movs	r1, #92	@ 0x5c
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1dba      	adds	r2, r7, #6
 8002762:	215e      	movs	r1, #94	@ 0x5e
 8002764:	8812      	ldrh	r2, [r2, #0]
 8002766:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	015b      	lsls	r3, r3, #5
 8002776:	429a      	cmp	r2, r3
 8002778:	d10d      	bne.n	8002796 <UART_Start_Receive_IT+0x56>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d104      	bne.n	800278c <UART_Start_Receive_IT+0x4c>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2260      	movs	r2, #96	@ 0x60
 8002786:	497b      	ldr	r1, [pc, #492]	@ (8002974 <UART_Start_Receive_IT+0x234>)
 8002788:	5299      	strh	r1, [r3, r2]
 800278a:	e02e      	b.n	80027ea <UART_Start_Receive_IT+0xaa>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2260      	movs	r2, #96	@ 0x60
 8002790:	21ff      	movs	r1, #255	@ 0xff
 8002792:	5299      	strh	r1, [r3, r2]
 8002794:	e029      	b.n	80027ea <UART_Start_Receive_IT+0xaa>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <UART_Start_Receive_IT+0x7a>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <UART_Start_Receive_IT+0x70>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2260      	movs	r2, #96	@ 0x60
 80027aa:	21ff      	movs	r1, #255	@ 0xff
 80027ac:	5299      	strh	r1, [r3, r2]
 80027ae:	e01c      	b.n	80027ea <UART_Start_Receive_IT+0xaa>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2260      	movs	r2, #96	@ 0x60
 80027b4:	217f      	movs	r1, #127	@ 0x7f
 80027b6:	5299      	strh	r1, [r3, r2]
 80027b8:	e017      	b.n	80027ea <UART_Start_Receive_IT+0xaa>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	055b      	lsls	r3, r3, #21
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d10d      	bne.n	80027e2 <UART_Start_Receive_IT+0xa2>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d104      	bne.n	80027d8 <UART_Start_Receive_IT+0x98>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2260      	movs	r2, #96	@ 0x60
 80027d2:	217f      	movs	r1, #127	@ 0x7f
 80027d4:	5299      	strh	r1, [r3, r2]
 80027d6:	e008      	b.n	80027ea <UART_Start_Receive_IT+0xaa>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2260      	movs	r2, #96	@ 0x60
 80027dc:	213f      	movs	r1, #63	@ 0x3f
 80027de:	5299      	strh	r1, [r3, r2]
 80027e0:	e003      	b.n	80027ea <UART_Start_Receive_IT+0xaa>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2260      	movs	r2, #96	@ 0x60
 80027e6:	2100      	movs	r1, #0
 80027e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2290      	movs	r2, #144	@ 0x90
 80027ee:	2100      	movs	r1, #0
 80027f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	228c      	movs	r2, #140	@ 0x8c
 80027f6:	2122      	movs	r1, #34	@ 0x22
 80027f8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027fa:	f3ef 8310 	mrs	r3, PRIMASK
 80027fe:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002804:	2301      	movs	r3, #1
 8002806:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800280a:	f383 8810 	msr	PRIMASK, r3
}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002822:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002826:	f383 8810 	msr	PRIMASK, r3
}
 800282a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	059b      	lsls	r3, r3, #22
 8002834:	429a      	cmp	r2, r3
 8002836:	d150      	bne.n	80028da <UART_Start_Receive_IT+0x19a>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2268      	movs	r2, #104	@ 0x68
 800283c:	5a9b      	ldrh	r3, [r3, r2]
 800283e:	1dba      	adds	r2, r7, #6
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d349      	bcc.n	80028da <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	429a      	cmp	r2, r3
 8002850:	d107      	bne.n	8002862 <UART_Start_Receive_IT+0x122>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4a46      	ldr	r2, [pc, #280]	@ (8002978 <UART_Start_Receive_IT+0x238>)
 800285e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002860:	e002      	b.n	8002868 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a45      	ldr	r2, [pc, #276]	@ (800297c <UART_Start_Receive_IT+0x23c>)
 8002866:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d019      	beq.n	80028a4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002870:	f3ef 8310 	mrs	r3, PRIMASK
 8002874:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002878:	65bb      	str	r3, [r7, #88]	@ 0x58
 800287a:	2301      	movs	r3, #1
 800287c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002880:	f383 8810 	msr	PRIMASK, r3
}
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	0049      	lsls	r1, r1, #1
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289e:	f383 8810 	msr	PRIMASK, r3
}
 80028a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028a4:	f3ef 8310 	mrs	r3, PRIMASK
 80028a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80028ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80028ae:	2301      	movs	r3, #1
 80028b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b4:	f383 8810 	msr	PRIMASK, r3
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	0549      	lsls	r1, r1, #21
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d2:	f383 8810 	msr	PRIMASK, r3
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	e047      	b.n	800296a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	2380      	movs	r3, #128	@ 0x80
 80028e0:	015b      	lsls	r3, r3, #5
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d107      	bne.n	80028f6 <UART_Start_Receive_IT+0x1b6>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a23      	ldr	r2, [pc, #140]	@ (8002980 <UART_Start_Receive_IT+0x240>)
 80028f2:	675a      	str	r2, [r3, #116]	@ 0x74
 80028f4:	e002      	b.n	80028fc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4a22      	ldr	r2, [pc, #136]	@ (8002984 <UART_Start_Receive_IT+0x244>)
 80028fa:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d019      	beq.n	8002938 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002904:	f3ef 8310 	mrs	r3, PRIMASK
 8002908:	61fb      	str	r3, [r7, #28]
  return(result);
 800290a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800290c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800290e:	2301      	movs	r3, #1
 8002910:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f383 8810 	msr	PRIMASK, r3
}
 8002918:	46c0      	nop			@ (mov r8, r8)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2190      	movs	r1, #144	@ 0x90
 8002926:	0049      	lsls	r1, r1, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	f383 8810 	msr	PRIMASK, r3
}
 8002936:	e018      	b.n	800296a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002938:	f3ef 8310 	mrs	r3, PRIMASK
 800293c:	613b      	str	r3, [r7, #16]
  return(result);
 800293e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002940:	653b      	str	r3, [r7, #80]	@ 0x50
 8002942:	2301      	movs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f383 8810 	msr	PRIMASK, r3
}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2120      	movs	r1, #32
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002960:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f383 8810 	msr	PRIMASK, r3
}
 8002968:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b018      	add	sp, #96	@ 0x60
 8002972:	bd80      	pop	{r7, pc}
 8002974:	000001ff 	.word	0x000001ff
 8002978:	08003179 	.word	0x08003179
 800297c:	08002e45 	.word	0x08002e45
 8002980:	08002c8d 	.word	0x08002c8d
 8002984:	08002ad5 	.word	0x08002ad5

08002988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	@ 0x38
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002990:	f3ef 8310 	mrs	r3, PRIMASK
 8002994:	617b      	str	r3, [r7, #20]
  return(result);
 8002996:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			@ (mov r8, r8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4926      	ldr	r1, [pc, #152]	@ (8002a4c <UART_EndRxTransfer+0xc4>)
 80029b2:	400a      	ands	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f383 8810 	msr	PRIMASK, r3
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029c2:	f3ef 8310 	mrs	r3, PRIMASK
 80029c6:	623b      	str	r3, [r7, #32]
  return(result);
 80029c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80029cc:	2301      	movs	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	491b      	ldr	r1, [pc, #108]	@ (8002a50 <UART_EndRxTransfer+0xc8>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	f383 8810 	msr	PRIMASK, r3
}
 80029f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d118      	bne.n	8002a2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002a00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a06:	2301      	movs	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	438a      	bics	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	228c      	movs	r2, #140	@ 0x8c
 8002a32:	2120      	movs	r1, #32
 8002a34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b00e      	add	sp, #56	@ 0x38
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	fffffedf 	.word	0xfffffedf
 8002a50:	effffffe 	.word	0xeffffffe

08002a54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	225e      	movs	r2, #94	@ 0x5e
 8002a66:	2100      	movs	r1, #0
 8002a68:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff fb07 	bl	8002080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a82:	f3ef 8310 	mrs	r3, PRIMASK
 8002a86:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a88:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2140      	movs	r1, #64	@ 0x40
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f383 8810 	msr	PRIMASK, r3
}
 8002ab2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2288      	movs	r2, #136	@ 0x88
 8002ab8:	2120      	movs	r1, #32
 8002aba:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff fad3 	bl	8002070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b006      	add	sp, #24
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b094      	sub	sp, #80	@ 0x50
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002adc:	204e      	movs	r0, #78	@ 0x4e
 8002ade:	183b      	adds	r3, r7, r0
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	2160      	movs	r1, #96	@ 0x60
 8002ae4:	5a52      	ldrh	r2, [r2, r1]
 8002ae6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	228c      	movs	r2, #140	@ 0x8c
 8002aec:	589b      	ldr	r3, [r3, r2]
 8002aee:	2b22      	cmp	r3, #34	@ 0x22
 8002af0:	d000      	beq.n	8002af4 <UART_RxISR_8BIT+0x20>
 8002af2:	e0ba      	b.n	8002c6a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002afa:	214c      	movs	r1, #76	@ 0x4c
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	183b      	adds	r3, r7, r0
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b2d9      	uxtb	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b10:	400a      	ands	r2, r1
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	225e      	movs	r2, #94	@ 0x5e
 8002b24:	5a9b      	ldrh	r3, [r3, r2]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b299      	uxth	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	225e      	movs	r2, #94	@ 0x5e
 8002b30:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	225e      	movs	r2, #94	@ 0x5e
 8002b36:	5a9b      	ldrh	r3, [r3, r2]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d000      	beq.n	8002b40 <UART_RxISR_8BIT+0x6c>
 8002b3e:	e09c      	b.n	8002c7a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b40:	f3ef 8310 	mrs	r3, PRIMASK
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	f383 8810 	msr	PRIMASK, r3
}
 8002b54:	46c0      	nop			@ (mov r8, r8)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4948      	ldr	r1, [pc, #288]	@ (8002c84 <UART_RxISR_8BIT+0x1b0>)
 8002b62:	400a      	ands	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6c:	f383 8810 	msr	PRIMASK, r3
}
 8002b70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b72:	f3ef 8310 	mrs	r3, PRIMASK
 8002b76:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2101      	movs	r1, #1
 8002b94:	438a      	bics	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ba2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	228c      	movs	r2, #140	@ 0x8c
 8002ba8:	2120      	movs	r1, #32
 8002baa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	2380      	movs	r3, #128	@ 0x80
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d018      	beq.n	8002bf8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bca:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bcc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bce:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f383 8810 	msr	PRIMASK, r3
}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4928      	ldr	r1, [pc, #160]	@ (8002c88 <UART_RxISR_8BIT+0x1b4>)
 8002be8:	400a      	ands	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f383 8810 	msr	PRIMASK, r3
}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d12f      	bne.n	8002c60 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c06:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c10:	2301      	movs	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f383 8810 	msr	PRIMASK, r3
}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2110      	movs	r1, #16
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f383 8810 	msr	PRIMASK, r3
}
 8002c36:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2210      	movs	r2, #16
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d103      	bne.n	8002c4e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	225c      	movs	r2, #92	@ 0x5c
 8002c52:	5a9a      	ldrh	r2, [r3, r2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0011      	movs	r1, r2
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7ff fa19 	bl	8002090 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c5e:	e00c      	b.n	8002c7a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7fd fc36 	bl	80004d4 <HAL_UART_RxCpltCallback>
}
 8002c68:	e007      	b.n	8002c7a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2108      	movs	r1, #8
 8002c76:	430a      	orrs	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b014      	add	sp, #80	@ 0x50
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	fffffedf 	.word	0xfffffedf
 8002c88:	fbffffff 	.word	0xfbffffff

08002c8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b094      	sub	sp, #80	@ 0x50
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002c94:	204e      	movs	r0, #78	@ 0x4e
 8002c96:	183b      	adds	r3, r7, r0
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	2160      	movs	r1, #96	@ 0x60
 8002c9c:	5a52      	ldrh	r2, [r2, r1]
 8002c9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	228c      	movs	r2, #140	@ 0x8c
 8002ca4:	589b      	ldr	r3, [r3, r2]
 8002ca6:	2b22      	cmp	r3, #34	@ 0x22
 8002ca8:	d000      	beq.n	8002cac <UART_RxISR_16BIT+0x20>
 8002caa:	e0ba      	b.n	8002e22 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb2:	214c      	movs	r1, #76	@ 0x4c
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	183a      	adds	r2, r7, r0
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	8812      	ldrh	r2, [r2, #0]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ccc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	1c9a      	adds	r2, r3, #2
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	225e      	movs	r2, #94	@ 0x5e
 8002cdc:	5a9b      	ldrh	r3, [r3, r2]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b299      	uxth	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	225e      	movs	r2, #94	@ 0x5e
 8002ce8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	225e      	movs	r2, #94	@ 0x5e
 8002cee:	5a9b      	ldrh	r3, [r3, r2]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d000      	beq.n	8002cf8 <UART_RxISR_16BIT+0x6c>
 8002cf6:	e09c      	b.n	8002e32 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	623b      	str	r3, [r7, #32]
  return(result);
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d02:	2301      	movs	r3, #1
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4948      	ldr	r1, [pc, #288]	@ (8002e3c <UART_RxISR_16BIT+0x1b0>)
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d34:	2301      	movs	r3, #1
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	f383 8810 	msr	PRIMASK, r3
}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d56:	f383 8810 	msr	PRIMASK, r3
}
 8002d5a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	228c      	movs	r2, #140	@ 0x8c
 8002d60:	2120      	movs	r1, #32
 8002d62:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d018      	beq.n	8002db0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d82:	617b      	str	r3, [r7, #20]
  return(result);
 8002d84:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d88:	2301      	movs	r3, #1
 8002d8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f383 8810 	msr	PRIMASK, r3
}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4928      	ldr	r1, [pc, #160]	@ (8002e40 <UART_RxISR_16BIT+0x1b4>)
 8002da0:	400a      	ands	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f383 8810 	msr	PRIMASK, r3
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d12f      	bne.n	8002e18 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dc4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dc8:	2301      	movs	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f383 8810 	msr	PRIMASK, r3
}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2110      	movs	r1, #16
 8002de0:	438a      	bics	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f383 8810 	msr	PRIMASK, r3
}
 8002dee:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2210      	movs	r2, #16
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d103      	bne.n	8002e06 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2210      	movs	r2, #16
 8002e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	225c      	movs	r2, #92	@ 0x5c
 8002e0a:	5a9a      	ldrh	r2, [r3, r2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0011      	movs	r1, r2
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7ff f93d 	bl	8002090 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e16:	e00c      	b.n	8002e32 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7fd fb5a 	bl	80004d4 <HAL_UART_RxCpltCallback>
}
 8002e20:	e007      	b.n	8002e32 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	619a      	str	r2, [r3, #24]
}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b014      	add	sp, #80	@ 0x50
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	fffffedf 	.word	0xfffffedf
 8002e40:	fbffffff 	.word	0xfbffffff

08002e44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b0a0      	sub	sp, #128	@ 0x80
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8002e4c:	237a      	movs	r3, #122	@ 0x7a
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	2160      	movs	r1, #96	@ 0x60
 8002e54:	5a52      	ldrh	r2, [r2, r1]
 8002e56:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	228c      	movs	r2, #140	@ 0x8c
 8002e74:	589b      	ldr	r3, [r3, r2]
 8002e76:	2b22      	cmp	r3, #34	@ 0x22
 8002e78:	d000      	beq.n	8002e7c <UART_RxISR_8BIT_FIFOEN+0x38>
 8002e7a:	e166      	b.n	800314a <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002e7c:	236e      	movs	r3, #110	@ 0x6e
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	2168      	movs	r1, #104	@ 0x68
 8002e84:	5a52      	ldrh	r2, [r2, r1]
 8002e86:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002e88:	e10d      	b.n	80030a6 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e90:	216c      	movs	r1, #108	@ 0x6c
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	237a      	movs	r3, #122	@ 0x7a
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b2d9      	uxtb	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	225e      	movs	r2, #94	@ 0x5e
 8002ebc:	5a9b      	ldrh	r3, [r3, r2]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b299      	uxth	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	225e      	movs	r2, #94	@ 0x5e
 8002ec8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d049      	beq.n	8002f6e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002eda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d010      	beq.n	8002f04 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8002ee2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ee4:	2380      	movs	r3, #128	@ 0x80
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d00b      	beq.n	8002f04 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2290      	movs	r2, #144	@ 0x90
 8002ef8:	589b      	ldr	r3, [r3, r2]
 8002efa:	2201      	movs	r2, #1
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2190      	movs	r1, #144	@ 0x90
 8002f02:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f06:	2202      	movs	r2, #2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d00f      	beq.n	8002f2c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8002f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4013      	ands	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2290      	movs	r2, #144	@ 0x90
 8002f20:	589b      	ldr	r3, [r3, r2]
 8002f22:	2204      	movs	r2, #4
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2190      	movs	r1, #144	@ 0x90
 8002f2a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f2e:	2204      	movs	r2, #4
 8002f30:	4013      	ands	r3, r2
 8002f32:	d00f      	beq.n	8002f54 <UART_RxISR_8BIT_FIFOEN+0x110>
 8002f34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f36:	2201      	movs	r2, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2204      	movs	r2, #4
 8002f42:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2290      	movs	r2, #144	@ 0x90
 8002f48:	589b      	ldr	r3, [r3, r2]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2190      	movs	r1, #144	@ 0x90
 8002f52:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2290      	movs	r2, #144	@ 0x90
 8002f58:	589b      	ldr	r3, [r3, r2]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7ff f88d 	bl	8002080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2290      	movs	r2, #144	@ 0x90
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	225e      	movs	r2, #94	@ 0x5e
 8002f72:	5a9b      	ldrh	r3, [r3, r2]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d000      	beq.n	8002f7c <UART_RxISR_8BIT_FIFOEN+0x138>
 8002f7a:	e094      	b.n	80030a6 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f80:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8002f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f86:	2301      	movs	r3, #1
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	f383 8810 	msr	PRIMASK, r3
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4971      	ldr	r1, [pc, #452]	@ (8003164 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fa4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fae:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fb8:	2301      	movs	r3, #1
 8002fba:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fbe:	f383 8810 	msr	PRIMASK, r3
}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4966      	ldr	r1, [pc, #408]	@ (8003168 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fda:	f383 8810 	msr	PRIMASK, r3
}
 8002fde:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	228c      	movs	r2, #140	@ 0x8c
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	4013      	ands	r3, r2
 8003000:	d018      	beq.n	8003034 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003002:	f3ef 8310 	mrs	r3, PRIMASK
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800300a:	663b      	str	r3, [r7, #96]	@ 0x60
 800300c:	2301      	movs	r3, #1
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4952      	ldr	r1, [pc, #328]	@ (800316c <UART_RxISR_8BIT_FIFOEN+0x328>)
 8003024:	400a      	ands	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800302a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302e:	f383 8810 	msr	PRIMASK, r3
}
 8003032:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d12f      	bne.n	800309c <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003042:	f3ef 8310 	mrs	r3, PRIMASK
 8003046:	623b      	str	r3, [r7, #32]
  return(result);
 8003048:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800304c:	2301      	movs	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	f383 8810 	msr	PRIMASK, r3
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2110      	movs	r1, #16
 8003064:	438a      	bics	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800306a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306e:	f383 8810 	msr	PRIMASK, r3
}
 8003072:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	2210      	movs	r2, #16
 800307c:	4013      	ands	r3, r2
 800307e:	2b10      	cmp	r3, #16
 8003080:	d103      	bne.n	800308a <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2210      	movs	r2, #16
 8003088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	225c      	movs	r2, #92	@ 0x5c
 800308e:	5a9a      	ldrh	r2, [r3, r2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0011      	movs	r1, r2
 8003094:	0018      	movs	r0, r3
 8003096:	f7fe fffb 	bl	8002090 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800309a:	e00e      	b.n	80030ba <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f7fd fa18 	bl	80004d4 <HAL_UART_RxCpltCallback>
        break;
 80030a4:	e009      	b.n	80030ba <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80030a6:	236e      	movs	r3, #110	@ 0x6e
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <UART_RxISR_8BIT_FIFOEN+0x276>
 80030b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030b2:	2220      	movs	r2, #32
 80030b4:	4013      	ands	r3, r2
 80030b6:	d000      	beq.n	80030ba <UART_RxISR_8BIT_FIFOEN+0x276>
 80030b8:	e6e7      	b.n	8002e8a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80030ba:	205a      	movs	r0, #90	@ 0x5a
 80030bc:	183b      	adds	r3, r7, r0
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	215e      	movs	r1, #94	@ 0x5e
 80030c2:	5a52      	ldrh	r2, [r2, r1]
 80030c4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80030c6:	0001      	movs	r1, r0
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d044      	beq.n	800315a <UART_RxISR_8BIT_FIFOEN+0x316>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2268      	movs	r2, #104	@ 0x68
 80030d4:	5a9b      	ldrh	r3, [r3, r2]
 80030d6:	187a      	adds	r2, r7, r1
 80030d8:	8812      	ldrh	r2, [r2, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d23d      	bcs.n	800315a <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030de:	f3ef 8310 	mrs	r3, PRIMASK
 80030e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80030e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80030e8:	2301      	movs	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	491c      	ldr	r1, [pc, #112]	@ (8003170 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8003100:	400a      	ands	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a18      	ldr	r2, [pc, #96]	@ (8003174 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8003114:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003116:	f3ef 8310 	mrs	r3, PRIMASK
 800311a:	617b      	str	r3, [r7, #20]
  return(result);
 800311c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800311e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003120:	2301      	movs	r3, #1
 8003122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2120      	movs	r1, #32
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800313e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f383 8810 	msr	PRIMASK, r3
}
 8003146:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003148:	e007      	b.n	800315a <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2108      	movs	r1, #8
 8003156:	430a      	orrs	r2, r1
 8003158:	619a      	str	r2, [r3, #24]
}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	46bd      	mov	sp, r7
 800315e:	b020      	add	sp, #128	@ 0x80
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	fffffeff 	.word	0xfffffeff
 8003168:	effffffe 	.word	0xeffffffe
 800316c:	fbffffff 	.word	0xfbffffff
 8003170:	efffffff 	.word	0xefffffff
 8003174:	08002ad5 	.word	0x08002ad5

08003178 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b0a2      	sub	sp, #136	@ 0x88
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003180:	2382      	movs	r3, #130	@ 0x82
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	2160      	movs	r1, #96	@ 0x60
 8003188:	5a52      	ldrh	r2, [r2, r1]
 800318a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	2284      	movs	r2, #132	@ 0x84
 8003194:	18ba      	adds	r2, r7, r2
 8003196:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	228c      	movs	r2, #140	@ 0x8c
 80031ac:	589b      	ldr	r3, [r3, r2]
 80031ae:	2b22      	cmp	r3, #34	@ 0x22
 80031b0:	d000      	beq.n	80031b4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80031b2:	e170      	b.n	8003496 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80031b4:	2376      	movs	r3, #118	@ 0x76
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	2168      	movs	r1, #104	@ 0x68
 80031bc:	5a52      	ldrh	r2, [r2, r1]
 80031be:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80031c0:	e115      	b.n	80033ee <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c8:	2174      	movs	r1, #116	@ 0x74
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80031d4:	187b      	adds	r3, r7, r1
 80031d6:	2282      	movs	r2, #130	@ 0x82
 80031d8:	18ba      	adds	r2, r7, r2
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	8812      	ldrh	r2, [r2, #0]
 80031de:	4013      	ands	r3, r2
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	1c9a      	adds	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	225e      	movs	r2, #94	@ 0x5e
 80031f4:	5a9b      	ldrh	r3, [r3, r2]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b299      	uxth	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	225e      	movs	r2, #94	@ 0x5e
 8003200:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2184      	movs	r1, #132	@ 0x84
 800320a:	187a      	adds	r2, r7, r1
 800320c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800320e:	187b      	adds	r3, r7, r1
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2207      	movs	r2, #7
 8003214:	4013      	ands	r3, r2
 8003216:	d04e      	beq.n	80032b6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003218:	187b      	adds	r3, r7, r1
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2201      	movs	r2, #1
 800321e:	4013      	ands	r3, r2
 8003220:	d010      	beq.n	8003244 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8003222:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003224:	2380      	movs	r3, #128	@ 0x80
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4013      	ands	r3, r2
 800322a:	d00b      	beq.n	8003244 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2290      	movs	r2, #144	@ 0x90
 8003238:	589b      	ldr	r3, [r3, r2]
 800323a:	2201      	movs	r2, #1
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2190      	movs	r1, #144	@ 0x90
 8003242:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003244:	2384      	movs	r3, #132	@ 0x84
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d00f      	beq.n	8003270 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003252:	2201      	movs	r2, #1
 8003254:	4013      	ands	r3, r2
 8003256:	d00b      	beq.n	8003270 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2202      	movs	r2, #2
 800325e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2290      	movs	r2, #144	@ 0x90
 8003264:	589b      	ldr	r3, [r3, r2]
 8003266:	2204      	movs	r2, #4
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2190      	movs	r1, #144	@ 0x90
 800326e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003270:	2384      	movs	r3, #132	@ 0x84
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2204      	movs	r2, #4
 8003278:	4013      	ands	r3, r2
 800327a:	d00f      	beq.n	800329c <UART_RxISR_16BIT_FIFOEN+0x124>
 800327c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800327e:	2201      	movs	r2, #1
 8003280:	4013      	ands	r3, r2
 8003282:	d00b      	beq.n	800329c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2204      	movs	r2, #4
 800328a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2290      	movs	r2, #144	@ 0x90
 8003290:	589b      	ldr	r3, [r3, r2]
 8003292:	2202      	movs	r2, #2
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2190      	movs	r1, #144	@ 0x90
 800329a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2290      	movs	r2, #144	@ 0x90
 80032a0:	589b      	ldr	r3, [r3, r2]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7fe fee9 	bl	8002080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2290      	movs	r2, #144	@ 0x90
 80032b2:	2100      	movs	r1, #0
 80032b4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	225e      	movs	r2, #94	@ 0x5e
 80032ba:	5a9b      	ldrh	r3, [r3, r2]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d000      	beq.n	80032c4 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80032c2:	e094      	b.n	80033ee <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032c4:	f3ef 8310 	mrs	r3, PRIMASK
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80032ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032ce:	2301      	movs	r3, #1
 80032d0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4972      	ldr	r1, [pc, #456]	@ (80034b0 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80032e6:	400a      	ands	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ec:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f0:	f383 8810 	msr	PRIMASK, r3
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032f6:	f3ef 8310 	mrs	r3, PRIMASK
 80032fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80032fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003300:	2301      	movs	r3, #1
 8003302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4967      	ldr	r1, [pc, #412]	@ (80034b4 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003318:	400a      	ands	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800331e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	228c      	movs	r2, #140	@ 0x8c
 800332c:	2120      	movs	r1, #32
 800332e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	2380      	movs	r3, #128	@ 0x80
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	4013      	ands	r3, r2
 8003348:	d018      	beq.n	800337c <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800334a:	f3ef 8310 	mrs	r3, PRIMASK
 800334e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003352:	667b      	str	r3, [r7, #100]	@ 0x64
 8003354:	2301      	movs	r3, #1
 8003356:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	f383 8810 	msr	PRIMASK, r3
}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4953      	ldr	r1, [pc, #332]	@ (80034b8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800336c:	400a      	ands	r2, r1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003372:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003376:	f383 8810 	msr	PRIMASK, r3
}
 800337a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d12f      	bne.n	80033e4 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800338a:	f3ef 8310 	mrs	r3, PRIMASK
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003392:	663b      	str	r3, [r7, #96]	@ 0x60
 8003394:	2301      	movs	r3, #1
 8003396:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339a:	f383 8810 	msr	PRIMASK, r3
}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2110      	movs	r1, #16
 80033ac:	438a      	bics	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b6:	f383 8810 	msr	PRIMASK, r3
}
 80033ba:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	2210      	movs	r2, #16
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d103      	bne.n	80033d2 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2210      	movs	r2, #16
 80033d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	225c      	movs	r2, #92	@ 0x5c
 80033d6:	5a9a      	ldrh	r2, [r3, r2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f7fe fe57 	bl	8002090 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80033e2:	e010      	b.n	8003406 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7fd f874 	bl	80004d4 <HAL_UART_RxCpltCallback>
        break;
 80033ec:	e00b      	b.n	8003406 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80033ee:	2376      	movs	r3, #118	@ 0x76
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <UART_RxISR_16BIT_FIFOEN+0x28e>
 80033f8:	2384      	movs	r3, #132	@ 0x84
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2220      	movs	r2, #32
 8003400:	4013      	ands	r3, r2
 8003402:	d000      	beq.n	8003406 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8003404:	e6dd      	b.n	80031c2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003406:	205e      	movs	r0, #94	@ 0x5e
 8003408:	183b      	adds	r3, r7, r0
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	215e      	movs	r1, #94	@ 0x5e
 800340e:	5a52      	ldrh	r2, [r2, r1]
 8003410:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003412:	0001      	movs	r1, r0
 8003414:	187b      	adds	r3, r7, r1
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d044      	beq.n	80034a6 <UART_RxISR_16BIT_FIFOEN+0x32e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2268      	movs	r2, #104	@ 0x68
 8003420:	5a9b      	ldrh	r3, [r3, r2]
 8003422:	187a      	adds	r2, r7, r1
 8003424:	8812      	ldrh	r2, [r2, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d23d      	bcs.n	80034a6 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003434:	2301      	movs	r3, #1
 8003436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	491c      	ldr	r1, [pc, #112]	@ (80034bc <UART_RxISR_16BIT_FIFOEN+0x344>)
 800344c:	400a      	ands	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a18      	ldr	r2, [pc, #96]	@ (80034c0 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8003460:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	61bb      	str	r3, [r7, #24]
  return(result);
 8003468:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800346a:	657b      	str	r3, [r7, #84]	@ 0x54
 800346c:	2301      	movs	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f383 8810 	msr	PRIMASK, r3
}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2120      	movs	r1, #32
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003494:	e007      	b.n	80034a6 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2108      	movs	r1, #8
 80034a2:	430a      	orrs	r2, r1
 80034a4:	619a      	str	r2, [r3, #24]
}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b022      	add	sp, #136	@ 0x88
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	fffffeff 	.word	0xfffffeff
 80034b4:	effffffe 	.word	0xeffffffe
 80034b8:	fbffffff 	.word	0xfbffffff
 80034bc:	efffffff 	.word	0xefffffff
 80034c0:	08002c8d 	.word	0x08002c8d

080034c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80034dc:	46c0      	nop			@ (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2284      	movs	r2, #132	@ 0x84
 8003500:	5c9b      	ldrb	r3, [r3, r2]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_UARTEx_DisableFifoMode+0x16>
 8003506:	2302      	movs	r3, #2
 8003508:	e027      	b.n	800355a <HAL_UARTEx_DisableFifoMode+0x66>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2284      	movs	r2, #132	@ 0x84
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2288      	movs	r2, #136	@ 0x88
 8003516:	2124      	movs	r1, #36	@ 0x24
 8003518:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	438a      	bics	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a0b      	ldr	r2, [pc, #44]	@ (8003564 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2288      	movs	r2, #136	@ 0x88
 800354c:	2120      	movs	r1, #32
 800354e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2284      	movs	r2, #132	@ 0x84
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	dfffffff 	.word	0xdfffffff

08003568 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2284      	movs	r2, #132	@ 0x84
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e02e      	b.n	80035de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2284      	movs	r2, #132	@ 0x84
 8003584:	2101      	movs	r1, #1
 8003586:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2288      	movs	r2, #136	@ 0x88
 800358c:	2124      	movs	r1, #36	@ 0x24
 800358e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2101      	movs	r1, #1
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	08d9      	lsrs	r1, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 f854 	bl	800366c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2288      	movs	r2, #136	@ 0x88
 80035d0:	2120      	movs	r1, #32
 80035d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2284      	movs	r2, #132	@ 0x84
 80035d8:	2100      	movs	r1, #0
 80035da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2284      	movs	r2, #132	@ 0x84
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e02f      	b.n	8003660 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2284      	movs	r2, #132	@ 0x84
 8003604:	2101      	movs	r1, #1
 8003606:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2288      	movs	r2, #136	@ 0x88
 800360c:	2124      	movs	r1, #36	@ 0x24
 800360e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	438a      	bics	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4a0e      	ldr	r2, [pc, #56]	@ (8003668 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003630:	4013      	ands	r3, r2
 8003632:	0019      	movs	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f000 f813 	bl	800366c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2288      	movs	r2, #136	@ 0x88
 8003652:	2120      	movs	r1, #32
 8003654:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2284      	movs	r2, #132	@ 0x84
 800365a:	2100      	movs	r1, #0
 800365c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bd80      	pop	{r7, pc}
 8003668:	f1ffffff 	.word	0xf1ffffff

0800366c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800366c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	226a      	movs	r2, #106	@ 0x6a
 8003680:	2101      	movs	r1, #1
 8003682:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2268      	movs	r2, #104	@ 0x68
 8003688:	2101      	movs	r1, #1
 800368a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800368c:	e043      	b.n	8003716 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800368e:	260f      	movs	r6, #15
 8003690:	19bb      	adds	r3, r7, r6
 8003692:	2208      	movs	r2, #8
 8003694:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003696:	200e      	movs	r0, #14
 8003698:	183b      	adds	r3, r7, r0
 800369a:	2208      	movs	r2, #8
 800369c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	0e5b      	lsrs	r3, r3, #25
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	240d      	movs	r4, #13
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	2107      	movs	r1, #7
 80036ae:	400a      	ands	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	0f5b      	lsrs	r3, r3, #29
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	250c      	movs	r5, #12
 80036be:	197b      	adds	r3, r7, r5
 80036c0:	2107      	movs	r1, #7
 80036c2:	400a      	ands	r2, r1
 80036c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036c6:	183b      	adds	r3, r7, r0
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	197a      	adds	r2, r7, r5
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	4914      	ldr	r1, [pc, #80]	@ (8003720 <UARTEx_SetNbDataToProcess+0xb4>)
 80036d0:	5c8a      	ldrb	r2, [r1, r2]
 80036d2:	435a      	muls	r2, r3
 80036d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80036d6:	197b      	adds	r3, r7, r5
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	4a12      	ldr	r2, [pc, #72]	@ (8003724 <UARTEx_SetNbDataToProcess+0xb8>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036de:	0019      	movs	r1, r3
 80036e0:	f7fc fdae 	bl	8000240 <__divsi3>
 80036e4:	0003      	movs	r3, r0
 80036e6:	b299      	uxth	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	226a      	movs	r2, #106	@ 0x6a
 80036ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036ee:	19bb      	adds	r3, r7, r6
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	193a      	adds	r2, r7, r4
 80036f4:	7812      	ldrb	r2, [r2, #0]
 80036f6:	490a      	ldr	r1, [pc, #40]	@ (8003720 <UARTEx_SetNbDataToProcess+0xb4>)
 80036f8:	5c8a      	ldrb	r2, [r1, r2]
 80036fa:	435a      	muls	r2, r3
 80036fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	4a08      	ldr	r2, [pc, #32]	@ (8003724 <UARTEx_SetNbDataToProcess+0xb8>)
 8003704:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003706:	0019      	movs	r1, r3
 8003708:	f7fc fd9a 	bl	8000240 <__divsi3>
 800370c:	0003      	movs	r3, r0
 800370e:	b299      	uxth	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2268      	movs	r2, #104	@ 0x68
 8003714:	5299      	strh	r1, [r3, r2]
}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	b005      	add	sp, #20
 800371c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	08004b40 	.word	0x08004b40
 8003724:	08004b48 	.word	0x08004b48

08003728 <sniprintf>:
 8003728:	b40c      	push	{r2, r3}
 800372a:	b530      	push	{r4, r5, lr}
 800372c:	4b18      	ldr	r3, [pc, #96]	@ (8003790 <sniprintf+0x68>)
 800372e:	000c      	movs	r4, r1
 8003730:	681d      	ldr	r5, [r3, #0]
 8003732:	b09d      	sub	sp, #116	@ 0x74
 8003734:	2900      	cmp	r1, #0
 8003736:	da08      	bge.n	800374a <sniprintf+0x22>
 8003738:	238b      	movs	r3, #139	@ 0x8b
 800373a:	2001      	movs	r0, #1
 800373c:	602b      	str	r3, [r5, #0]
 800373e:	4240      	negs	r0, r0
 8003740:	b01d      	add	sp, #116	@ 0x74
 8003742:	bc30      	pop	{r4, r5}
 8003744:	bc08      	pop	{r3}
 8003746:	b002      	add	sp, #8
 8003748:	4718      	bx	r3
 800374a:	2382      	movs	r3, #130	@ 0x82
 800374c:	466a      	mov	r2, sp
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	8293      	strh	r3, [r2, #20]
 8003752:	2300      	movs	r3, #0
 8003754:	9002      	str	r0, [sp, #8]
 8003756:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003758:	9006      	str	r0, [sp, #24]
 800375a:	4299      	cmp	r1, r3
 800375c:	d000      	beq.n	8003760 <sniprintf+0x38>
 800375e:	1e4b      	subs	r3, r1, #1
 8003760:	9304      	str	r3, [sp, #16]
 8003762:	9307      	str	r3, [sp, #28]
 8003764:	2301      	movs	r3, #1
 8003766:	466a      	mov	r2, sp
 8003768:	425b      	negs	r3, r3
 800376a:	82d3      	strh	r3, [r2, #22]
 800376c:	0028      	movs	r0, r5
 800376e:	ab21      	add	r3, sp, #132	@ 0x84
 8003770:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003772:	a902      	add	r1, sp, #8
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	f000 f9db 	bl	8003b30 <_svfiprintf_r>
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	da01      	bge.n	8003782 <sniprintf+0x5a>
 800377e:	238b      	movs	r3, #139	@ 0x8b
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	2c00      	cmp	r4, #0
 8003784:	d0dc      	beq.n	8003740 <sniprintf+0x18>
 8003786:	2200      	movs	r2, #0
 8003788:	9b02      	ldr	r3, [sp, #8]
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e7d8      	b.n	8003740 <sniprintf+0x18>
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	2000000c 	.word	0x2000000c

08003794 <siscanf>:
 8003794:	b40e      	push	{r1, r2, r3}
 8003796:	b570      	push	{r4, r5, r6, lr}
 8003798:	2381      	movs	r3, #129	@ 0x81
 800379a:	b09d      	sub	sp, #116	@ 0x74
 800379c:	466a      	mov	r2, sp
 800379e:	2500      	movs	r5, #0
 80037a0:	ac21      	add	r4, sp, #132	@ 0x84
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	cc40      	ldmia	r4!, {r6}
 80037a6:	8293      	strh	r3, [r2, #20]
 80037a8:	951b      	str	r5, [sp, #108]	@ 0x6c
 80037aa:	9002      	str	r0, [sp, #8]
 80037ac:	9006      	str	r0, [sp, #24]
 80037ae:	f7fc fcab 	bl	8000108 <strlen>
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <siscanf+0x4c>)
 80037b4:	466a      	mov	r2, sp
 80037b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037b8:	2301      	movs	r3, #1
 80037ba:	9003      	str	r0, [sp, #12]
 80037bc:	9007      	str	r0, [sp, #28]
 80037be:	4809      	ldr	r0, [pc, #36]	@ (80037e4 <siscanf+0x50>)
 80037c0:	425b      	negs	r3, r3
 80037c2:	82d3      	strh	r3, [r2, #22]
 80037c4:	a902      	add	r1, sp, #8
 80037c6:	0023      	movs	r3, r4
 80037c8:	0032      	movs	r2, r6
 80037ca:	6800      	ldr	r0, [r0, #0]
 80037cc:	950f      	str	r5, [sp, #60]	@ 0x3c
 80037ce:	9514      	str	r5, [sp, #80]	@ 0x50
 80037d0:	9401      	str	r4, [sp, #4]
 80037d2:	f000 fb07 	bl	8003de4 <__ssvfiscanf_r>
 80037d6:	b01d      	add	sp, #116	@ 0x74
 80037d8:	bc70      	pop	{r4, r5, r6}
 80037da:	bc08      	pop	{r3}
 80037dc:	b003      	add	sp, #12
 80037de:	4718      	bx	r3
 80037e0:	080037e9 	.word	0x080037e9
 80037e4:	2000000c 	.word	0x2000000c

080037e8 <__seofread>:
 80037e8:	2000      	movs	r0, #0
 80037ea:	4770      	bx	lr

080037ec <memset>:
 80037ec:	0003      	movs	r3, r0
 80037ee:	1882      	adds	r2, r0, r2
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	7019      	strb	r1, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <strncmp>:
 80037fc:	b530      	push	{r4, r5, lr}
 80037fe:	0005      	movs	r5, r0
 8003800:	1e10      	subs	r0, r2, #0
 8003802:	d00b      	beq.n	800381c <strncmp+0x20>
 8003804:	2400      	movs	r4, #0
 8003806:	3a01      	subs	r2, #1
 8003808:	5d2b      	ldrb	r3, [r5, r4]
 800380a:	5d08      	ldrb	r0, [r1, r4]
 800380c:	4283      	cmp	r3, r0
 800380e:	d104      	bne.n	800381a <strncmp+0x1e>
 8003810:	4294      	cmp	r4, r2
 8003812:	d002      	beq.n	800381a <strncmp+0x1e>
 8003814:	3401      	adds	r4, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f6      	bne.n	8003808 <strncmp+0xc>
 800381a:	1a18      	subs	r0, r3, r0
 800381c:	bd30      	pop	{r4, r5, pc}
	...

08003820 <__errno>:
 8003820:	4b01      	ldr	r3, [pc, #4]	@ (8003828 <__errno+0x8>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	4770      	bx	lr
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	2000000c 	.word	0x2000000c

0800382c <__libc_init_array>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	2600      	movs	r6, #0
 8003830:	4c0c      	ldr	r4, [pc, #48]	@ (8003864 <__libc_init_array+0x38>)
 8003832:	4d0d      	ldr	r5, [pc, #52]	@ (8003868 <__libc_init_array+0x3c>)
 8003834:	1b64      	subs	r4, r4, r5
 8003836:	10a4      	asrs	r4, r4, #2
 8003838:	42a6      	cmp	r6, r4
 800383a:	d109      	bne.n	8003850 <__libc_init_array+0x24>
 800383c:	2600      	movs	r6, #0
 800383e:	f001 f90d 	bl	8004a5c <_init>
 8003842:	4c0a      	ldr	r4, [pc, #40]	@ (800386c <__libc_init_array+0x40>)
 8003844:	4d0a      	ldr	r5, [pc, #40]	@ (8003870 <__libc_init_array+0x44>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	42a6      	cmp	r6, r4
 800384c:	d105      	bne.n	800385a <__libc_init_array+0x2e>
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	00b3      	lsls	r3, r6, #2
 8003852:	58eb      	ldr	r3, [r5, r3]
 8003854:	4798      	blx	r3
 8003856:	3601      	adds	r6, #1
 8003858:	e7ee      	b.n	8003838 <__libc_init_array+0xc>
 800385a:	00b3      	lsls	r3, r6, #2
 800385c:	58eb      	ldr	r3, [r5, r3]
 800385e:	4798      	blx	r3
 8003860:	3601      	adds	r6, #1
 8003862:	e7f2      	b.n	800384a <__libc_init_array+0x1e>
 8003864:	08004ca0 	.word	0x08004ca0
 8003868:	08004ca0 	.word	0x08004ca0
 800386c:	08004ca4 	.word	0x08004ca4
 8003870:	08004ca0 	.word	0x08004ca0

08003874 <__retarget_lock_acquire_recursive>:
 8003874:	4770      	bx	lr

08003876 <__retarget_lock_release_recursive>:
 8003876:	4770      	bx	lr

08003878 <_free_r>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	0005      	movs	r5, r0
 800387c:	1e0c      	subs	r4, r1, #0
 800387e:	d010      	beq.n	80038a2 <_free_r+0x2a>
 8003880:	3c04      	subs	r4, #4
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	da00      	bge.n	800388a <_free_r+0x12>
 8003888:	18e4      	adds	r4, r4, r3
 800388a:	0028      	movs	r0, r5
 800388c:	f000 f8e0 	bl	8003a50 <__malloc_lock>
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <_free_r+0x90>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <_free_r+0x2c>
 8003898:	6063      	str	r3, [r4, #4]
 800389a:	6014      	str	r4, [r2, #0]
 800389c:	0028      	movs	r0, r5
 800389e:	f000 f8df 	bl	8003a60 <__malloc_unlock>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d908      	bls.n	80038ba <_free_r+0x42>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	1821      	adds	r1, r4, r0
 80038ac:	428b      	cmp	r3, r1
 80038ae:	d1f3      	bne.n	8003898 <_free_r+0x20>
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	1809      	adds	r1, r1, r0
 80038b6:	6021      	str	r1, [r4, #0]
 80038b8:	e7ee      	b.n	8003898 <_free_r+0x20>
 80038ba:	001a      	movs	r2, r3
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <_free_r+0x4e>
 80038c2:	42a3      	cmp	r3, r4
 80038c4:	d9f9      	bls.n	80038ba <_free_r+0x42>
 80038c6:	6811      	ldr	r1, [r2, #0]
 80038c8:	1850      	adds	r0, r2, r1
 80038ca:	42a0      	cmp	r0, r4
 80038cc:	d10b      	bne.n	80038e6 <_free_r+0x6e>
 80038ce:	6820      	ldr	r0, [r4, #0]
 80038d0:	1809      	adds	r1, r1, r0
 80038d2:	1850      	adds	r0, r2, r1
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	4283      	cmp	r3, r0
 80038d8:	d1e0      	bne.n	800389c <_free_r+0x24>
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	1841      	adds	r1, r0, r1
 80038e0:	6011      	str	r1, [r2, #0]
 80038e2:	6053      	str	r3, [r2, #4]
 80038e4:	e7da      	b.n	800389c <_free_r+0x24>
 80038e6:	42a0      	cmp	r0, r4
 80038e8:	d902      	bls.n	80038f0 <_free_r+0x78>
 80038ea:	230c      	movs	r3, #12
 80038ec:	602b      	str	r3, [r5, #0]
 80038ee:	e7d5      	b.n	800389c <_free_r+0x24>
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	1821      	adds	r1, r4, r0
 80038f4:	428b      	cmp	r3, r1
 80038f6:	d103      	bne.n	8003900 <_free_r+0x88>
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	1809      	adds	r1, r1, r0
 80038fe:	6021      	str	r1, [r4, #0]
 8003900:	6063      	str	r3, [r4, #4]
 8003902:	6054      	str	r4, [r2, #4]
 8003904:	e7ca      	b.n	800389c <_free_r+0x24>
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	200002a0 	.word	0x200002a0

0800390c <sbrk_aligned>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	4e0f      	ldr	r6, [pc, #60]	@ (800394c <sbrk_aligned+0x40>)
 8003910:	000d      	movs	r5, r1
 8003912:	6831      	ldr	r1, [r6, #0]
 8003914:	0004      	movs	r4, r0
 8003916:	2900      	cmp	r1, #0
 8003918:	d102      	bne.n	8003920 <sbrk_aligned+0x14>
 800391a:	f000 ff2d 	bl	8004778 <_sbrk_r>
 800391e:	6030      	str	r0, [r6, #0]
 8003920:	0029      	movs	r1, r5
 8003922:	0020      	movs	r0, r4
 8003924:	f000 ff28 	bl	8004778 <_sbrk_r>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d103      	bne.n	8003934 <sbrk_aligned+0x28>
 800392c:	2501      	movs	r5, #1
 800392e:	426d      	negs	r5, r5
 8003930:	0028      	movs	r0, r5
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	2303      	movs	r3, #3
 8003936:	1cc5      	adds	r5, r0, #3
 8003938:	439d      	bics	r5, r3
 800393a:	42a8      	cmp	r0, r5
 800393c:	d0f8      	beq.n	8003930 <sbrk_aligned+0x24>
 800393e:	1a29      	subs	r1, r5, r0
 8003940:	0020      	movs	r0, r4
 8003942:	f000 ff19 	bl	8004778 <_sbrk_r>
 8003946:	3001      	adds	r0, #1
 8003948:	d1f2      	bne.n	8003930 <sbrk_aligned+0x24>
 800394a:	e7ef      	b.n	800392c <sbrk_aligned+0x20>
 800394c:	2000029c 	.word	0x2000029c

08003950 <_malloc_r>:
 8003950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003952:	2203      	movs	r2, #3
 8003954:	1ccb      	adds	r3, r1, #3
 8003956:	4393      	bics	r3, r2
 8003958:	3308      	adds	r3, #8
 800395a:	0005      	movs	r5, r0
 800395c:	001f      	movs	r7, r3
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d234      	bcs.n	80039cc <_malloc_r+0x7c>
 8003962:	270c      	movs	r7, #12
 8003964:	42b9      	cmp	r1, r7
 8003966:	d833      	bhi.n	80039d0 <_malloc_r+0x80>
 8003968:	0028      	movs	r0, r5
 800396a:	f000 f871 	bl	8003a50 <__malloc_lock>
 800396e:	4e37      	ldr	r6, [pc, #220]	@ (8003a4c <_malloc_r+0xfc>)
 8003970:	6833      	ldr	r3, [r6, #0]
 8003972:	001c      	movs	r4, r3
 8003974:	2c00      	cmp	r4, #0
 8003976:	d12f      	bne.n	80039d8 <_malloc_r+0x88>
 8003978:	0039      	movs	r1, r7
 800397a:	0028      	movs	r0, r5
 800397c:	f7ff ffc6 	bl	800390c <sbrk_aligned>
 8003980:	0004      	movs	r4, r0
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	d15f      	bne.n	8003a46 <_malloc_r+0xf6>
 8003986:	6834      	ldr	r4, [r6, #0]
 8003988:	9400      	str	r4, [sp, #0]
 800398a:	9b00      	ldr	r3, [sp, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d14a      	bne.n	8003a26 <_malloc_r+0xd6>
 8003990:	2c00      	cmp	r4, #0
 8003992:	d052      	beq.n	8003a3a <_malloc_r+0xea>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	0028      	movs	r0, r5
 8003998:	18e3      	adds	r3, r4, r3
 800399a:	9900      	ldr	r1, [sp, #0]
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	f000 feeb 	bl	8004778 <_sbrk_r>
 80039a2:	9b01      	ldr	r3, [sp, #4]
 80039a4:	4283      	cmp	r3, r0
 80039a6:	d148      	bne.n	8003a3a <_malloc_r+0xea>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	0028      	movs	r0, r5
 80039ac:	1aff      	subs	r7, r7, r3
 80039ae:	0039      	movs	r1, r7
 80039b0:	f7ff ffac 	bl	800390c <sbrk_aligned>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d040      	beq.n	8003a3a <_malloc_r+0xea>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	19db      	adds	r3, r3, r7
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	6833      	ldr	r3, [r6, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	2a00      	cmp	r2, #0
 80039c4:	d133      	bne.n	8003a2e <_malloc_r+0xde>
 80039c6:	9b00      	ldr	r3, [sp, #0]
 80039c8:	6033      	str	r3, [r6, #0]
 80039ca:	e019      	b.n	8003a00 <_malloc_r+0xb0>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	dac9      	bge.n	8003964 <_malloc_r+0x14>
 80039d0:	230c      	movs	r3, #12
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	2000      	movs	r0, #0
 80039d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039d8:	6821      	ldr	r1, [r4, #0]
 80039da:	1bc9      	subs	r1, r1, r7
 80039dc:	d420      	bmi.n	8003a20 <_malloc_r+0xd0>
 80039de:	290b      	cmp	r1, #11
 80039e0:	d90a      	bls.n	80039f8 <_malloc_r+0xa8>
 80039e2:	19e2      	adds	r2, r4, r7
 80039e4:	6027      	str	r7, [r4, #0]
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	d104      	bne.n	80039f4 <_malloc_r+0xa4>
 80039ea:	6032      	str	r2, [r6, #0]
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	6011      	str	r1, [r2, #0]
 80039f0:	6053      	str	r3, [r2, #4]
 80039f2:	e005      	b.n	8003a00 <_malloc_r+0xb0>
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	e7f9      	b.n	80039ec <_malloc_r+0x9c>
 80039f8:	6862      	ldr	r2, [r4, #4]
 80039fa:	42a3      	cmp	r3, r4
 80039fc:	d10e      	bne.n	8003a1c <_malloc_r+0xcc>
 80039fe:	6032      	str	r2, [r6, #0]
 8003a00:	0028      	movs	r0, r5
 8003a02:	f000 f82d 	bl	8003a60 <__malloc_unlock>
 8003a06:	0020      	movs	r0, r4
 8003a08:	2207      	movs	r2, #7
 8003a0a:	300b      	adds	r0, #11
 8003a0c:	1d23      	adds	r3, r4, #4
 8003a0e:	4390      	bics	r0, r2
 8003a10:	1ac2      	subs	r2, r0, r3
 8003a12:	4298      	cmp	r0, r3
 8003a14:	d0df      	beq.n	80039d6 <_malloc_r+0x86>
 8003a16:	1a1b      	subs	r3, r3, r0
 8003a18:	50a3      	str	r3, [r4, r2]
 8003a1a:	e7dc      	b.n	80039d6 <_malloc_r+0x86>
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	e7ef      	b.n	8003a00 <_malloc_r+0xb0>
 8003a20:	0023      	movs	r3, r4
 8003a22:	6864      	ldr	r4, [r4, #4]
 8003a24:	e7a6      	b.n	8003974 <_malloc_r+0x24>
 8003a26:	9c00      	ldr	r4, [sp, #0]
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	e7ad      	b.n	800398a <_malloc_r+0x3a>
 8003a2e:	001a      	movs	r2, r3
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	42a3      	cmp	r3, r4
 8003a34:	d1fb      	bne.n	8003a2e <_malloc_r+0xde>
 8003a36:	2300      	movs	r3, #0
 8003a38:	e7da      	b.n	80039f0 <_malloc_r+0xa0>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	0028      	movs	r0, r5
 8003a3e:	602b      	str	r3, [r5, #0]
 8003a40:	f000 f80e 	bl	8003a60 <__malloc_unlock>
 8003a44:	e7c6      	b.n	80039d4 <_malloc_r+0x84>
 8003a46:	6007      	str	r7, [r0, #0]
 8003a48:	e7da      	b.n	8003a00 <_malloc_r+0xb0>
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	200002a0 	.word	0x200002a0

08003a50 <__malloc_lock>:
 8003a50:	b510      	push	{r4, lr}
 8003a52:	4802      	ldr	r0, [pc, #8]	@ (8003a5c <__malloc_lock+0xc>)
 8003a54:	f7ff ff0e 	bl	8003874 <__retarget_lock_acquire_recursive>
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	20000298 	.word	0x20000298

08003a60 <__malloc_unlock>:
 8003a60:	b510      	push	{r4, lr}
 8003a62:	4802      	ldr	r0, [pc, #8]	@ (8003a6c <__malloc_unlock+0xc>)
 8003a64:	f7ff ff07 	bl	8003876 <__retarget_lock_release_recursive>
 8003a68:	bd10      	pop	{r4, pc}
 8003a6a:	46c0      	nop			@ (mov r8, r8)
 8003a6c:	20000298 	.word	0x20000298

08003a70 <__ssputs_r>:
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	688e      	ldr	r6, [r1, #8]
 8003a74:	b085      	sub	sp, #20
 8003a76:	001f      	movs	r7, r3
 8003a78:	000c      	movs	r4, r1
 8003a7a:	680b      	ldr	r3, [r1, #0]
 8003a7c:	9002      	str	r0, [sp, #8]
 8003a7e:	9203      	str	r2, [sp, #12]
 8003a80:	42be      	cmp	r6, r7
 8003a82:	d830      	bhi.n	8003ae6 <__ssputs_r+0x76>
 8003a84:	210c      	movs	r1, #12
 8003a86:	5e62      	ldrsh	r2, [r4, r1]
 8003a88:	2190      	movs	r1, #144	@ 0x90
 8003a8a:	00c9      	lsls	r1, r1, #3
 8003a8c:	420a      	tst	r2, r1
 8003a8e:	d028      	beq.n	8003ae2 <__ssputs_r+0x72>
 8003a90:	2003      	movs	r0, #3
 8003a92:	6921      	ldr	r1, [r4, #16]
 8003a94:	1a5b      	subs	r3, r3, r1
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	6963      	ldr	r3, [r4, #20]
 8003a9a:	4343      	muls	r3, r0
 8003a9c:	9801      	ldr	r0, [sp, #4]
 8003a9e:	0fdd      	lsrs	r5, r3, #31
 8003aa0:	18ed      	adds	r5, r5, r3
 8003aa2:	1c7b      	adds	r3, r7, #1
 8003aa4:	181b      	adds	r3, r3, r0
 8003aa6:	106d      	asrs	r5, r5, #1
 8003aa8:	42ab      	cmp	r3, r5
 8003aaa:	d900      	bls.n	8003aae <__ssputs_r+0x3e>
 8003aac:	001d      	movs	r5, r3
 8003aae:	0552      	lsls	r2, r2, #21
 8003ab0:	d528      	bpl.n	8003b04 <__ssputs_r+0x94>
 8003ab2:	0029      	movs	r1, r5
 8003ab4:	9802      	ldr	r0, [sp, #8]
 8003ab6:	f7ff ff4b 	bl	8003950 <_malloc_r>
 8003aba:	1e06      	subs	r6, r0, #0
 8003abc:	d02c      	beq.n	8003b18 <__ssputs_r+0xa8>
 8003abe:	9a01      	ldr	r2, [sp, #4]
 8003ac0:	6921      	ldr	r1, [r4, #16]
 8003ac2:	f000 fe76 	bl	80047b2 <memcpy>
 8003ac6:	89a2      	ldrh	r2, [r4, #12]
 8003ac8:	4b18      	ldr	r3, [pc, #96]	@ (8003b2c <__ssputs_r+0xbc>)
 8003aca:	401a      	ands	r2, r3
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	9b01      	ldr	r3, [sp, #4]
 8003ad4:	6126      	str	r6, [r4, #16]
 8003ad6:	18f6      	adds	r6, r6, r3
 8003ad8:	6026      	str	r6, [r4, #0]
 8003ada:	003e      	movs	r6, r7
 8003adc:	6165      	str	r5, [r4, #20]
 8003ade:	1aed      	subs	r5, r5, r3
 8003ae0:	60a5      	str	r5, [r4, #8]
 8003ae2:	42be      	cmp	r6, r7
 8003ae4:	d900      	bls.n	8003ae8 <__ssputs_r+0x78>
 8003ae6:	003e      	movs	r6, r7
 8003ae8:	0032      	movs	r2, r6
 8003aea:	9903      	ldr	r1, [sp, #12]
 8003aec:	6820      	ldr	r0, [r4, #0]
 8003aee:	f000 fe31 	bl	8004754 <memmove>
 8003af2:	2000      	movs	r0, #0
 8003af4:	68a3      	ldr	r3, [r4, #8]
 8003af6:	1b9b      	subs	r3, r3, r6
 8003af8:	60a3      	str	r3, [r4, #8]
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	199b      	adds	r3, r3, r6
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	b005      	add	sp, #20
 8003b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b04:	002a      	movs	r2, r5
 8003b06:	9802      	ldr	r0, [sp, #8]
 8003b08:	f000 fe5c 	bl	80047c4 <_realloc_r>
 8003b0c:	1e06      	subs	r6, r0, #0
 8003b0e:	d1e0      	bne.n	8003ad2 <__ssputs_r+0x62>
 8003b10:	6921      	ldr	r1, [r4, #16]
 8003b12:	9802      	ldr	r0, [sp, #8]
 8003b14:	f7ff feb0 	bl	8003878 <_free_r>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	9a02      	ldr	r2, [sp, #8]
 8003b1e:	4240      	negs	r0, r0
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	89a2      	ldrh	r2, [r4, #12]
 8003b24:	3334      	adds	r3, #52	@ 0x34
 8003b26:	4313      	orrs	r3, r2
 8003b28:	81a3      	strh	r3, [r4, #12]
 8003b2a:	e7e9      	b.n	8003b00 <__ssputs_r+0x90>
 8003b2c:	fffffb7f 	.word	0xfffffb7f

08003b30 <_svfiprintf_r>:
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b0a1      	sub	sp, #132	@ 0x84
 8003b34:	9003      	str	r0, [sp, #12]
 8003b36:	001d      	movs	r5, r3
 8003b38:	898b      	ldrh	r3, [r1, #12]
 8003b3a:	000f      	movs	r7, r1
 8003b3c:	0016      	movs	r6, r2
 8003b3e:	061b      	lsls	r3, r3, #24
 8003b40:	d511      	bpl.n	8003b66 <_svfiprintf_r+0x36>
 8003b42:	690b      	ldr	r3, [r1, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10e      	bne.n	8003b66 <_svfiprintf_r+0x36>
 8003b48:	2140      	movs	r1, #64	@ 0x40
 8003b4a:	f7ff ff01 	bl	8003950 <_malloc_r>
 8003b4e:	6038      	str	r0, [r7, #0]
 8003b50:	6138      	str	r0, [r7, #16]
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d105      	bne.n	8003b62 <_svfiprintf_r+0x32>
 8003b56:	230c      	movs	r3, #12
 8003b58:	9a03      	ldr	r2, [sp, #12]
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	4240      	negs	r0, r0
 8003b60:	e0cf      	b.n	8003d02 <_svfiprintf_r+0x1d2>
 8003b62:	2340      	movs	r3, #64	@ 0x40
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	2300      	movs	r3, #0
 8003b68:	ac08      	add	r4, sp, #32
 8003b6a:	6163      	str	r3, [r4, #20]
 8003b6c:	3320      	adds	r3, #32
 8003b6e:	7663      	strb	r3, [r4, #25]
 8003b70:	3310      	adds	r3, #16
 8003b72:	76a3      	strb	r3, [r4, #26]
 8003b74:	9507      	str	r5, [sp, #28]
 8003b76:	0035      	movs	r5, r6
 8003b78:	782b      	ldrb	r3, [r5, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <_svfiprintf_r+0x52>
 8003b7e:	2b25      	cmp	r3, #37	@ 0x25
 8003b80:	d148      	bne.n	8003c14 <_svfiprintf_r+0xe4>
 8003b82:	1bab      	subs	r3, r5, r6
 8003b84:	9305      	str	r3, [sp, #20]
 8003b86:	42b5      	cmp	r5, r6
 8003b88:	d00b      	beq.n	8003ba2 <_svfiprintf_r+0x72>
 8003b8a:	0032      	movs	r2, r6
 8003b8c:	0039      	movs	r1, r7
 8003b8e:	9803      	ldr	r0, [sp, #12]
 8003b90:	f7ff ff6e 	bl	8003a70 <__ssputs_r>
 8003b94:	3001      	adds	r0, #1
 8003b96:	d100      	bne.n	8003b9a <_svfiprintf_r+0x6a>
 8003b98:	e0ae      	b.n	8003cf8 <_svfiprintf_r+0x1c8>
 8003b9a:	6963      	ldr	r3, [r4, #20]
 8003b9c:	9a05      	ldr	r2, [sp, #20]
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	6163      	str	r3, [r4, #20]
 8003ba2:	782b      	ldrb	r3, [r5, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d100      	bne.n	8003baa <_svfiprintf_r+0x7a>
 8003ba8:	e0a6      	b.n	8003cf8 <_svfiprintf_r+0x1c8>
 8003baa:	2201      	movs	r2, #1
 8003bac:	2300      	movs	r3, #0
 8003bae:	4252      	negs	r2, r2
 8003bb0:	6062      	str	r2, [r4, #4]
 8003bb2:	a904      	add	r1, sp, #16
 8003bb4:	3254      	adds	r2, #84	@ 0x54
 8003bb6:	1852      	adds	r2, r2, r1
 8003bb8:	1c6e      	adds	r6, r5, #1
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	60e3      	str	r3, [r4, #12]
 8003bbe:	60a3      	str	r3, [r4, #8]
 8003bc0:	7013      	strb	r3, [r2, #0]
 8003bc2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003bc4:	4b54      	ldr	r3, [pc, #336]	@ (8003d18 <_svfiprintf_r+0x1e8>)
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	0018      	movs	r0, r3
 8003bca:	7831      	ldrb	r1, [r6, #0]
 8003bcc:	9305      	str	r3, [sp, #20]
 8003bce:	f000 fde5 	bl	800479c <memchr>
 8003bd2:	1c75      	adds	r5, r6, #1
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d11f      	bne.n	8003c18 <_svfiprintf_r+0xe8>
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	06d3      	lsls	r3, r2, #27
 8003bdc:	d504      	bpl.n	8003be8 <_svfiprintf_r+0xb8>
 8003bde:	2353      	movs	r3, #83	@ 0x53
 8003be0:	a904      	add	r1, sp, #16
 8003be2:	185b      	adds	r3, r3, r1
 8003be4:	2120      	movs	r1, #32
 8003be6:	7019      	strb	r1, [r3, #0]
 8003be8:	0713      	lsls	r3, r2, #28
 8003bea:	d504      	bpl.n	8003bf6 <_svfiprintf_r+0xc6>
 8003bec:	2353      	movs	r3, #83	@ 0x53
 8003bee:	a904      	add	r1, sp, #16
 8003bf0:	185b      	adds	r3, r3, r1
 8003bf2:	212b      	movs	r1, #43	@ 0x2b
 8003bf4:	7019      	strb	r1, [r3, #0]
 8003bf6:	7833      	ldrb	r3, [r6, #0]
 8003bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bfa:	d016      	beq.n	8003c2a <_svfiprintf_r+0xfa>
 8003bfc:	0035      	movs	r5, r6
 8003bfe:	2100      	movs	r1, #0
 8003c00:	200a      	movs	r0, #10
 8003c02:	68e3      	ldr	r3, [r4, #12]
 8003c04:	782a      	ldrb	r2, [r5, #0]
 8003c06:	1c6e      	adds	r6, r5, #1
 8003c08:	3a30      	subs	r2, #48	@ 0x30
 8003c0a:	2a09      	cmp	r2, #9
 8003c0c:	d950      	bls.n	8003cb0 <_svfiprintf_r+0x180>
 8003c0e:	2900      	cmp	r1, #0
 8003c10:	d111      	bne.n	8003c36 <_svfiprintf_r+0x106>
 8003c12:	e017      	b.n	8003c44 <_svfiprintf_r+0x114>
 8003c14:	3501      	adds	r5, #1
 8003c16:	e7af      	b.n	8003b78 <_svfiprintf_r+0x48>
 8003c18:	9b05      	ldr	r3, [sp, #20]
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	1ac0      	subs	r0, r0, r3
 8003c1e:	2301      	movs	r3, #1
 8003c20:	4083      	lsls	r3, r0
 8003c22:	4313      	orrs	r3, r2
 8003c24:	002e      	movs	r6, r5
 8003c26:	6023      	str	r3, [r4, #0]
 8003c28:	e7cc      	b.n	8003bc4 <_svfiprintf_r+0x94>
 8003c2a:	9b07      	ldr	r3, [sp, #28]
 8003c2c:	1d19      	adds	r1, r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	9107      	str	r1, [sp, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db01      	blt.n	8003c3a <_svfiprintf_r+0x10a>
 8003c36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c38:	e004      	b.n	8003c44 <_svfiprintf_r+0x114>
 8003c3a:	425b      	negs	r3, r3
 8003c3c:	60e3      	str	r3, [r4, #12]
 8003c3e:	2302      	movs	r3, #2
 8003c40:	4313      	orrs	r3, r2
 8003c42:	6023      	str	r3, [r4, #0]
 8003c44:	782b      	ldrb	r3, [r5, #0]
 8003c46:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c48:	d10c      	bne.n	8003c64 <_svfiprintf_r+0x134>
 8003c4a:	786b      	ldrb	r3, [r5, #1]
 8003c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c4e:	d134      	bne.n	8003cba <_svfiprintf_r+0x18a>
 8003c50:	9b07      	ldr	r3, [sp, #28]
 8003c52:	3502      	adds	r5, #2
 8003c54:	1d1a      	adds	r2, r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	9207      	str	r2, [sp, #28]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	da01      	bge.n	8003c62 <_svfiprintf_r+0x132>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	425b      	negs	r3, r3
 8003c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c64:	4e2d      	ldr	r6, [pc, #180]	@ (8003d1c <_svfiprintf_r+0x1ec>)
 8003c66:	2203      	movs	r2, #3
 8003c68:	0030      	movs	r0, r6
 8003c6a:	7829      	ldrb	r1, [r5, #0]
 8003c6c:	f000 fd96 	bl	800479c <memchr>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d006      	beq.n	8003c82 <_svfiprintf_r+0x152>
 8003c74:	2340      	movs	r3, #64	@ 0x40
 8003c76:	1b80      	subs	r0, r0, r6
 8003c78:	4083      	lsls	r3, r0
 8003c7a:	6822      	ldr	r2, [r4, #0]
 8003c7c:	3501      	adds	r5, #1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	7829      	ldrb	r1, [r5, #0]
 8003c84:	2206      	movs	r2, #6
 8003c86:	4826      	ldr	r0, [pc, #152]	@ (8003d20 <_svfiprintf_r+0x1f0>)
 8003c88:	1c6e      	adds	r6, r5, #1
 8003c8a:	7621      	strb	r1, [r4, #24]
 8003c8c:	f000 fd86 	bl	800479c <memchr>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d038      	beq.n	8003d06 <_svfiprintf_r+0x1d6>
 8003c94:	4b23      	ldr	r3, [pc, #140]	@ (8003d24 <_svfiprintf_r+0x1f4>)
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d122      	bne.n	8003ce0 <_svfiprintf_r+0x1b0>
 8003c9a:	2207      	movs	r2, #7
 8003c9c:	9b07      	ldr	r3, [sp, #28]
 8003c9e:	3307      	adds	r3, #7
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	9307      	str	r3, [sp, #28]
 8003ca6:	6963      	ldr	r3, [r4, #20]
 8003ca8:	9a04      	ldr	r2, [sp, #16]
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	6163      	str	r3, [r4, #20]
 8003cae:	e762      	b.n	8003b76 <_svfiprintf_r+0x46>
 8003cb0:	4343      	muls	r3, r0
 8003cb2:	0035      	movs	r5, r6
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	e7a4      	b.n	8003c04 <_svfiprintf_r+0xd4>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	200a      	movs	r0, #10
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	782a      	ldrb	r2, [r5, #0]
 8003cc6:	1c6e      	adds	r6, r5, #1
 8003cc8:	3a30      	subs	r2, #48	@ 0x30
 8003cca:	2a09      	cmp	r2, #9
 8003ccc:	d903      	bls.n	8003cd6 <_svfiprintf_r+0x1a6>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0c8      	beq.n	8003c64 <_svfiprintf_r+0x134>
 8003cd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8003cd4:	e7c6      	b.n	8003c64 <_svfiprintf_r+0x134>
 8003cd6:	4341      	muls	r1, r0
 8003cd8:	0035      	movs	r5, r6
 8003cda:	2301      	movs	r3, #1
 8003cdc:	1889      	adds	r1, r1, r2
 8003cde:	e7f1      	b.n	8003cc4 <_svfiprintf_r+0x194>
 8003ce0:	aa07      	add	r2, sp, #28
 8003ce2:	9200      	str	r2, [sp, #0]
 8003ce4:	0021      	movs	r1, r4
 8003ce6:	003a      	movs	r2, r7
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d28 <_svfiprintf_r+0x1f8>)
 8003cea:	9803      	ldr	r0, [sp, #12]
 8003cec:	e000      	b.n	8003cf0 <_svfiprintf_r+0x1c0>
 8003cee:	bf00      	nop
 8003cf0:	9004      	str	r0, [sp, #16]
 8003cf2:	9b04      	ldr	r3, [sp, #16]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	d1d6      	bne.n	8003ca6 <_svfiprintf_r+0x176>
 8003cf8:	89bb      	ldrh	r3, [r7, #12]
 8003cfa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003cfc:	065b      	lsls	r3, r3, #25
 8003cfe:	d500      	bpl.n	8003d02 <_svfiprintf_r+0x1d2>
 8003d00:	e72c      	b.n	8003b5c <_svfiprintf_r+0x2c>
 8003d02:	b021      	add	sp, #132	@ 0x84
 8003d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d06:	aa07      	add	r2, sp, #28
 8003d08:	9200      	str	r2, [sp, #0]
 8003d0a:	0021      	movs	r1, r4
 8003d0c:	003a      	movs	r2, r7
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <_svfiprintf_r+0x1f8>)
 8003d10:	9803      	ldr	r0, [sp, #12]
 8003d12:	f000 fa3b 	bl	800418c <_printf_i>
 8003d16:	e7eb      	b.n	8003cf0 <_svfiprintf_r+0x1c0>
 8003d18:	08004b50 	.word	0x08004b50
 8003d1c:	08004b56 	.word	0x08004b56
 8003d20:	08004b5a 	.word	0x08004b5a
 8003d24:	00000000 	.word	0x00000000
 8003d28:	08003a71 	.word	0x08003a71

08003d2c <_sungetc_r>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	0014      	movs	r4, r2
 8003d30:	1c4b      	adds	r3, r1, #1
 8003d32:	d103      	bne.n	8003d3c <_sungetc_r+0x10>
 8003d34:	2501      	movs	r5, #1
 8003d36:	426d      	negs	r5, r5
 8003d38:	0028      	movs	r0, r5
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	8993      	ldrh	r3, [r2, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	4393      	bics	r3, r2
 8003d42:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003d44:	81a3      	strh	r3, [r4, #12]
 8003d46:	b2ce      	uxtb	r6, r1
 8003d48:	6863      	ldr	r3, [r4, #4]
 8003d4a:	b2cd      	uxtb	r5, r1
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	d010      	beq.n	8003d72 <_sungetc_r+0x46>
 8003d50:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003d52:	429a      	cmp	r2, r3
 8003d54:	dd07      	ble.n	8003d66 <_sungetc_r+0x3a>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	701e      	strb	r6, [r3, #0]
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	3301      	adds	r3, #1
 8003d62:	6063      	str	r3, [r4, #4]
 8003d64:	e7e8      	b.n	8003d38 <_sungetc_r+0xc>
 8003d66:	0021      	movs	r1, r4
 8003d68:	f000 fcb6 	bl	80046d8 <__submore>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d0f2      	beq.n	8003d56 <_sungetc_r+0x2a>
 8003d70:	e7e0      	b.n	8003d34 <_sungetc_r+0x8>
 8003d72:	6921      	ldr	r1, [r4, #16]
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	2900      	cmp	r1, #0
 8003d78:	d007      	beq.n	8003d8a <_sungetc_r+0x5e>
 8003d7a:	4291      	cmp	r1, r2
 8003d7c:	d205      	bcs.n	8003d8a <_sungetc_r+0x5e>
 8003d7e:	1e51      	subs	r1, r2, #1
 8003d80:	7808      	ldrb	r0, [r1, #0]
 8003d82:	42a8      	cmp	r0, r5
 8003d84:	d101      	bne.n	8003d8a <_sungetc_r+0x5e>
 8003d86:	6021      	str	r1, [r4, #0]
 8003d88:	e7ea      	b.n	8003d60 <_sungetc_r+0x34>
 8003d8a:	6423      	str	r3, [r4, #64]	@ 0x40
 8003d8c:	0023      	movs	r3, r4
 8003d8e:	3344      	adds	r3, #68	@ 0x44
 8003d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d92:	2303      	movs	r3, #3
 8003d94:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003d96:	0023      	movs	r3, r4
 8003d98:	3346      	adds	r3, #70	@ 0x46
 8003d9a:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8003d9c:	701e      	strb	r6, [r3, #0]
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	2301      	movs	r3, #1
 8003da2:	e7de      	b.n	8003d62 <_sungetc_r+0x36>

08003da4 <__ssrefill_r>:
 8003da4:	b510      	push	{r4, lr}
 8003da6:	000c      	movs	r4, r1
 8003da8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003daa:	2900      	cmp	r1, #0
 8003dac:	d00e      	beq.n	8003dcc <__ssrefill_r+0x28>
 8003dae:	0023      	movs	r3, r4
 8003db0:	3344      	adds	r3, #68	@ 0x44
 8003db2:	4299      	cmp	r1, r3
 8003db4:	d001      	beq.n	8003dba <__ssrefill_r+0x16>
 8003db6:	f7ff fd5f 	bl	8003878 <_free_r>
 8003dba:	2000      	movs	r0, #0
 8003dbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003dbe:	6360      	str	r0, [r4, #52]	@ 0x34
 8003dc0:	6063      	str	r3, [r4, #4]
 8003dc2:	4283      	cmp	r3, r0
 8003dc4:	d002      	beq.n	8003dcc <__ssrefill_r+0x28>
 8003dc6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd10      	pop	{r4, pc}
 8003dcc:	6923      	ldr	r3, [r4, #16]
 8003dce:	2001      	movs	r0, #1
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	89a2      	ldrh	r2, [r4, #12]
 8003dd6:	6063      	str	r3, [r4, #4]
 8003dd8:	3320      	adds	r3, #32
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	81a3      	strh	r3, [r4, #12]
 8003dde:	4240      	negs	r0, r0
 8003de0:	e7f3      	b.n	8003dca <__ssrefill_r+0x26>
	...

08003de4 <__ssvfiscanf_r>:
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de6:	4cab      	ldr	r4, [pc, #684]	@ (8004094 <__ssvfiscanf_r+0x2b0>)
 8003de8:	44a5      	add	sp, r4
 8003dea:	000c      	movs	r4, r1
 8003dec:	2100      	movs	r1, #0
 8003dee:	9000      	str	r0, [sp, #0]
 8003df0:	20be      	movs	r0, #190	@ 0xbe
 8003df2:	9146      	str	r1, [sp, #280]	@ 0x118
 8003df4:	9147      	str	r1, [sp, #284]	@ 0x11c
 8003df6:	a903      	add	r1, sp, #12
 8003df8:	9148      	str	r1, [sp, #288]	@ 0x120
 8003dfa:	49a7      	ldr	r1, [pc, #668]	@ (8004098 <__ssvfiscanf_r+0x2b4>)
 8003dfc:	0040      	lsls	r0, r0, #1
 8003dfe:	ad43      	add	r5, sp, #268	@ 0x10c
 8003e00:	5029      	str	r1, [r5, r0]
 8003e02:	49a6      	ldr	r1, [pc, #664]	@ (800409c <__ssvfiscanf_r+0x2b8>)
 8003e04:	3004      	adds	r0, #4
 8003e06:	ad43      	add	r5, sp, #268	@ 0x10c
 8003e08:	5029      	str	r1, [r5, r0]
 8003e0a:	9302      	str	r3, [sp, #8]
 8003e0c:	7816      	ldrb	r6, [r2, #0]
 8003e0e:	2e00      	cmp	r6, #0
 8003e10:	d100      	bne.n	8003e14 <__ssvfiscanf_r+0x30>
 8003e12:	e13c      	b.n	800408e <__ssvfiscanf_r+0x2aa>
 8003e14:	2308      	movs	r3, #8
 8003e16:	2008      	movs	r0, #8
 8003e18:	4da1      	ldr	r5, [pc, #644]	@ (80040a0 <__ssvfiscanf_r+0x2bc>)
 8003e1a:	1c57      	adds	r7, r2, #1
 8003e1c:	5da9      	ldrb	r1, [r5, r6]
 8003e1e:	400b      	ands	r3, r1
 8003e20:	4201      	tst	r1, r0
 8003e22:	d01d      	beq.n	8003e60 <__ssvfiscanf_r+0x7c>
 8003e24:	0006      	movs	r6, r0
 8003e26:	6863      	ldr	r3, [r4, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	dd0f      	ble.n	8003e4c <__ssvfiscanf_r+0x68>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	5caa      	ldrb	r2, [r5, r2]
 8003e32:	4232      	tst	r2, r6
 8003e34:	d101      	bne.n	8003e3a <__ssvfiscanf_r+0x56>
 8003e36:	003a      	movs	r2, r7
 8003e38:	e7e8      	b.n	8003e0c <__ssvfiscanf_r+0x28>
 8003e3a:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	3201      	adds	r2, #1
 8003e40:	9247      	str	r2, [sp, #284]	@ 0x11c
 8003e42:	6862      	ldr	r2, [r4, #4]
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	3a01      	subs	r2, #1
 8003e48:	6062      	str	r2, [r4, #4]
 8003e4a:	e7ec      	b.n	8003e26 <__ssvfiscanf_r+0x42>
 8003e4c:	22c0      	movs	r2, #192	@ 0xc0
 8003e4e:	ab43      	add	r3, sp, #268	@ 0x10c
 8003e50:	0052      	lsls	r2, r2, #1
 8003e52:	0021      	movs	r1, r4
 8003e54:	589b      	ldr	r3, [r3, r2]
 8003e56:	9800      	ldr	r0, [sp, #0]
 8003e58:	4798      	blx	r3
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d0e6      	beq.n	8003e2c <__ssvfiscanf_r+0x48>
 8003e5e:	e7ea      	b.n	8003e36 <__ssvfiscanf_r+0x52>
 8003e60:	2e25      	cmp	r6, #37	@ 0x25
 8003e62:	d162      	bne.n	8003f2a <__ssvfiscanf_r+0x146>
 8003e64:	9345      	str	r3, [sp, #276]	@ 0x114
 8003e66:	9343      	str	r3, [sp, #268]	@ 0x10c
 8003e68:	7853      	ldrb	r3, [r2, #1]
 8003e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e6c:	d102      	bne.n	8003e74 <__ssvfiscanf_r+0x90>
 8003e6e:	3b1a      	subs	r3, #26
 8003e70:	9343      	str	r3, [sp, #268]	@ 0x10c
 8003e72:	1c97      	adds	r7, r2, #2
 8003e74:	003d      	movs	r5, r7
 8003e76:	220a      	movs	r2, #10
 8003e78:	7829      	ldrb	r1, [r5, #0]
 8003e7a:	1c6f      	adds	r7, r5, #1
 8003e7c:	000b      	movs	r3, r1
 8003e7e:	3b30      	subs	r3, #48	@ 0x30
 8003e80:	2b09      	cmp	r3, #9
 8003e82:	d91f      	bls.n	8003ec4 <__ssvfiscanf_r+0xe0>
 8003e84:	4b87      	ldr	r3, [pc, #540]	@ (80040a4 <__ssvfiscanf_r+0x2c0>)
 8003e86:	2203      	movs	r2, #3
 8003e88:	0018      	movs	r0, r3
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	f000 fc86 	bl	800479c <memchr>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d007      	beq.n	8003ea4 <__ssvfiscanf_r+0xc0>
 8003e94:	9b01      	ldr	r3, [sp, #4]
 8003e96:	003d      	movs	r5, r7
 8003e98:	1ac0      	subs	r0, r0, r3
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4083      	lsls	r3, r0
 8003e9e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	9343      	str	r3, [sp, #268]	@ 0x10c
 8003ea4:	782b      	ldrb	r3, [r5, #0]
 8003ea6:	1c6f      	adds	r7, r5, #1
 8003ea8:	2b78      	cmp	r3, #120	@ 0x78
 8003eaa:	d806      	bhi.n	8003eba <__ssvfiscanf_r+0xd6>
 8003eac:	2b57      	cmp	r3, #87	@ 0x57
 8003eae:	d810      	bhi.n	8003ed2 <__ssvfiscanf_r+0xee>
 8003eb0:	2b25      	cmp	r3, #37	@ 0x25
 8003eb2:	d03a      	beq.n	8003f2a <__ssvfiscanf_r+0x146>
 8003eb4:	d834      	bhi.n	8003f20 <__ssvfiscanf_r+0x13c>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d055      	beq.n	8003f66 <__ssvfiscanf_r+0x182>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	9349      	str	r3, [sp, #292]	@ 0x124
 8003ebe:	3307      	adds	r3, #7
 8003ec0:	9344      	str	r3, [sp, #272]	@ 0x110
 8003ec2:	e069      	b.n	8003f98 <__ssvfiscanf_r+0x1b4>
 8003ec4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003ec6:	003d      	movs	r5, r7
 8003ec8:	4353      	muls	r3, r2
 8003eca:	3b30      	subs	r3, #48	@ 0x30
 8003ecc:	185b      	adds	r3, r3, r1
 8003ece:	9345      	str	r3, [sp, #276]	@ 0x114
 8003ed0:	e7d2      	b.n	8003e78 <__ssvfiscanf_r+0x94>
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	3858      	subs	r0, #88	@ 0x58
 8003ed6:	2820      	cmp	r0, #32
 8003ed8:	d8ef      	bhi.n	8003eba <__ssvfiscanf_r+0xd6>
 8003eda:	f7fc f91d 	bl	8000118 <__gnu_thumb1_case_shi>
 8003ede:	004b      	.short	0x004b
 8003ee0:	ffeeffee 	.word	0xffeeffee
 8003ee4:	ffee007d 	.word	0xffee007d
 8003ee8:	ffeeffee 	.word	0xffeeffee
 8003eec:	ffeeffee 	.word	0xffeeffee
 8003ef0:	ffeeffee 	.word	0xffeeffee
 8003ef4:	007b0088 	.word	0x007b0088
 8003ef8:	00240024 	.word	0x00240024
 8003efc:	ffee0024 	.word	0xffee0024
 8003f00:	ffee0055 	.word	0xffee0055
 8003f04:	ffeeffee 	.word	0xffeeffee
 8003f08:	0090ffee 	.word	0x0090ffee
 8003f0c:	00470059 	.word	0x00470059
 8003f10:	ffeeffee 	.word	0xffeeffee
 8003f14:	ffee008e 	.word	0xffee008e
 8003f18:	ffee007b 	.word	0xffee007b
 8003f1c:	004bffee 	.word	0x004bffee
 8003f20:	3b45      	subs	r3, #69	@ 0x45
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d8c9      	bhi.n	8003eba <__ssvfiscanf_r+0xd6>
 8003f26:	2305      	movs	r3, #5
 8003f28:	e035      	b.n	8003f96 <__ssvfiscanf_r+0x1b2>
 8003f2a:	6863      	ldr	r3, [r4, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dd0d      	ble.n	8003f4c <__ssvfiscanf_r+0x168>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	42b2      	cmp	r2, r6
 8003f36:	d000      	beq.n	8003f3a <__ssvfiscanf_r+0x156>
 8003f38:	e0a9      	b.n	800408e <__ssvfiscanf_r+0x2aa>
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	6862      	ldr	r2, [r4, #4]
 8003f3e:	6023      	str	r3, [r4, #0]
 8003f40:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003f42:	3a01      	subs	r2, #1
 8003f44:	3301      	adds	r3, #1
 8003f46:	6062      	str	r2, [r4, #4]
 8003f48:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003f4a:	e774      	b.n	8003e36 <__ssvfiscanf_r+0x52>
 8003f4c:	23c0      	movs	r3, #192	@ 0xc0
 8003f4e:	aa43      	add	r2, sp, #268	@ 0x10c
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	0021      	movs	r1, r4
 8003f54:	58d3      	ldr	r3, [r2, r3]
 8003f56:	9800      	ldr	r0, [sp, #0]
 8003f58:	4798      	blx	r3
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d0e8      	beq.n	8003f30 <__ssvfiscanf_r+0x14c>
 8003f5e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d000      	beq.n	8003f66 <__ssvfiscanf_r+0x182>
 8003f64:	e08b      	b.n	800407e <__ssvfiscanf_r+0x29a>
 8003f66:	2001      	movs	r0, #1
 8003f68:	4240      	negs	r0, r0
 8003f6a:	e08c      	b.n	8004086 <__ssvfiscanf_r+0x2a2>
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8003f70:	430a      	orrs	r2, r1
 8003f72:	9243      	str	r2, [sp, #268]	@ 0x10c
 8003f74:	2280      	movs	r2, #128	@ 0x80
 8003f76:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8003f78:	0092      	lsls	r2, r2, #2
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	9243      	str	r2, [sp, #268]	@ 0x10c
 8003f7e:	2210      	movs	r2, #16
 8003f80:	9244      	str	r2, [sp, #272]	@ 0x110
 8003f82:	2b6e      	cmp	r3, #110	@ 0x6e
 8003f84:	d902      	bls.n	8003f8c <__ssvfiscanf_r+0x1a8>
 8003f86:	e005      	b.n	8003f94 <__ssvfiscanf_r+0x1b0>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9344      	str	r3, [sp, #272]	@ 0x110
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e002      	b.n	8003f96 <__ssvfiscanf_r+0x1b2>
 8003f90:	2308      	movs	r3, #8
 8003f92:	9344      	str	r3, [sp, #272]	@ 0x110
 8003f94:	2304      	movs	r3, #4
 8003f96:	9349      	str	r3, [sp, #292]	@ 0x124
 8003f98:	6863      	ldr	r3, [r4, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	dd3e      	ble.n	800401c <__ssvfiscanf_r+0x238>
 8003f9e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003fa0:	065b      	lsls	r3, r3, #25
 8003fa2:	d408      	bmi.n	8003fb6 <__ssvfiscanf_r+0x1d2>
 8003fa4:	26c0      	movs	r6, #192	@ 0xc0
 8003fa6:	2508      	movs	r5, #8
 8003fa8:	0076      	lsls	r6, r6, #1
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	493c      	ldr	r1, [pc, #240]	@ (80040a0 <__ssvfiscanf_r+0x2bc>)
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	5c8a      	ldrb	r2, [r1, r2]
 8003fb2:	422a      	tst	r2, r5
 8003fb4:	d13c      	bne.n	8004030 <__ssvfiscanf_r+0x24c>
 8003fb6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	dc4c      	bgt.n	8004056 <__ssvfiscanf_r+0x272>
 8003fbc:	0022      	movs	r2, r4
 8003fbe:	9800      	ldr	r0, [sp, #0]
 8003fc0:	ab02      	add	r3, sp, #8
 8003fc2:	a943      	add	r1, sp, #268	@ 0x10c
 8003fc4:	f000 f9ee 	bl	80043a4 <_scanf_chars>
 8003fc8:	2801      	cmp	r0, #1
 8003fca:	d060      	beq.n	800408e <__ssvfiscanf_r+0x2aa>
 8003fcc:	2802      	cmp	r0, #2
 8003fce:	d000      	beq.n	8003fd2 <__ssvfiscanf_r+0x1ee>
 8003fd0:	e731      	b.n	8003e36 <__ssvfiscanf_r+0x52>
 8003fd2:	e7c4      	b.n	8003f5e <__ssvfiscanf_r+0x17a>
 8003fd4:	220a      	movs	r2, #10
 8003fd6:	e7d3      	b.n	8003f80 <__ssvfiscanf_r+0x19c>
 8003fd8:	0039      	movs	r1, r7
 8003fda:	a803      	add	r0, sp, #12
 8003fdc:	f000 fb42 	bl	8004664 <__sccl>
 8003fe0:	2340      	movs	r3, #64	@ 0x40
 8003fe2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8003fe4:	0007      	movs	r7, r0
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	9343      	str	r3, [sp, #268]	@ 0x10c
 8003fea:	2301      	movs	r3, #1
 8003fec:	e7d3      	b.n	8003f96 <__ssvfiscanf_r+0x1b2>
 8003fee:	2340      	movs	r3, #64	@ 0x40
 8003ff0:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	9343      	str	r3, [sp, #268]	@ 0x10c
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e7cd      	b.n	8003f96 <__ssvfiscanf_r+0x1b2>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e7cb      	b.n	8003f96 <__ssvfiscanf_r+0x1b2>
 8003ffe:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004000:	06d3      	lsls	r3, r2, #27
 8004002:	d500      	bpl.n	8004006 <__ssvfiscanf_r+0x222>
 8004004:	e717      	b.n	8003e36 <__ssvfiscanf_r+0x52>
 8004006:	9b02      	ldr	r3, [sp, #8]
 8004008:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800400a:	1d18      	adds	r0, r3, #4
 800400c:	9002      	str	r0, [sp, #8]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	07d5      	lsls	r5, r2, #31
 8004012:	d501      	bpl.n	8004018 <__ssvfiscanf_r+0x234>
 8004014:	8019      	strh	r1, [r3, #0]
 8004016:	e70e      	b.n	8003e36 <__ssvfiscanf_r+0x52>
 8004018:	6019      	str	r1, [r3, #0]
 800401a:	e70c      	b.n	8003e36 <__ssvfiscanf_r+0x52>
 800401c:	23c0      	movs	r3, #192	@ 0xc0
 800401e:	aa43      	add	r2, sp, #268	@ 0x10c
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	0021      	movs	r1, r4
 8004024:	58d3      	ldr	r3, [r2, r3]
 8004026:	9800      	ldr	r0, [sp, #0]
 8004028:	4798      	blx	r3
 800402a:	2800      	cmp	r0, #0
 800402c:	d0b7      	beq.n	8003f9e <__ssvfiscanf_r+0x1ba>
 800402e:	e796      	b.n	8003f5e <__ssvfiscanf_r+0x17a>
 8004030:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004032:	3201      	adds	r2, #1
 8004034:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004036:	6862      	ldr	r2, [r4, #4]
 8004038:	3a01      	subs	r2, #1
 800403a:	6062      	str	r2, [r4, #4]
 800403c:	2a00      	cmp	r2, #0
 800403e:	dd02      	ble.n	8004046 <__ssvfiscanf_r+0x262>
 8004040:	3301      	adds	r3, #1
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	e7b1      	b.n	8003faa <__ssvfiscanf_r+0x1c6>
 8004046:	ab43      	add	r3, sp, #268	@ 0x10c
 8004048:	0021      	movs	r1, r4
 800404a:	599b      	ldr	r3, [r3, r6]
 800404c:	9800      	ldr	r0, [sp, #0]
 800404e:	4798      	blx	r3
 8004050:	2800      	cmp	r0, #0
 8004052:	d0aa      	beq.n	8003faa <__ssvfiscanf_r+0x1c6>
 8004054:	e783      	b.n	8003f5e <__ssvfiscanf_r+0x17a>
 8004056:	2b04      	cmp	r3, #4
 8004058:	dc06      	bgt.n	8004068 <__ssvfiscanf_r+0x284>
 800405a:	0022      	movs	r2, r4
 800405c:	9800      	ldr	r0, [sp, #0]
 800405e:	ab02      	add	r3, sp, #8
 8004060:	a943      	add	r1, sp, #268	@ 0x10c
 8004062:	f000 f9ff 	bl	8004464 <_scanf_i>
 8004066:	e7af      	b.n	8003fc8 <__ssvfiscanf_r+0x1e4>
 8004068:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <__ssvfiscanf_r+0x2c4>)
 800406a:	2b00      	cmp	r3, #0
 800406c:	d100      	bne.n	8004070 <__ssvfiscanf_r+0x28c>
 800406e:	e6e2      	b.n	8003e36 <__ssvfiscanf_r+0x52>
 8004070:	0022      	movs	r2, r4
 8004072:	9800      	ldr	r0, [sp, #0]
 8004074:	ab02      	add	r3, sp, #8
 8004076:	a943      	add	r1, sp, #268	@ 0x10c
 8004078:	e000      	b.n	800407c <__ssvfiscanf_r+0x298>
 800407a:	bf00      	nop
 800407c:	e7a4      	b.n	8003fc8 <__ssvfiscanf_r+0x1e4>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	065b      	lsls	r3, r3, #25
 8004082:	d500      	bpl.n	8004086 <__ssvfiscanf_r+0x2a2>
 8004084:	e76f      	b.n	8003f66 <__ssvfiscanf_r+0x182>
 8004086:	23a5      	movs	r3, #165	@ 0xa5
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	449d      	add	sp, r3
 800408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004090:	e7f9      	b.n	8004086 <__ssvfiscanf_r+0x2a2>
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	fffffd6c 	.word	0xfffffd6c
 8004098:	08003d2d 	.word	0x08003d2d
 800409c:	08003da5 	.word	0x08003da5
 80040a0:	08004b9f 	.word	0x08004b9f
 80040a4:	08004b56 	.word	0x08004b56
 80040a8:	00000000 	.word	0x00000000

080040ac <_printf_common>:
 80040ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ae:	0016      	movs	r6, r2
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	688a      	ldr	r2, [r1, #8]
 80040b4:	690b      	ldr	r3, [r1, #16]
 80040b6:	000c      	movs	r4, r1
 80040b8:	9000      	str	r0, [sp, #0]
 80040ba:	4293      	cmp	r3, r2
 80040bc:	da00      	bge.n	80040c0 <_printf_common+0x14>
 80040be:	0013      	movs	r3, r2
 80040c0:	0022      	movs	r2, r4
 80040c2:	6033      	str	r3, [r6, #0]
 80040c4:	3243      	adds	r2, #67	@ 0x43
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	d001      	beq.n	80040d0 <_printf_common+0x24>
 80040cc:	3301      	adds	r3, #1
 80040ce:	6033      	str	r3, [r6, #0]
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	069b      	lsls	r3, r3, #26
 80040d4:	d502      	bpl.n	80040dc <_printf_common+0x30>
 80040d6:	6833      	ldr	r3, [r6, #0]
 80040d8:	3302      	adds	r3, #2
 80040da:	6033      	str	r3, [r6, #0]
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	2306      	movs	r3, #6
 80040e0:	0015      	movs	r5, r2
 80040e2:	401d      	ands	r5, r3
 80040e4:	421a      	tst	r2, r3
 80040e6:	d027      	beq.n	8004138 <_printf_common+0x8c>
 80040e8:	0023      	movs	r3, r4
 80040ea:	3343      	adds	r3, #67	@ 0x43
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	4193      	sbcs	r3, r2
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	0692      	lsls	r2, r2, #26
 80040f6:	d430      	bmi.n	800415a <_printf_common+0xae>
 80040f8:	0022      	movs	r2, r4
 80040fa:	9901      	ldr	r1, [sp, #4]
 80040fc:	9800      	ldr	r0, [sp, #0]
 80040fe:	9d08      	ldr	r5, [sp, #32]
 8004100:	3243      	adds	r2, #67	@ 0x43
 8004102:	47a8      	blx	r5
 8004104:	3001      	adds	r0, #1
 8004106:	d025      	beq.n	8004154 <_printf_common+0xa8>
 8004108:	2206      	movs	r2, #6
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	2500      	movs	r5, #0
 800410e:	4013      	ands	r3, r2
 8004110:	2b04      	cmp	r3, #4
 8004112:	d105      	bne.n	8004120 <_printf_common+0x74>
 8004114:	6833      	ldr	r3, [r6, #0]
 8004116:	68e5      	ldr	r5, [r4, #12]
 8004118:	1aed      	subs	r5, r5, r3
 800411a:	43eb      	mvns	r3, r5
 800411c:	17db      	asrs	r3, r3, #31
 800411e:	401d      	ands	r5, r3
 8004120:	68a3      	ldr	r3, [r4, #8]
 8004122:	6922      	ldr	r2, [r4, #16]
 8004124:	4293      	cmp	r3, r2
 8004126:	dd01      	ble.n	800412c <_printf_common+0x80>
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	18ed      	adds	r5, r5, r3
 800412c:	2600      	movs	r6, #0
 800412e:	42b5      	cmp	r5, r6
 8004130:	d120      	bne.n	8004174 <_printf_common+0xc8>
 8004132:	2000      	movs	r0, #0
 8004134:	e010      	b.n	8004158 <_printf_common+0xac>
 8004136:	3501      	adds	r5, #1
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	6832      	ldr	r2, [r6, #0]
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	42ab      	cmp	r3, r5
 8004140:	ddd2      	ble.n	80040e8 <_printf_common+0x3c>
 8004142:	0022      	movs	r2, r4
 8004144:	2301      	movs	r3, #1
 8004146:	9901      	ldr	r1, [sp, #4]
 8004148:	9800      	ldr	r0, [sp, #0]
 800414a:	9f08      	ldr	r7, [sp, #32]
 800414c:	3219      	adds	r2, #25
 800414e:	47b8      	blx	r7
 8004150:	3001      	adds	r0, #1
 8004152:	d1f0      	bne.n	8004136 <_printf_common+0x8a>
 8004154:	2001      	movs	r0, #1
 8004156:	4240      	negs	r0, r0
 8004158:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800415a:	2030      	movs	r0, #48	@ 0x30
 800415c:	18e1      	adds	r1, r4, r3
 800415e:	3143      	adds	r1, #67	@ 0x43
 8004160:	7008      	strb	r0, [r1, #0]
 8004162:	0021      	movs	r1, r4
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	3145      	adds	r1, #69	@ 0x45
 8004168:	7809      	ldrb	r1, [r1, #0]
 800416a:	18a2      	adds	r2, r4, r2
 800416c:	3243      	adds	r2, #67	@ 0x43
 800416e:	3302      	adds	r3, #2
 8004170:	7011      	strb	r1, [r2, #0]
 8004172:	e7c1      	b.n	80040f8 <_printf_common+0x4c>
 8004174:	0022      	movs	r2, r4
 8004176:	2301      	movs	r3, #1
 8004178:	9901      	ldr	r1, [sp, #4]
 800417a:	9800      	ldr	r0, [sp, #0]
 800417c:	9f08      	ldr	r7, [sp, #32]
 800417e:	321a      	adds	r2, #26
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	d0e6      	beq.n	8004154 <_printf_common+0xa8>
 8004186:	3601      	adds	r6, #1
 8004188:	e7d1      	b.n	800412e <_printf_common+0x82>
	...

0800418c <_printf_i>:
 800418c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418e:	b08b      	sub	sp, #44	@ 0x2c
 8004190:	9206      	str	r2, [sp, #24]
 8004192:	000a      	movs	r2, r1
 8004194:	3243      	adds	r2, #67	@ 0x43
 8004196:	9307      	str	r3, [sp, #28]
 8004198:	9005      	str	r0, [sp, #20]
 800419a:	9203      	str	r2, [sp, #12]
 800419c:	7e0a      	ldrb	r2, [r1, #24]
 800419e:	000c      	movs	r4, r1
 80041a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80041a2:	2a78      	cmp	r2, #120	@ 0x78
 80041a4:	d809      	bhi.n	80041ba <_printf_i+0x2e>
 80041a6:	2a62      	cmp	r2, #98	@ 0x62
 80041a8:	d80b      	bhi.n	80041c2 <_printf_i+0x36>
 80041aa:	2a00      	cmp	r2, #0
 80041ac:	d100      	bne.n	80041b0 <_printf_i+0x24>
 80041ae:	e0ba      	b.n	8004326 <_printf_i+0x19a>
 80041b0:	497a      	ldr	r1, [pc, #488]	@ (800439c <_printf_i+0x210>)
 80041b2:	9104      	str	r1, [sp, #16]
 80041b4:	2a58      	cmp	r2, #88	@ 0x58
 80041b6:	d100      	bne.n	80041ba <_printf_i+0x2e>
 80041b8:	e08e      	b.n	80042d8 <_printf_i+0x14c>
 80041ba:	0025      	movs	r5, r4
 80041bc:	3542      	adds	r5, #66	@ 0x42
 80041be:	702a      	strb	r2, [r5, #0]
 80041c0:	e022      	b.n	8004208 <_printf_i+0x7c>
 80041c2:	0010      	movs	r0, r2
 80041c4:	3863      	subs	r0, #99	@ 0x63
 80041c6:	2815      	cmp	r0, #21
 80041c8:	d8f7      	bhi.n	80041ba <_printf_i+0x2e>
 80041ca:	f7fb ffa5 	bl	8000118 <__gnu_thumb1_case_shi>
 80041ce:	0016      	.short	0x0016
 80041d0:	fff6001f 	.word	0xfff6001f
 80041d4:	fff6fff6 	.word	0xfff6fff6
 80041d8:	001ffff6 	.word	0x001ffff6
 80041dc:	fff6fff6 	.word	0xfff6fff6
 80041e0:	fff6fff6 	.word	0xfff6fff6
 80041e4:	0036009f 	.word	0x0036009f
 80041e8:	fff6007e 	.word	0xfff6007e
 80041ec:	00b0fff6 	.word	0x00b0fff6
 80041f0:	0036fff6 	.word	0x0036fff6
 80041f4:	fff6fff6 	.word	0xfff6fff6
 80041f8:	0082      	.short	0x0082
 80041fa:	0025      	movs	r5, r4
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	3542      	adds	r5, #66	@ 0x42
 8004200:	1d11      	adds	r1, r2, #4
 8004202:	6019      	str	r1, [r3, #0]
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	702b      	strb	r3, [r5, #0]
 8004208:	2301      	movs	r3, #1
 800420a:	e09e      	b.n	800434a <_printf_i+0x1be>
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	6809      	ldr	r1, [r1, #0]
 8004210:	1d02      	adds	r2, r0, #4
 8004212:	060d      	lsls	r5, r1, #24
 8004214:	d50b      	bpl.n	800422e <_printf_i+0xa2>
 8004216:	6806      	ldr	r6, [r0, #0]
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	2e00      	cmp	r6, #0
 800421c:	da03      	bge.n	8004226 <_printf_i+0x9a>
 800421e:	232d      	movs	r3, #45	@ 0x2d
 8004220:	9a03      	ldr	r2, [sp, #12]
 8004222:	4276      	negs	r6, r6
 8004224:	7013      	strb	r3, [r2, #0]
 8004226:	4b5d      	ldr	r3, [pc, #372]	@ (800439c <_printf_i+0x210>)
 8004228:	270a      	movs	r7, #10
 800422a:	9304      	str	r3, [sp, #16]
 800422c:	e018      	b.n	8004260 <_printf_i+0xd4>
 800422e:	6806      	ldr	r6, [r0, #0]
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	0649      	lsls	r1, r1, #25
 8004234:	d5f1      	bpl.n	800421a <_printf_i+0x8e>
 8004236:	b236      	sxth	r6, r6
 8004238:	e7ef      	b.n	800421a <_printf_i+0x8e>
 800423a:	6808      	ldr	r0, [r1, #0]
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	c940      	ldmia	r1!, {r6}
 8004240:	0605      	lsls	r5, r0, #24
 8004242:	d402      	bmi.n	800424a <_printf_i+0xbe>
 8004244:	0640      	lsls	r0, r0, #25
 8004246:	d500      	bpl.n	800424a <_printf_i+0xbe>
 8004248:	b2b6      	uxth	r6, r6
 800424a:	6019      	str	r1, [r3, #0]
 800424c:	4b53      	ldr	r3, [pc, #332]	@ (800439c <_printf_i+0x210>)
 800424e:	270a      	movs	r7, #10
 8004250:	9304      	str	r3, [sp, #16]
 8004252:	2a6f      	cmp	r2, #111	@ 0x6f
 8004254:	d100      	bne.n	8004258 <_printf_i+0xcc>
 8004256:	3f02      	subs	r7, #2
 8004258:	0023      	movs	r3, r4
 800425a:	2200      	movs	r2, #0
 800425c:	3343      	adds	r3, #67	@ 0x43
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	6863      	ldr	r3, [r4, #4]
 8004262:	60a3      	str	r3, [r4, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	db06      	blt.n	8004276 <_printf_i+0xea>
 8004268:	2104      	movs	r1, #4
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	9d03      	ldr	r5, [sp, #12]
 800426e:	438a      	bics	r2, r1
 8004270:	6022      	str	r2, [r4, #0]
 8004272:	4333      	orrs	r3, r6
 8004274:	d00c      	beq.n	8004290 <_printf_i+0x104>
 8004276:	9d03      	ldr	r5, [sp, #12]
 8004278:	0030      	movs	r0, r6
 800427a:	0039      	movs	r1, r7
 800427c:	f7fb ffdc 	bl	8000238 <__aeabi_uidivmod>
 8004280:	9b04      	ldr	r3, [sp, #16]
 8004282:	3d01      	subs	r5, #1
 8004284:	5c5b      	ldrb	r3, [r3, r1]
 8004286:	702b      	strb	r3, [r5, #0]
 8004288:	0033      	movs	r3, r6
 800428a:	0006      	movs	r6, r0
 800428c:	429f      	cmp	r7, r3
 800428e:	d9f3      	bls.n	8004278 <_printf_i+0xec>
 8004290:	2f08      	cmp	r7, #8
 8004292:	d109      	bne.n	80042a8 <_printf_i+0x11c>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	07db      	lsls	r3, r3, #31
 8004298:	d506      	bpl.n	80042a8 <_printf_i+0x11c>
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	6923      	ldr	r3, [r4, #16]
 800429e:	429a      	cmp	r2, r3
 80042a0:	dc02      	bgt.n	80042a8 <_printf_i+0x11c>
 80042a2:	2330      	movs	r3, #48	@ 0x30
 80042a4:	3d01      	subs	r5, #1
 80042a6:	702b      	strb	r3, [r5, #0]
 80042a8:	9b03      	ldr	r3, [sp, #12]
 80042aa:	1b5b      	subs	r3, r3, r5
 80042ac:	6123      	str	r3, [r4, #16]
 80042ae:	9b07      	ldr	r3, [sp, #28]
 80042b0:	0021      	movs	r1, r4
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	9805      	ldr	r0, [sp, #20]
 80042b6:	9b06      	ldr	r3, [sp, #24]
 80042b8:	aa09      	add	r2, sp, #36	@ 0x24
 80042ba:	f7ff fef7 	bl	80040ac <_printf_common>
 80042be:	3001      	adds	r0, #1
 80042c0:	d148      	bne.n	8004354 <_printf_i+0x1c8>
 80042c2:	2001      	movs	r0, #1
 80042c4:	4240      	negs	r0, r0
 80042c6:	b00b      	add	sp, #44	@ 0x2c
 80042c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ca:	2220      	movs	r2, #32
 80042cc:	6809      	ldr	r1, [r1, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	2278      	movs	r2, #120	@ 0x78
 80042d4:	4932      	ldr	r1, [pc, #200]	@ (80043a0 <_printf_i+0x214>)
 80042d6:	9104      	str	r1, [sp, #16]
 80042d8:	0021      	movs	r1, r4
 80042da:	3145      	adds	r1, #69	@ 0x45
 80042dc:	700a      	strb	r2, [r1, #0]
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	c940      	ldmia	r1!, {r6}
 80042e4:	0610      	lsls	r0, r2, #24
 80042e6:	d402      	bmi.n	80042ee <_printf_i+0x162>
 80042e8:	0650      	lsls	r0, r2, #25
 80042ea:	d500      	bpl.n	80042ee <_printf_i+0x162>
 80042ec:	b2b6      	uxth	r6, r6
 80042ee:	6019      	str	r1, [r3, #0]
 80042f0:	07d3      	lsls	r3, r2, #31
 80042f2:	d502      	bpl.n	80042fa <_printf_i+0x16e>
 80042f4:	2320      	movs	r3, #32
 80042f6:	4313      	orrs	r3, r2
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	2e00      	cmp	r6, #0
 80042fc:	d001      	beq.n	8004302 <_printf_i+0x176>
 80042fe:	2710      	movs	r7, #16
 8004300:	e7aa      	b.n	8004258 <_printf_i+0xcc>
 8004302:	2220      	movs	r2, #32
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	4393      	bics	r3, r2
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	e7f8      	b.n	80042fe <_printf_i+0x172>
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	680d      	ldr	r5, [r1, #0]
 8004310:	1d10      	adds	r0, r2, #4
 8004312:	6949      	ldr	r1, [r1, #20]
 8004314:	6018      	str	r0, [r3, #0]
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	062e      	lsls	r6, r5, #24
 800431a:	d501      	bpl.n	8004320 <_printf_i+0x194>
 800431c:	6019      	str	r1, [r3, #0]
 800431e:	e002      	b.n	8004326 <_printf_i+0x19a>
 8004320:	066d      	lsls	r5, r5, #25
 8004322:	d5fb      	bpl.n	800431c <_printf_i+0x190>
 8004324:	8019      	strh	r1, [r3, #0]
 8004326:	2300      	movs	r3, #0
 8004328:	9d03      	ldr	r5, [sp, #12]
 800432a:	6123      	str	r3, [r4, #16]
 800432c:	e7bf      	b.n	80042ae <_printf_i+0x122>
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	1d11      	adds	r1, r2, #4
 8004332:	6019      	str	r1, [r3, #0]
 8004334:	6815      	ldr	r5, [r2, #0]
 8004336:	2100      	movs	r1, #0
 8004338:	0028      	movs	r0, r5
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	f000 fa2e 	bl	800479c <memchr>
 8004340:	2800      	cmp	r0, #0
 8004342:	d001      	beq.n	8004348 <_printf_i+0x1bc>
 8004344:	1b40      	subs	r0, r0, r5
 8004346:	6060      	str	r0, [r4, #4]
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	2300      	movs	r3, #0
 800434e:	9a03      	ldr	r2, [sp, #12]
 8004350:	7013      	strb	r3, [r2, #0]
 8004352:	e7ac      	b.n	80042ae <_printf_i+0x122>
 8004354:	002a      	movs	r2, r5
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	9906      	ldr	r1, [sp, #24]
 800435a:	9805      	ldr	r0, [sp, #20]
 800435c:	9d07      	ldr	r5, [sp, #28]
 800435e:	47a8      	blx	r5
 8004360:	3001      	adds	r0, #1
 8004362:	d0ae      	beq.n	80042c2 <_printf_i+0x136>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	079b      	lsls	r3, r3, #30
 8004368:	d415      	bmi.n	8004396 <_printf_i+0x20a>
 800436a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800436c:	68e0      	ldr	r0, [r4, #12]
 800436e:	4298      	cmp	r0, r3
 8004370:	daa9      	bge.n	80042c6 <_printf_i+0x13a>
 8004372:	0018      	movs	r0, r3
 8004374:	e7a7      	b.n	80042c6 <_printf_i+0x13a>
 8004376:	0022      	movs	r2, r4
 8004378:	2301      	movs	r3, #1
 800437a:	9906      	ldr	r1, [sp, #24]
 800437c:	9805      	ldr	r0, [sp, #20]
 800437e:	9e07      	ldr	r6, [sp, #28]
 8004380:	3219      	adds	r2, #25
 8004382:	47b0      	blx	r6
 8004384:	3001      	adds	r0, #1
 8004386:	d09c      	beq.n	80042c2 <_printf_i+0x136>
 8004388:	3501      	adds	r5, #1
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	42ab      	cmp	r3, r5
 8004392:	dcf0      	bgt.n	8004376 <_printf_i+0x1ea>
 8004394:	e7e9      	b.n	800436a <_printf_i+0x1de>
 8004396:	2500      	movs	r5, #0
 8004398:	e7f7      	b.n	800438a <_printf_i+0x1fe>
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	08004b61 	.word	0x08004b61
 80043a0:	08004b72 	.word	0x08004b72

080043a4 <_scanf_chars>:
 80043a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043a6:	0015      	movs	r5, r2
 80043a8:	688a      	ldr	r2, [r1, #8]
 80043aa:	000c      	movs	r4, r1
 80043ac:	9001      	str	r0, [sp, #4]
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	d104      	bne.n	80043bc <_scanf_chars+0x18>
 80043b2:	698a      	ldr	r2, [r1, #24]
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	d117      	bne.n	80043e8 <_scanf_chars+0x44>
 80043b8:	3201      	adds	r2, #1
 80043ba:	60a2      	str	r2, [r4, #8]
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	06d2      	lsls	r2, r2, #27
 80043c0:	d403      	bmi.n	80043ca <_scanf_chars+0x26>
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	1d11      	adds	r1, r2, #4
 80043c6:	6019      	str	r1, [r3, #0]
 80043c8:	6817      	ldr	r7, [r2, #0]
 80043ca:	2600      	movs	r6, #0
 80043cc:	69a0      	ldr	r0, [r4, #24]
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d016      	beq.n	8004400 <_scanf_chars+0x5c>
 80043d2:	2801      	cmp	r0, #1
 80043d4:	d10b      	bne.n	80043ee <_scanf_chars+0x4a>
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	6962      	ldr	r2, [r4, #20]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	5cd3      	ldrb	r3, [r2, r3]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10e      	bne.n	8004400 <_scanf_chars+0x5c>
 80043e2:	2e00      	cmp	r6, #0
 80043e4:	d03b      	beq.n	800445e <_scanf_chars+0xba>
 80043e6:	e029      	b.n	800443c <_scanf_chars+0x98>
 80043e8:	2201      	movs	r2, #1
 80043ea:	4252      	negs	r2, r2
 80043ec:	e7e5      	b.n	80043ba <_scanf_chars+0x16>
 80043ee:	2802      	cmp	r0, #2
 80043f0:	d124      	bne.n	800443c <_scanf_chars+0x98>
 80043f2:	682b      	ldr	r3, [r5, #0]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004460 <_scanf_chars+0xbc>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
 80043fa:	2208      	movs	r2, #8
 80043fc:	4213      	tst	r3, r2
 80043fe:	d11d      	bne.n	800443c <_scanf_chars+0x98>
 8004400:	2210      	movs	r2, #16
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	3601      	adds	r6, #1
 8004406:	4213      	tst	r3, r2
 8004408:	d103      	bne.n	8004412 <_scanf_chars+0x6e>
 800440a:	682b      	ldr	r3, [r5, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	703b      	strb	r3, [r7, #0]
 8004410:	3701      	adds	r7, #1
 8004412:	682a      	ldr	r2, [r5, #0]
 8004414:	686b      	ldr	r3, [r5, #4]
 8004416:	3201      	adds	r2, #1
 8004418:	602a      	str	r2, [r5, #0]
 800441a:	68a2      	ldr	r2, [r4, #8]
 800441c:	3b01      	subs	r3, #1
 800441e:	3a01      	subs	r2, #1
 8004420:	606b      	str	r3, [r5, #4]
 8004422:	60a2      	str	r2, [r4, #8]
 8004424:	2a00      	cmp	r2, #0
 8004426:	d009      	beq.n	800443c <_scanf_chars+0x98>
 8004428:	2b00      	cmp	r3, #0
 800442a:	dccf      	bgt.n	80043cc <_scanf_chars+0x28>
 800442c:	23c0      	movs	r3, #192	@ 0xc0
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	0029      	movs	r1, r5
 8004432:	58e3      	ldr	r3, [r4, r3]
 8004434:	9801      	ldr	r0, [sp, #4]
 8004436:	4798      	blx	r3
 8004438:	2800      	cmp	r0, #0
 800443a:	d0c7      	beq.n	80043cc <_scanf_chars+0x28>
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	2310      	movs	r3, #16
 8004440:	0011      	movs	r1, r2
 8004442:	4019      	ands	r1, r3
 8004444:	421a      	tst	r2, r3
 8004446:	d106      	bne.n	8004456 <_scanf_chars+0xb2>
 8004448:	68e3      	ldr	r3, [r4, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	60e3      	str	r3, [r4, #12]
 800444e:	69a3      	ldr	r3, [r4, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d000      	beq.n	8004456 <_scanf_chars+0xb2>
 8004454:	7039      	strb	r1, [r7, #0]
 8004456:	2000      	movs	r0, #0
 8004458:	6923      	ldr	r3, [r4, #16]
 800445a:	199b      	adds	r3, r3, r6
 800445c:	6123      	str	r3, [r4, #16]
 800445e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004460:	08004b9f 	.word	0x08004b9f

08004464 <_scanf_i>:
 8004464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004466:	b08b      	sub	sp, #44	@ 0x2c
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	4b78      	ldr	r3, [pc, #480]	@ (800464c <_scanf_i+0x1e8>)
 800446c:	0016      	movs	r6, r2
 800446e:	9004      	str	r0, [sp, #16]
 8004470:	aa07      	add	r2, sp, #28
 8004472:	cba1      	ldmia	r3!, {r0, r5, r7}
 8004474:	c2a1      	stmia	r2!, {r0, r5, r7}
 8004476:	4a76      	ldr	r2, [pc, #472]	@ (8004650 <_scanf_i+0x1ec>)
 8004478:	698b      	ldr	r3, [r1, #24]
 800447a:	000c      	movs	r4, r1
 800447c:	9205      	str	r2, [sp, #20]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d101      	bne.n	8004486 <_scanf_i+0x22>
 8004482:	4b74      	ldr	r3, [pc, #464]	@ (8004654 <_scanf_i+0x1f0>)
 8004484:	9305      	str	r3, [sp, #20]
 8004486:	22ae      	movs	r2, #174	@ 0xae
 8004488:	2000      	movs	r0, #0
 800448a:	68a3      	ldr	r3, [r4, #8]
 800448c:	0052      	lsls	r2, r2, #1
 800448e:	1e59      	subs	r1, r3, #1
 8004490:	9003      	str	r0, [sp, #12]
 8004492:	4291      	cmp	r1, r2
 8004494:	d905      	bls.n	80044a2 <_scanf_i+0x3e>
 8004496:	3b5e      	subs	r3, #94	@ 0x5e
 8004498:	3bff      	subs	r3, #255	@ 0xff
 800449a:	9303      	str	r3, [sp, #12]
 800449c:	235e      	movs	r3, #94	@ 0x5e
 800449e:	33ff      	adds	r3, #255	@ 0xff
 80044a0:	60a3      	str	r3, [r4, #8]
 80044a2:	0023      	movs	r3, r4
 80044a4:	331c      	adds	r3, #28
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	23d0      	movs	r3, #208	@ 0xd0
 80044aa:	2700      	movs	r7, #0
 80044ac:	6822      	ldr	r2, [r4, #0]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	4313      	orrs	r3, r2
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	9b00      	ldr	r3, [sp, #0]
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	a807      	add	r0, sp, #28
 80044bc:	7819      	ldrb	r1, [r3, #0]
 80044be:	00bb      	lsls	r3, r7, #2
 80044c0:	2202      	movs	r2, #2
 80044c2:	5818      	ldr	r0, [r3, r0]
 80044c4:	f000 f96a 	bl	800479c <memchr>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d029      	beq.n	8004520 <_scanf_i+0xbc>
 80044cc:	2f01      	cmp	r7, #1
 80044ce:	d15e      	bne.n	800458e <_scanf_i+0x12a>
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <_scanf_i+0x80>
 80044d6:	3308      	adds	r3, #8
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	6063      	str	r3, [r4, #4]
 80044dc:	33f9      	adds	r3, #249	@ 0xf9
 80044de:	33ff      	adds	r3, #255	@ 0xff
 80044e0:	4313      	orrs	r3, r2
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004658 <_scanf_i+0x1f4>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	68a3      	ldr	r3, [r4, #8]
 80044ee:	1e5a      	subs	r2, r3, #1
 80044f0:	60a2      	str	r2, [r4, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d014      	beq.n	8004520 <_scanf_i+0xbc>
 80044f6:	6833      	ldr	r3, [r6, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	6032      	str	r2, [r6, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	9a02      	ldr	r2, [sp, #8]
 8004500:	7013      	strb	r3, [r2, #0]
 8004502:	6873      	ldr	r3, [r6, #4]
 8004504:	1c55      	adds	r5, r2, #1
 8004506:	3b01      	subs	r3, #1
 8004508:	6073      	str	r3, [r6, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	dc07      	bgt.n	800451e <_scanf_i+0xba>
 800450e:	23c0      	movs	r3, #192	@ 0xc0
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	0031      	movs	r1, r6
 8004514:	58e3      	ldr	r3, [r4, r3]
 8004516:	9804      	ldr	r0, [sp, #16]
 8004518:	4798      	blx	r3
 800451a:	2800      	cmp	r0, #0
 800451c:	d17e      	bne.n	800461c <_scanf_i+0x1b8>
 800451e:	9502      	str	r5, [sp, #8]
 8004520:	3701      	adds	r7, #1
 8004522:	2f03      	cmp	r7, #3
 8004524:	d1c8      	bne.n	80044b8 <_scanf_i+0x54>
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <_scanf_i+0xcc>
 800452c:	330a      	adds	r3, #10
 800452e:	6063      	str	r3, [r4, #4]
 8004530:	2700      	movs	r7, #0
 8004532:	6863      	ldr	r3, [r4, #4]
 8004534:	4949      	ldr	r1, [pc, #292]	@ (800465c <_scanf_i+0x1f8>)
 8004536:	6960      	ldr	r0, [r4, #20]
 8004538:	1ac9      	subs	r1, r1, r3
 800453a:	f000 f893 	bl	8004664 <__sccl>
 800453e:	9d02      	ldr	r5, [sp, #8]
 8004540:	68a3      	ldr	r3, [r4, #8]
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	9302      	str	r3, [sp, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03f      	beq.n	80045ca <_scanf_i+0x166>
 800454a:	6831      	ldr	r1, [r6, #0]
 800454c:	6963      	ldr	r3, [r4, #20]
 800454e:	780a      	ldrb	r2, [r1, #0]
 8004550:	5c9b      	ldrb	r3, [r3, r2]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d039      	beq.n	80045ca <_scanf_i+0x166>
 8004556:	2a30      	cmp	r2, #48	@ 0x30
 8004558:	d128      	bne.n	80045ac <_scanf_i+0x148>
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4218      	tst	r0, r3
 8004560:	d024      	beq.n	80045ac <_scanf_i+0x148>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	3701      	adds	r7, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <_scanf_i+0x112>
 800456a:	001a      	movs	r2, r3
 800456c:	9b02      	ldr	r3, [sp, #8]
 800456e:	3a01      	subs	r2, #1
 8004570:	3301      	adds	r3, #1
 8004572:	9203      	str	r2, [sp, #12]
 8004574:	60a3      	str	r3, [r4, #8]
 8004576:	6873      	ldr	r3, [r6, #4]
 8004578:	3b01      	subs	r3, #1
 800457a:	6073      	str	r3, [r6, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	dd1c      	ble.n	80045ba <_scanf_i+0x156>
 8004580:	6833      	ldr	r3, [r6, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	68a3      	ldr	r3, [r4, #8]
 8004588:	3b01      	subs	r3, #1
 800458a:	60a3      	str	r3, [r4, #8]
 800458c:	e7d8      	b.n	8004540 <_scanf_i+0xdc>
 800458e:	2f02      	cmp	r7, #2
 8004590:	d1ac      	bne.n	80044ec <_scanf_i+0x88>
 8004592:	23c0      	movs	r3, #192	@ 0xc0
 8004594:	2180      	movs	r1, #128	@ 0x80
 8004596:	6822      	ldr	r2, [r4, #0]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4013      	ands	r3, r2
 800459c:	0089      	lsls	r1, r1, #2
 800459e:	428b      	cmp	r3, r1
 80045a0:	d1c1      	bne.n	8004526 <_scanf_i+0xc2>
 80045a2:	2310      	movs	r3, #16
 80045a4:	6063      	str	r3, [r4, #4]
 80045a6:	33f0      	adds	r3, #240	@ 0xf0
 80045a8:	4313      	orrs	r3, r2
 80045aa:	e79e      	b.n	80044ea <_scanf_i+0x86>
 80045ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004660 <_scanf_i+0x1fc>)
 80045ae:	4003      	ands	r3, r0
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	780b      	ldrb	r3, [r1, #0]
 80045b4:	702b      	strb	r3, [r5, #0]
 80045b6:	3501      	adds	r5, #1
 80045b8:	e7dd      	b.n	8004576 <_scanf_i+0x112>
 80045ba:	23c0      	movs	r3, #192	@ 0xc0
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	0031      	movs	r1, r6
 80045c0:	58e3      	ldr	r3, [r4, r3]
 80045c2:	9804      	ldr	r0, [sp, #16]
 80045c4:	4798      	blx	r3
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d0dd      	beq.n	8004586 <_scanf_i+0x122>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	05db      	lsls	r3, r3, #23
 80045ce:	d50e      	bpl.n	80045ee <_scanf_i+0x18a>
 80045d0:	9b00      	ldr	r3, [sp, #0]
 80045d2:	429d      	cmp	r5, r3
 80045d4:	d907      	bls.n	80045e6 <_scanf_i+0x182>
 80045d6:	23be      	movs	r3, #190	@ 0xbe
 80045d8:	3d01      	subs	r5, #1
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	0032      	movs	r2, r6
 80045de:	7829      	ldrb	r1, [r5, #0]
 80045e0:	58e3      	ldr	r3, [r4, r3]
 80045e2:	9804      	ldr	r0, [sp, #16]
 80045e4:	4798      	blx	r3
 80045e6:	9b00      	ldr	r3, [sp, #0]
 80045e8:	2001      	movs	r0, #1
 80045ea:	429d      	cmp	r5, r3
 80045ec:	d029      	beq.n	8004642 <_scanf_i+0x1de>
 80045ee:	6821      	ldr	r1, [r4, #0]
 80045f0:	2310      	movs	r3, #16
 80045f2:	000a      	movs	r2, r1
 80045f4:	401a      	ands	r2, r3
 80045f6:	4219      	tst	r1, r3
 80045f8:	d11c      	bne.n	8004634 <_scanf_i+0x1d0>
 80045fa:	702a      	strb	r2, [r5, #0]
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	9900      	ldr	r1, [sp, #0]
 8004600:	9804      	ldr	r0, [sp, #16]
 8004602:	9e05      	ldr	r6, [sp, #20]
 8004604:	47b0      	blx	r6
 8004606:	9b01      	ldr	r3, [sp, #4]
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0691      	lsls	r1, r2, #26
 800460e:	d507      	bpl.n	8004620 <_scanf_i+0x1bc>
 8004610:	9901      	ldr	r1, [sp, #4]
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	600a      	str	r2, [r1, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6018      	str	r0, [r3, #0]
 800461a:	e008      	b.n	800462e <_scanf_i+0x1ca>
 800461c:	2700      	movs	r7, #0
 800461e:	e7d4      	b.n	80045ca <_scanf_i+0x166>
 8004620:	1d19      	adds	r1, r3, #4
 8004622:	07d6      	lsls	r6, r2, #31
 8004624:	d50f      	bpl.n	8004646 <_scanf_i+0x1e2>
 8004626:	9a01      	ldr	r2, [sp, #4]
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	8018      	strh	r0, [r3, #0]
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60e3      	str	r3, [r4, #12]
 8004634:	2000      	movs	r0, #0
 8004636:	9b00      	ldr	r3, [sp, #0]
 8004638:	1aed      	subs	r5, r5, r3
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	19ed      	adds	r5, r5, r7
 800463e:	195b      	adds	r3, r3, r5
 8004640:	6123      	str	r3, [r4, #16]
 8004642:	b00b      	add	sp, #44	@ 0x2c
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004646:	9a01      	ldr	r2, [sp, #4]
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	e7e4      	b.n	8004616 <_scanf_i+0x1b2>
 800464c:	08004abc 	.word	0x08004abc
 8004650:	08004a45 	.word	0x08004a45
 8004654:	08004939 	.word	0x08004939
 8004658:	fffffaff 	.word	0xfffffaff
 800465c:	08004b93 	.word	0x08004b93
 8004660:	fffff6ff 	.word	0xfffff6ff

08004664 <__sccl>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	780b      	ldrb	r3, [r1, #0]
 8004668:	0004      	movs	r4, r0
 800466a:	2b5e      	cmp	r3, #94	@ 0x5e
 800466c:	d019      	beq.n	80046a2 <__sccl+0x3e>
 800466e:	1c4d      	adds	r5, r1, #1
 8004670:	2100      	movs	r1, #0
 8004672:	0022      	movs	r2, r4
 8004674:	1c60      	adds	r0, r4, #1
 8004676:	30ff      	adds	r0, #255	@ 0xff
 8004678:	7011      	strb	r1, [r2, #0]
 800467a:	3201      	adds	r2, #1
 800467c:	4282      	cmp	r2, r0
 800467e:	d1fb      	bne.n	8004678 <__sccl+0x14>
 8004680:	1e68      	subs	r0, r5, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d026      	beq.n	80046d4 <__sccl+0x70>
 8004686:	2601      	movs	r6, #1
 8004688:	404e      	eors	r6, r1
 800468a:	0028      	movs	r0, r5
 800468c:	54e6      	strb	r6, [r4, r3]
 800468e:	7801      	ldrb	r1, [r0, #0]
 8004690:	1c45      	adds	r5, r0, #1
 8004692:	292d      	cmp	r1, #45	@ 0x2d
 8004694:	d009      	beq.n	80046aa <__sccl+0x46>
 8004696:	295d      	cmp	r1, #93	@ 0x5d
 8004698:	d01b      	beq.n	80046d2 <__sccl+0x6e>
 800469a:	2900      	cmp	r1, #0
 800469c:	d01a      	beq.n	80046d4 <__sccl+0x70>
 800469e:	000b      	movs	r3, r1
 80046a0:	e7f3      	b.n	800468a <__sccl+0x26>
 80046a2:	784b      	ldrb	r3, [r1, #1]
 80046a4:	1c8d      	adds	r5, r1, #2
 80046a6:	2101      	movs	r1, #1
 80046a8:	e7e3      	b.n	8004672 <__sccl+0xe>
 80046aa:	7842      	ldrb	r2, [r0, #1]
 80046ac:	2a5d      	cmp	r2, #93	@ 0x5d
 80046ae:	d0f6      	beq.n	800469e <__sccl+0x3a>
 80046b0:	4293      	cmp	r3, r2
 80046b2:	dcf4      	bgt.n	800469e <__sccl+0x3a>
 80046b4:	0019      	movs	r1, r3
 80046b6:	3002      	adds	r0, #2
 80046b8:	3101      	adds	r1, #1
 80046ba:	5466      	strb	r6, [r4, r1]
 80046bc:	428a      	cmp	r2, r1
 80046be:	dcfb      	bgt.n	80046b8 <__sccl+0x54>
 80046c0:	1c59      	adds	r1, r3, #1
 80046c2:	4293      	cmp	r3, r2
 80046c4:	db02      	blt.n	80046cc <__sccl+0x68>
 80046c6:	2200      	movs	r2, #0
 80046c8:	188b      	adds	r3, r1, r2
 80046ca:	e7e0      	b.n	800468e <__sccl+0x2a>
 80046cc:	1ad2      	subs	r2, r2, r3
 80046ce:	3a01      	subs	r2, #1
 80046d0:	e7fa      	b.n	80046c8 <__sccl+0x64>
 80046d2:	0028      	movs	r0, r5
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080046d8 <__submore>:
 80046d8:	000b      	movs	r3, r1
 80046da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046dc:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 80046de:	3344      	adds	r3, #68	@ 0x44
 80046e0:	000c      	movs	r4, r1
 80046e2:	429d      	cmp	r5, r3
 80046e4:	d11c      	bne.n	8004720 <__submore+0x48>
 80046e6:	2680      	movs	r6, #128	@ 0x80
 80046e8:	00f6      	lsls	r6, r6, #3
 80046ea:	0031      	movs	r1, r6
 80046ec:	f7ff f930 	bl	8003950 <_malloc_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d102      	bne.n	80046fa <__submore+0x22>
 80046f4:	2001      	movs	r0, #1
 80046f6:	4240      	negs	r0, r0
 80046f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046fa:	0023      	movs	r3, r4
 80046fc:	6360      	str	r0, [r4, #52]	@ 0x34
 80046fe:	63a6      	str	r6, [r4, #56]	@ 0x38
 8004700:	3346      	adds	r3, #70	@ 0x46
 8004702:	781a      	ldrb	r2, [r3, #0]
 8004704:	4b10      	ldr	r3, [pc, #64]	@ (8004748 <__submore+0x70>)
 8004706:	54c2      	strb	r2, [r0, r3]
 8004708:	0023      	movs	r3, r4
 800470a:	3345      	adds	r3, #69	@ 0x45
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	4b0f      	ldr	r3, [pc, #60]	@ (800474c <__submore+0x74>)
 8004710:	54c2      	strb	r2, [r0, r3]
 8004712:	782a      	ldrb	r2, [r5, #0]
 8004714:	4b0e      	ldr	r3, [pc, #56]	@ (8004750 <__submore+0x78>)
 8004716:	54c2      	strb	r2, [r0, r3]
 8004718:	18c0      	adds	r0, r0, r3
 800471a:	6020      	str	r0, [r4, #0]
 800471c:	2000      	movs	r0, #0
 800471e:	e7eb      	b.n	80046f8 <__submore+0x20>
 8004720:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8004722:	0029      	movs	r1, r5
 8004724:	0073      	lsls	r3, r6, #1
 8004726:	001a      	movs	r2, r3
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	f000 f84b 	bl	80047c4 <_realloc_r>
 800472e:	1e05      	subs	r5, r0, #0
 8004730:	d0e0      	beq.n	80046f4 <__submore+0x1c>
 8004732:	1987      	adds	r7, r0, r6
 8004734:	0001      	movs	r1, r0
 8004736:	0032      	movs	r2, r6
 8004738:	0038      	movs	r0, r7
 800473a:	f000 f83a 	bl	80047b2 <memcpy>
 800473e:	9b01      	ldr	r3, [sp, #4]
 8004740:	6027      	str	r7, [r4, #0]
 8004742:	6365      	str	r5, [r4, #52]	@ 0x34
 8004744:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004746:	e7e9      	b.n	800471c <__submore+0x44>
 8004748:	000003ff 	.word	0x000003ff
 800474c:	000003fe 	.word	0x000003fe
 8004750:	000003fd 	.word	0x000003fd

08004754 <memmove>:
 8004754:	b510      	push	{r4, lr}
 8004756:	4288      	cmp	r0, r1
 8004758:	d902      	bls.n	8004760 <memmove+0xc>
 800475a:	188b      	adds	r3, r1, r2
 800475c:	4298      	cmp	r0, r3
 800475e:	d308      	bcc.n	8004772 <memmove+0x1e>
 8004760:	2300      	movs	r3, #0
 8004762:	429a      	cmp	r2, r3
 8004764:	d007      	beq.n	8004776 <memmove+0x22>
 8004766:	5ccc      	ldrb	r4, [r1, r3]
 8004768:	54c4      	strb	r4, [r0, r3]
 800476a:	3301      	adds	r3, #1
 800476c:	e7f9      	b.n	8004762 <memmove+0xe>
 800476e:	5c8b      	ldrb	r3, [r1, r2]
 8004770:	5483      	strb	r3, [r0, r2]
 8004772:	3a01      	subs	r2, #1
 8004774:	d2fb      	bcs.n	800476e <memmove+0x1a>
 8004776:	bd10      	pop	{r4, pc}

08004778 <_sbrk_r>:
 8004778:	2300      	movs	r3, #0
 800477a:	b570      	push	{r4, r5, r6, lr}
 800477c:	4d06      	ldr	r5, [pc, #24]	@ (8004798 <_sbrk_r+0x20>)
 800477e:	0004      	movs	r4, r0
 8004780:	0008      	movs	r0, r1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	f7fc f854 	bl	8000830 <_sbrk>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d103      	bne.n	8004794 <_sbrk_r+0x1c>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d000      	beq.n	8004794 <_sbrk_r+0x1c>
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	bd70      	pop	{r4, r5, r6, pc}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	20000294 	.word	0x20000294

0800479c <memchr>:
 800479c:	b2c9      	uxtb	r1, r1
 800479e:	1882      	adds	r2, r0, r2
 80047a0:	4290      	cmp	r0, r2
 80047a2:	d101      	bne.n	80047a8 <memchr+0xc>
 80047a4:	2000      	movs	r0, #0
 80047a6:	4770      	bx	lr
 80047a8:	7803      	ldrb	r3, [r0, #0]
 80047aa:	428b      	cmp	r3, r1
 80047ac:	d0fb      	beq.n	80047a6 <memchr+0xa>
 80047ae:	3001      	adds	r0, #1
 80047b0:	e7f6      	b.n	80047a0 <memchr+0x4>

080047b2 <memcpy>:
 80047b2:	2300      	movs	r3, #0
 80047b4:	b510      	push	{r4, lr}
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d100      	bne.n	80047bc <memcpy+0xa>
 80047ba:	bd10      	pop	{r4, pc}
 80047bc:	5ccc      	ldrb	r4, [r1, r3]
 80047be:	54c4      	strb	r4, [r0, r3]
 80047c0:	3301      	adds	r3, #1
 80047c2:	e7f8      	b.n	80047b6 <memcpy+0x4>

080047c4 <_realloc_r>:
 80047c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047c6:	0006      	movs	r6, r0
 80047c8:	000c      	movs	r4, r1
 80047ca:	0015      	movs	r5, r2
 80047cc:	2900      	cmp	r1, #0
 80047ce:	d105      	bne.n	80047dc <_realloc_r+0x18>
 80047d0:	0011      	movs	r1, r2
 80047d2:	f7ff f8bd 	bl	8003950 <_malloc_r>
 80047d6:	0004      	movs	r4, r0
 80047d8:	0020      	movs	r0, r4
 80047da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047dc:	2a00      	cmp	r2, #0
 80047de:	d103      	bne.n	80047e8 <_realloc_r+0x24>
 80047e0:	f7ff f84a 	bl	8003878 <_free_r>
 80047e4:	002c      	movs	r4, r5
 80047e6:	e7f7      	b.n	80047d8 <_realloc_r+0x14>
 80047e8:	f000 f930 	bl	8004a4c <_malloc_usable_size_r>
 80047ec:	0007      	movs	r7, r0
 80047ee:	4285      	cmp	r5, r0
 80047f0:	d802      	bhi.n	80047f8 <_realloc_r+0x34>
 80047f2:	0843      	lsrs	r3, r0, #1
 80047f4:	42ab      	cmp	r3, r5
 80047f6:	d3ef      	bcc.n	80047d8 <_realloc_r+0x14>
 80047f8:	0029      	movs	r1, r5
 80047fa:	0030      	movs	r0, r6
 80047fc:	f7ff f8a8 	bl	8003950 <_malloc_r>
 8004800:	9001      	str	r0, [sp, #4]
 8004802:	2800      	cmp	r0, #0
 8004804:	d101      	bne.n	800480a <_realloc_r+0x46>
 8004806:	9c01      	ldr	r4, [sp, #4]
 8004808:	e7e6      	b.n	80047d8 <_realloc_r+0x14>
 800480a:	002a      	movs	r2, r5
 800480c:	42bd      	cmp	r5, r7
 800480e:	d900      	bls.n	8004812 <_realloc_r+0x4e>
 8004810:	003a      	movs	r2, r7
 8004812:	0021      	movs	r1, r4
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	f7ff ffcc 	bl	80047b2 <memcpy>
 800481a:	0021      	movs	r1, r4
 800481c:	0030      	movs	r0, r6
 800481e:	f7ff f82b 	bl	8003878 <_free_r>
 8004822:	e7f0      	b.n	8004806 <_realloc_r+0x42>

08004824 <_strtol_l.isra.0>:
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	b085      	sub	sp, #20
 8004828:	0017      	movs	r7, r2
 800482a:	001e      	movs	r6, r3
 800482c:	9003      	str	r0, [sp, #12]
 800482e:	9101      	str	r1, [sp, #4]
 8004830:	2b24      	cmp	r3, #36	@ 0x24
 8004832:	d823      	bhi.n	800487c <_strtol_l.isra.0+0x58>
 8004834:	000c      	movs	r4, r1
 8004836:	2b01      	cmp	r3, #1
 8004838:	d020      	beq.n	800487c <_strtol_l.isra.0+0x58>
 800483a:	4b3d      	ldr	r3, [pc, #244]	@ (8004930 <_strtol_l.isra.0+0x10c>)
 800483c:	2208      	movs	r2, #8
 800483e:	469c      	mov	ip, r3
 8004840:	0023      	movs	r3, r4
 8004842:	4661      	mov	r1, ip
 8004844:	781d      	ldrb	r5, [r3, #0]
 8004846:	3401      	adds	r4, #1
 8004848:	5d48      	ldrb	r0, [r1, r5]
 800484a:	0001      	movs	r1, r0
 800484c:	4011      	ands	r1, r2
 800484e:	4210      	tst	r0, r2
 8004850:	d1f6      	bne.n	8004840 <_strtol_l.isra.0+0x1c>
 8004852:	2d2d      	cmp	r5, #45	@ 0x2d
 8004854:	d119      	bne.n	800488a <_strtol_l.isra.0+0x66>
 8004856:	7825      	ldrb	r5, [r4, #0]
 8004858:	1c9c      	adds	r4, r3, #2
 800485a:	2301      	movs	r3, #1
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	2210      	movs	r2, #16
 8004860:	0033      	movs	r3, r6
 8004862:	4393      	bics	r3, r2
 8004864:	d11d      	bne.n	80048a2 <_strtol_l.isra.0+0x7e>
 8004866:	2d30      	cmp	r5, #48	@ 0x30
 8004868:	d115      	bne.n	8004896 <_strtol_l.isra.0+0x72>
 800486a:	2120      	movs	r1, #32
 800486c:	7823      	ldrb	r3, [r4, #0]
 800486e:	438b      	bics	r3, r1
 8004870:	2b58      	cmp	r3, #88	@ 0x58
 8004872:	d110      	bne.n	8004896 <_strtol_l.isra.0+0x72>
 8004874:	7865      	ldrb	r5, [r4, #1]
 8004876:	3402      	adds	r4, #2
 8004878:	2610      	movs	r6, #16
 800487a:	e012      	b.n	80048a2 <_strtol_l.isra.0+0x7e>
 800487c:	f7fe ffd0 	bl	8003820 <__errno>
 8004880:	2316      	movs	r3, #22
 8004882:	6003      	str	r3, [r0, #0]
 8004884:	2000      	movs	r0, #0
 8004886:	b005      	add	sp, #20
 8004888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800488a:	9100      	str	r1, [sp, #0]
 800488c:	2d2b      	cmp	r5, #43	@ 0x2b
 800488e:	d1e6      	bne.n	800485e <_strtol_l.isra.0+0x3a>
 8004890:	7825      	ldrb	r5, [r4, #0]
 8004892:	1c9c      	adds	r4, r3, #2
 8004894:	e7e3      	b.n	800485e <_strtol_l.isra.0+0x3a>
 8004896:	2e00      	cmp	r6, #0
 8004898:	d1ee      	bne.n	8004878 <_strtol_l.isra.0+0x54>
 800489a:	360a      	adds	r6, #10
 800489c:	2d30      	cmp	r5, #48	@ 0x30
 800489e:	d100      	bne.n	80048a2 <_strtol_l.isra.0+0x7e>
 80048a0:	3e02      	subs	r6, #2
 80048a2:	4a24      	ldr	r2, [pc, #144]	@ (8004934 <_strtol_l.isra.0+0x110>)
 80048a4:	9b00      	ldr	r3, [sp, #0]
 80048a6:	4694      	mov	ip, r2
 80048a8:	4463      	add	r3, ip
 80048aa:	0031      	movs	r1, r6
 80048ac:	0018      	movs	r0, r3
 80048ae:	9302      	str	r3, [sp, #8]
 80048b0:	f7fb fcc2 	bl	8000238 <__aeabi_uidivmod>
 80048b4:	2200      	movs	r2, #0
 80048b6:	4684      	mov	ip, r0
 80048b8:	0010      	movs	r0, r2
 80048ba:	002b      	movs	r3, r5
 80048bc:	3b30      	subs	r3, #48	@ 0x30
 80048be:	2b09      	cmp	r3, #9
 80048c0:	d811      	bhi.n	80048e6 <_strtol_l.isra.0+0xc2>
 80048c2:	001d      	movs	r5, r3
 80048c4:	42ae      	cmp	r6, r5
 80048c6:	dd1d      	ble.n	8004904 <_strtol_l.isra.0+0xe0>
 80048c8:	1c53      	adds	r3, r2, #1
 80048ca:	d009      	beq.n	80048e0 <_strtol_l.isra.0+0xbc>
 80048cc:	2201      	movs	r2, #1
 80048ce:	4252      	negs	r2, r2
 80048d0:	4584      	cmp	ip, r0
 80048d2:	d305      	bcc.n	80048e0 <_strtol_l.isra.0+0xbc>
 80048d4:	d101      	bne.n	80048da <_strtol_l.isra.0+0xb6>
 80048d6:	42a9      	cmp	r1, r5
 80048d8:	db11      	blt.n	80048fe <_strtol_l.isra.0+0xda>
 80048da:	2201      	movs	r2, #1
 80048dc:	4370      	muls	r0, r6
 80048de:	1828      	adds	r0, r5, r0
 80048e0:	7825      	ldrb	r5, [r4, #0]
 80048e2:	3401      	adds	r4, #1
 80048e4:	e7e9      	b.n	80048ba <_strtol_l.isra.0+0x96>
 80048e6:	002b      	movs	r3, r5
 80048e8:	3b41      	subs	r3, #65	@ 0x41
 80048ea:	2b19      	cmp	r3, #25
 80048ec:	d801      	bhi.n	80048f2 <_strtol_l.isra.0+0xce>
 80048ee:	3d37      	subs	r5, #55	@ 0x37
 80048f0:	e7e8      	b.n	80048c4 <_strtol_l.isra.0+0xa0>
 80048f2:	002b      	movs	r3, r5
 80048f4:	3b61      	subs	r3, #97	@ 0x61
 80048f6:	2b19      	cmp	r3, #25
 80048f8:	d804      	bhi.n	8004904 <_strtol_l.isra.0+0xe0>
 80048fa:	3d57      	subs	r5, #87	@ 0x57
 80048fc:	e7e2      	b.n	80048c4 <_strtol_l.isra.0+0xa0>
 80048fe:	2201      	movs	r2, #1
 8004900:	4252      	negs	r2, r2
 8004902:	e7ed      	b.n	80048e0 <_strtol_l.isra.0+0xbc>
 8004904:	1c53      	adds	r3, r2, #1
 8004906:	d108      	bne.n	800491a <_strtol_l.isra.0+0xf6>
 8004908:	2322      	movs	r3, #34	@ 0x22
 800490a:	9a03      	ldr	r2, [sp, #12]
 800490c:	9802      	ldr	r0, [sp, #8]
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	2f00      	cmp	r7, #0
 8004912:	d0b8      	beq.n	8004886 <_strtol_l.isra.0+0x62>
 8004914:	1e63      	subs	r3, r4, #1
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	e007      	b.n	800492a <_strtol_l.isra.0+0x106>
 800491a:	9b00      	ldr	r3, [sp, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d000      	beq.n	8004922 <_strtol_l.isra.0+0xfe>
 8004920:	4240      	negs	r0, r0
 8004922:	2f00      	cmp	r7, #0
 8004924:	d0af      	beq.n	8004886 <_strtol_l.isra.0+0x62>
 8004926:	2a00      	cmp	r2, #0
 8004928:	d1f4      	bne.n	8004914 <_strtol_l.isra.0+0xf0>
 800492a:	9b01      	ldr	r3, [sp, #4]
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	e7aa      	b.n	8004886 <_strtol_l.isra.0+0x62>
 8004930:	08004b9f 	.word	0x08004b9f
 8004934:	7fffffff 	.word	0x7fffffff

08004938 <_strtol_r>:
 8004938:	b510      	push	{r4, lr}
 800493a:	f7ff ff73 	bl	8004824 <_strtol_l.isra.0>
 800493e:	bd10      	pop	{r4, pc}

08004940 <_strtoul_l.isra.0>:
 8004940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004942:	001e      	movs	r6, r3
 8004944:	4b3e      	ldr	r3, [pc, #248]	@ (8004a40 <_strtoul_l.isra.0+0x100>)
 8004946:	0017      	movs	r7, r2
 8004948:	000c      	movs	r4, r1
 800494a:	469c      	mov	ip, r3
 800494c:	2208      	movs	r2, #8
 800494e:	b085      	sub	sp, #20
 8004950:	9003      	str	r0, [sp, #12]
 8004952:	9100      	str	r1, [sp, #0]
 8004954:	0023      	movs	r3, r4
 8004956:	4661      	mov	r1, ip
 8004958:	781d      	ldrb	r5, [r3, #0]
 800495a:	3401      	adds	r4, #1
 800495c:	5d48      	ldrb	r0, [r1, r5]
 800495e:	0001      	movs	r1, r0
 8004960:	4011      	ands	r1, r2
 8004962:	4210      	tst	r0, r2
 8004964:	d1f6      	bne.n	8004954 <_strtoul_l.isra.0+0x14>
 8004966:	2d2d      	cmp	r5, #45	@ 0x2d
 8004968:	d112      	bne.n	8004990 <_strtoul_l.isra.0+0x50>
 800496a:	7825      	ldrb	r5, [r4, #0]
 800496c:	1c9c      	adds	r4, r3, #2
 800496e:	2301      	movs	r3, #1
 8004970:	9302      	str	r3, [sp, #8]
 8004972:	2210      	movs	r2, #16
 8004974:	0033      	movs	r3, r6
 8004976:	4393      	bics	r3, r2
 8004978:	d116      	bne.n	80049a8 <_strtoul_l.isra.0+0x68>
 800497a:	2d30      	cmp	r5, #48	@ 0x30
 800497c:	d10e      	bne.n	800499c <_strtoul_l.isra.0+0x5c>
 800497e:	2120      	movs	r1, #32
 8004980:	7823      	ldrb	r3, [r4, #0]
 8004982:	438b      	bics	r3, r1
 8004984:	2b58      	cmp	r3, #88	@ 0x58
 8004986:	d109      	bne.n	800499c <_strtoul_l.isra.0+0x5c>
 8004988:	7865      	ldrb	r5, [r4, #1]
 800498a:	3402      	adds	r4, #2
 800498c:	2610      	movs	r6, #16
 800498e:	e00b      	b.n	80049a8 <_strtoul_l.isra.0+0x68>
 8004990:	9102      	str	r1, [sp, #8]
 8004992:	2d2b      	cmp	r5, #43	@ 0x2b
 8004994:	d1ed      	bne.n	8004972 <_strtoul_l.isra.0+0x32>
 8004996:	7825      	ldrb	r5, [r4, #0]
 8004998:	1c9c      	adds	r4, r3, #2
 800499a:	e7ea      	b.n	8004972 <_strtoul_l.isra.0+0x32>
 800499c:	2e00      	cmp	r6, #0
 800499e:	d1f5      	bne.n	800498c <_strtoul_l.isra.0+0x4c>
 80049a0:	360a      	adds	r6, #10
 80049a2:	2d30      	cmp	r5, #48	@ 0x30
 80049a4:	d100      	bne.n	80049a8 <_strtoul_l.isra.0+0x68>
 80049a6:	3e02      	subs	r6, #2
 80049a8:	2001      	movs	r0, #1
 80049aa:	0031      	movs	r1, r6
 80049ac:	4240      	negs	r0, r0
 80049ae:	f7fb fbbd 	bl	800012c <__udivsi3>
 80049b2:	9001      	str	r0, [sp, #4]
 80049b4:	2001      	movs	r0, #1
 80049b6:	0031      	movs	r1, r6
 80049b8:	4240      	negs	r0, r0
 80049ba:	f7fb fc3d 	bl	8000238 <__aeabi_uidivmod>
 80049be:	2300      	movs	r3, #0
 80049c0:	2201      	movs	r2, #1
 80049c2:	0018      	movs	r0, r3
 80049c4:	4694      	mov	ip, r2
 80049c6:	002a      	movs	r2, r5
 80049c8:	3a30      	subs	r2, #48	@ 0x30
 80049ca:	2a09      	cmp	r2, #9
 80049cc:	d812      	bhi.n	80049f4 <_strtoul_l.isra.0+0xb4>
 80049ce:	0015      	movs	r5, r2
 80049d0:	42ae      	cmp	r6, r5
 80049d2:	dd1e      	ble.n	8004a12 <_strtoul_l.isra.0+0xd2>
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	d00a      	beq.n	80049ee <_strtoul_l.isra.0+0xae>
 80049d8:	2301      	movs	r3, #1
 80049da:	9a01      	ldr	r2, [sp, #4]
 80049dc:	425b      	negs	r3, r3
 80049de:	4282      	cmp	r2, r0
 80049e0:	d305      	bcc.n	80049ee <_strtoul_l.isra.0+0xae>
 80049e2:	d101      	bne.n	80049e8 <_strtoul_l.isra.0+0xa8>
 80049e4:	42a9      	cmp	r1, r5
 80049e6:	db11      	blt.n	8004a0c <_strtoul_l.isra.0+0xcc>
 80049e8:	4663      	mov	r3, ip
 80049ea:	4370      	muls	r0, r6
 80049ec:	1828      	adds	r0, r5, r0
 80049ee:	7825      	ldrb	r5, [r4, #0]
 80049f0:	3401      	adds	r4, #1
 80049f2:	e7e8      	b.n	80049c6 <_strtoul_l.isra.0+0x86>
 80049f4:	002a      	movs	r2, r5
 80049f6:	3a41      	subs	r2, #65	@ 0x41
 80049f8:	2a19      	cmp	r2, #25
 80049fa:	d801      	bhi.n	8004a00 <_strtoul_l.isra.0+0xc0>
 80049fc:	3d37      	subs	r5, #55	@ 0x37
 80049fe:	e7e7      	b.n	80049d0 <_strtoul_l.isra.0+0x90>
 8004a00:	002a      	movs	r2, r5
 8004a02:	3a61      	subs	r2, #97	@ 0x61
 8004a04:	2a19      	cmp	r2, #25
 8004a06:	d804      	bhi.n	8004a12 <_strtoul_l.isra.0+0xd2>
 8004a08:	3d57      	subs	r5, #87	@ 0x57
 8004a0a:	e7e1      	b.n	80049d0 <_strtoul_l.isra.0+0x90>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	425b      	negs	r3, r3
 8004a10:	e7ed      	b.n	80049ee <_strtoul_l.isra.0+0xae>
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	d107      	bne.n	8004a26 <_strtoul_l.isra.0+0xe6>
 8004a16:	2222      	movs	r2, #34	@ 0x22
 8004a18:	9903      	ldr	r1, [sp, #12]
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	600a      	str	r2, [r1, #0]
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	d109      	bne.n	8004a36 <_strtoul_l.isra.0+0xf6>
 8004a22:	b005      	add	sp, #20
 8004a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a26:	9a02      	ldr	r2, [sp, #8]
 8004a28:	2a00      	cmp	r2, #0
 8004a2a:	d000      	beq.n	8004a2e <_strtoul_l.isra.0+0xee>
 8004a2c:	4240      	negs	r0, r0
 8004a2e:	2f00      	cmp	r7, #0
 8004a30:	d0f7      	beq.n	8004a22 <_strtoul_l.isra.0+0xe2>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <_strtoul_l.isra.0+0xfa>
 8004a36:	1e63      	subs	r3, r4, #1
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	9b00      	ldr	r3, [sp, #0]
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	e7f0      	b.n	8004a22 <_strtoul_l.isra.0+0xe2>
 8004a40:	08004b9f 	.word	0x08004b9f

08004a44 <_strtoul_r>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	f7ff ff7b 	bl	8004940 <_strtoul_l.isra.0>
 8004a4a:	bd10      	pop	{r4, pc}

08004a4c <_malloc_usable_size_r>:
 8004a4c:	1f0b      	subs	r3, r1, #4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1f18      	subs	r0, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da01      	bge.n	8004a5a <_malloc_usable_size_r+0xe>
 8004a56:	580b      	ldr	r3, [r1, r0]
 8004a58:	18c0      	adds	r0, r0, r3
 8004a5a:	4770      	bx	lr

08004a5c <_init>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr

08004a68 <_fini>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	46c0      	nop			@ (mov r8, r8)
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr
